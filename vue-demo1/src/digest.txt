Directory structure:
└── src/
    ├── App.vue
    ├── main.js
    ├── api/
    │   └── axiosFile.js
    ├── components/
    │   ├── Banner.vue
    │   ├── MusicPlayer.vue
    │   ├── Navbar.vue
    │   └── Player.vue
    ├── layouts/
    │   └── CommonLayout.vue
    ├── pages/
    │   ├── Albums.vue
    │   ├── Artists.vue
    │   ├── CommentOfSong.vue
    │   ├── Login.vue
    │   ├── ManageSongs.vue
    │   ├── ManageUsers.vue
    │   ├── MyLove.vue
    │   ├── MyNewPlaylist.vue
    │   ├── MyPlaylist.vue
    │   ├── Player.vue
    │   ├── PublicPlaylist.vue
    │   ├── Register.vue
    │   ├── Uploaded.vue
    │   └── UserProfile.vue
    ├── router/
    │   └── index.js
    ├── stores/
    │   ├── index.js
    │   ├── player.js
    │   └── user.js
    ├── styles/
    │   └── common.css
    └── utils/
        ├── api.js
        └── format.js

================================================
FILE: App.vue
================================================
<template>
  <div class="app-container">
    <router-view></router-view>
    <Player v-if="currentSong" />
  </div>
</template>

<script setup>
import { computed } from 'vue'
import Player from '@/components/Player.vue'
import { usePlayerStore } from '@/stores/player'

const playerStore = usePlayerStore()
const currentSong = computed(() => playerStore.getCurrentSong)
</script>

<style>
.app-container {
  height: 100vh;
  display: flex;
  flex-direction: column;
}
</style>



================================================
FILE: main.js
================================================
import { createApp } from 'vue'
import { createPinia } from 'pinia'
import ElementPlus from 'element-plus'
import * as ElementPlusIconsVue from '@element-plus/icons-vue'
import 'element-plus/dist/index.css'
import App from './App.vue'
import router from './router'

// 创建应用实例
const app = createApp(App)

// 注册 Pinia
const pinia = createPinia()
app.use(pinia)

// 注册 Element Plus
app.use(ElementPlus)

// 注册所有图标
for (const [key, component] of Object.entries(ElementPlusIconsVue)) {
  app.component(key, component)
}

// 注册路由
app.use(router)

// 挂载应用
app.mount('#app')



================================================
FILE: api/axiosFile.js
================================================
//我直接把所有前端的请求集成在这个文件中统一修改，对于我的项目来说更加合适
import {api} from '@/utils/api';

//----------------------------------用户登录注册----------------------------------
//---用户信息相关接口---
export const  login = async (username, password) => {
    const resp = await api.post('/user/login',{
      username,
      password
    });
    return resp;
};

export const register = async (userData) => {
  const resp = await api.post('/user/register', userData);
  return resp;
};
//----------------------------------用户登录注册----------------------------------




//----------------------------------歌曲相关接口----------------------------------
export const getSongs = async (params) => {
  const resp = await api.get('/songs', { params });
  return resp;
};

export const getSongById = async (id) => {
  const resp = await api.get(`/song/${id}`);
  return resp;
};
//----------------------------------歌曲相关接口----------------------------------





//----------------------------------喜欢的歌曲相关接口----------------------------------
//---喜欢的歌曲相关接口---
export const getLikedSongsById = async (id) => {
  const response = await api.get(`/liked-songs/${id}`);
  return response;
};

//获取喜欢的歌曲
export const getLikedSongs = async (params) => {
  const response = await api.get('/liked-songs', { params });
  return response;
};

// 添加喜欢的歌曲
export const addLikedSong = async (songId) => {
    await api.post(`/like/${songId}`);
};
  
  // 取消喜欢的歌曲
export const removeLikedSong = async (songId) => {
  const response = await api.delete(`/like/${songId}`);
  return response;
};
//----------------------------------喜欢的歌曲相关接口----------------------------------





//----------------------------------歌单相关接口----------------------------------
// 获取用户歌单列表
export const getMyPlaylists = async (params = {}) => {
  const resp = await api.get('/my-playlists', { params })
  return resp
}

// 创建歌单
export const createPlaylist = async (data) => {
  const resp = await api.post('/playlist', data)
  return resp
}

// 删除歌单
export const deletePlaylist = async (playlistId) => {
  const resp = await api.delete(`/playlist/${playlistId}`)
  return resp
}

// 编辑歌单
export const updatePlaylist = async (playlistId, data) => {
  const resp = await api.put(`/playlist/${playlistId}`, data)
  return resp
}   

// 添加歌曲到歌单
export const addSongToPlaylist = async (playlistId, songId) => {
  const resp = await api.post(`/playlist/${playlistId}/songs`, { songId })
  return resp
}

// 从歌单中获取歌曲
export const getSongFromPlaylistById = async (playlistId, params) => {
    const resp = await api.get(`/playlist/${playlistId}`,{ params });
    return resp
}

// 从歌单中移除歌曲
export const removeSongFromPlaylist = async (playlistId, songId) => {
    const resp = await api.delete(`/playlist/${playlistId}/songs/${songId}`);
    return resp
}
//----------------------------------歌单相关接口----------------------------------

//----------------------------------专辑相关接口----------------------------------
// 获取专辑列表
export const getAlbums = async (params) => {
    const resp = await api.get('/albums', { params });
    return resp;
}

// 获取专辑详情及其歌曲
export const getAlbumById = async (albumId, params) => {
    const resp = await api.get(`/album/${albumId}`, { params });
    return resp;
}
//----------------------------------专辑相关接口----------------------------------



//----------------------------------歌手相关接口----------------------------------
// 获取歌手列表
export const getArtists = async (params) => {
    const resp = await api.get('/artists', { params });
    return resp;
}

// 获取歌手详情
export const getArtistById = async (artistId, params) => {
    const resp = await api.get(`/artist/${artistId}`, { params });
    return resp;
}
//----------------------------------歌手相关接口----------------------------------



//----------------------------------评论相关接口----------------------------------
// 获取歌曲评论列表
export const getComments = async (songId, params) => {
  const resp = await api.get(`/comments/${songId}`, { params });
  return resp;
};

// 获取评论回复列表
export const getCommentReplies = async (commentId, params) => {
  const resp = await api.get(`/comments/${commentId}/replies`, { params });
  return resp;
};

// 发表评论
export const createComment = async (data) => {
  const resp = await api.post('/comments', {
    songId: data.songId,
    text: data.text,
    parentId: data.parentId,
    replyToUserId: data.replyToUserId
  });
  return resp;
};

// 点赞评论
export const likeComment = async (commentId) => {
  const resp = await api.post(`/comments/${commentId}/like`);
  return resp;
};

// 删除评论
export const deleteComment = async (commentId) => {
  const resp = await api.delete(`/comments/${commentId}`);
  return resp;
};
//----------------------------------评论相关接口----------------------------------




//----------------------------------用户相关接口----------------------------------
// 获取用户信息
export const getUserInfo = async (userId) => {
  const resp = await api.get(`/user/${userId}`);
  return resp;
};

// 更新用户信息
export const updateUserInfo = async (userId, data) => {
  const resp = await api.put(`/user/${userId}`, data);
  return resp;
};
//----------------------------------用户相关接口----------------------------------






================================================
FILE: components/Banner.vue
================================================
<template>
  <el-header class="header">
    <el-row class="header-container" type="flex" justify="space-between" align="middle">
      <!-- 左侧：网站Logo和名称 -->
      <div class="logo-section">
        <div class="logo-wrapper">
          <el-icon class="logo-icon"><Headset /></el-icon>
        </div>
        <h2 class="website-name">音乐之声</h2>
      </div>

      <!-- 中间：当前页面名称 -->
      <div class="page-title">
        <transition name="fade" mode="out-in">
          <h2 :key="pageName">{{ pageName }}</h2>
        </transition>
      </div>

      <!-- 右侧：用户操作区 -->
      <div class="header-actions">
        <el-button class="action-btn profile-btn" @click="goToProfile">
          <el-icon><UserFilled /></el-icon>
          <span>个人主页</span>
        </el-button>
        <el-button class="action-btn logout-btn" @click="logout">
          <el-icon><SwitchButton /></el-icon>
          <span>退出登录</span>
        </el-button>
      </div>
    </el-row>
  </el-header>
</template>

<script>
import { Headset, UserFilled, SwitchButton } from '@element-plus/icons-vue'

export default {
  components: {
    Headset,
    UserFilled,
    SwitchButton
  },
  methods: {
    goToProfile() {
      const userId = localStorage.getItem('userId');
      this.$router.push(`/profile/${userId}`);
    },
    logout() {
      localStorage.removeItem('token');
      localStorage.removeItem('isAuthenticated');
      this.$router.push('/login');
      console.log("已退出登录");
    }
  },
  props: {
    pageName: String,
  },
};
</script>

<style scoped>
.header {
  background: rgba(255, 255, 255, 0.98);
  backdrop-filter: blur(10px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  padding: 0 32px;
  height: 64px;
  display: flex;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 1000;
  transition: all 0.3s ease;
}

.header:hover {
  background: rgba(255, 255, 255, 1);
}

.header-container {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* Logo区域样式 */
.logo-section {
  display: flex;
  align-items: center;
  gap: 16px;
}

.logo-wrapper {
  width: 40px;
  height: 40px;
  background: linear-gradient(135deg, var(--el-color-primary), var(--el-color-primary-light-5));
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.logo-wrapper:hover {
  transform: rotate(15deg) scale(1.1);
}

.logo-icon {
  font-size: 24px;
  color: #ffffff;
}

.website-name {
  margin: 0;
  font-size: 22px;
  font-weight: 600;
  background: linear-gradient(45deg, var(--el-color-primary), var(--el-color-primary-light-3));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  letter-spacing: 0.5px;
}

/* 页面标题样式 */
.page-title {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

.page-title h2 {
  margin: 0;
  font-size: 18px;
  font-weight: 500;
  color: var(--el-text-color-primary);
  transition: all 0.3s ease;
}

/* 操作按钮区域样式 */
.header-actions {
  display: flex;
  gap: 16px;
  align-items: center;
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  height: 38px;
  padding: 0 20px;
  border-radius: 19px;
  border: 2px solid transparent;
  background: var(--el-fill-color-light);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.profile-btn {
  color: var(--el-color-primary);
}

.profile-btn:hover {
  background: var(--el-color-primary-light-9);
  border-color: var(--el-color-primary-light-5);
  transform: translateY(-2px);
}

.logout-btn {
  color: var(--el-color-danger);
}

.logout-btn:hover {
  background: var(--el-color-danger-light-9);
  border-color: var(--el-color-danger-light-5);
  transform: translateY(-2px);
}

.action-btn .el-icon {
  font-size: 18px;
  transition: transform 0.3s ease;
}

.action-btn:hover .el-icon {
  transform: scale(1.1);
}

.action-btn span {
  font-size: 14px;
  font-weight: 500;
}

/* 过渡动画 */
.fade-enter-active,
.fade-leave-active {
  transition: all 0.3s ease;
}

.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: translateY(-10px);
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .header {
    padding: 0 16px;
  }

  .website-name {
    display: none;
  }
  
  .action-btn {
    padding: 0 12px;
  }
  
  .action-btn span {
    display: none;
  }
  
  .page-title h2 {
    font-size: 16px;
  }
}

/* 暗色模式适配 */
@media (prefers-color-scheme: dark) {
  .header {
    background: rgba(0, 0, 0, 0.8);
  }
  
  .action-btn {
    background: rgba(255, 255, 255, 0.05);
  }
}
</style>



================================================
FILE: components/MusicPlayer.vue
================================================
<template>
  <div class="music-player">
    <audio 
      ref="audio" 
      :src="currentSong?.url" 
      @timeupdate="updateProgress" 
      @ended="nextSong" 
      @canplay="onCanPlay"
    ></audio>
    <div v-if="currentSong" class="player-controls">
      <div class="left-section">
        <img :src="currentSong.cover" alt="cover" class="song-cover" @click="goToPlayer" />
        <div class="song-info">
          <span class="song-name">{{ currentSong.name }}</span>
          <span class="artist-name">{{ currentSong.artist }}</span>
        </div>
      </div>
      
      <div class="center-section">
        <div class="control-buttons">
          <el-button circle @click="previousSong">
            <el-icon><ArrowLeft /></el-icon>
          </el-button>
          <el-button circle @click="togglePlay">
            <el-icon>
              <VideoPlay v-if="!isPlaying" />
              <VideoPause v-else />
            </el-icon>
          </el-button>
          <el-button circle @click="nextSong">
            <el-icon><ArrowRight /></el-icon>
          </el-button>
        </div>
        <div class="progress-bar">
          <span class="time">{{ formatTime(currentProgress) }}</span>
          <el-slider
            :model-value="currentProgress"
            :max="maxDuration"
            :show-tooltip="false"
            @change="handleProgressChange"
          />
          <span class="time">{{ formatTime(maxDuration) }}</span>
        </div>
      </div>

      <div class="right-section">
        <div class="volume-control">
          <el-icon @click="toggleMute">
            <CaretBottom v-if="volume === 0" />
            <CaretTop v-else />
          </el-icon>
          <el-slider
            v-model="volume"
            :max="100"
            :show-tooltip="false"
            @input="setVolume"
            class="volume-slider"
          />
        </div>
      </div>
    </div>
    <div v-else class="empty-player">
      <span>暂无播放歌曲</span>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, onMounted, watch } from 'vue'
import { usePlayerStore } from '@/stores/player'
import { 
  ArrowLeft, 
  ArrowRight, 
  VideoPlay, 
  VideoPause, 
  CaretTop, 
  CaretBottom 
} from '@element-plus/icons-vue'

const playerStore = usePlayerStore()
const audio = ref(null)
const currentProgress = ref(0)
const maxDuration = ref(0)
const volume = ref(100)
const previousVolume = ref(100)

// 计算属性
const currentSong = computed(() => playerStore.getCurrentSong)
const isPlaying = computed(() => playerStore.getIsPlaying)

// 处理音频进度更新
const updateProgress = () => {
  if (audio.value) {
    const current = audio.value.currentTime
    const duration = audio.value.duration
    
    if (isFinite(current)) {
      currentProgress.value = current
    }
    if (isFinite(duration)) {
      maxDuration.value = duration
    }
  }
}

// 处理进度条改变
const handleProgressChange = (value) => {
  if (audio.value && isFinite(value)) {
    try {
      audio.value.currentTime = value
    } catch (error) {
      console.error('设置播放进度失败:', error)
    }
  }
}

// 格式化时间
const formatTime = (seconds) => {
  if (!isFinite(seconds)) return '0:00'
  const mins = Math.floor(seconds / 60)
  const secs = Math.floor(seconds % 60)
  return `${mins}:${secs.toString().padStart(2, '0')}`
}

// 播放控制方法
const togglePlay = () => {
  if (!audio.value) return

  if (isPlaying.value) {
    audio.value.pause()
    playerStore.pause()
  } else if (currentSong.value) {
    audio.value.play().catch(error => {
      console.error('播放失败:', error)
    })
    playerStore.resume()
  }
}

const previousSong = () => {
  playerStore.previous()
}

const nextSong = () => {
  playerStore.next()
}

const toggleMute = () => {
  if (volume.value > 0) {
    previousVolume.value = volume.value
    volume.value = 0
  } else {
    volume.value = previousVolume.value
  }
  setVolume(volume.value)
}

const setVolume = (value) => {
  if (audio.value) {
    audio.value.volume = value / 100
  }
}

const handleSongEnd = () => {
  playerStore.next()
}

const onCanPlay = () => {
  if (isPlaying.value) {
    audio.value?.play().catch(error => {
      console.error('播放失败:', error)
    })
  }
}

// 监听歌曲变化
watch(() => currentSong.value, (newSong) => {
  if (newSong && isPlaying.value && audio.value) {
    audio.value.play().catch(error => {
      console.error('播放失败:', error)
    })
  }
}, { immediate: true })

// 组件挂载
onMounted(() => {
  audio.value = document.querySelector('audio')
  if (audio.value) {
    audio.value.volume = volume.value / 100
  }
})
</script>

<style scoped>
.music-player {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 64px;
  background-color: #fff;
  border-top: 1px solid #e4e4e4;
  z-index: 1000;
}

.player-controls {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 100%;
  padding: 0 20px;
}

.left-section {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 300px;
}

.song-cover {
  width: 48px;
  height: 48px;
  border-radius: 4px;
  cursor: pointer;
}

.song-info {
  display: flex;
  flex-direction: column;
}

.song-name {
  font-size: 14px;
  font-weight: 500;
}

.artist-name {
  font-size: 12px;
  color: #909399;
}

.center-section {
  flex: 1;
  max-width: 600px;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 4px;
}

.control-buttons {
  display: flex;
  gap: 16px;
  align-items: center;
}

.progress-bar {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 8px;
}

.time {
  font-size: 12px;
  color: #909399;
  width: 40px;
  text-align: center;
}

.el-slider {
  flex: 1;
  margin: 0;
}

.right-section {
  width: 200px;
  display: flex;
  justify-content: flex-end;
}

.volume-control {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 150px;
}

.volume-slider {
  width: 100px;
}

.empty-player {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: #909399;
}
</style>


================================================
FILE: components/Navbar.vue
================================================
<template>
  <el-menu
    class="sidebar-menu"
    :default-active="activeRoute"
    background-color="#1a1a1a"
    text-color="#8c8c8c"
    active-text-color="#ffffff"
  >
    <div class="menu-header">
      <div class="logo">
        <el-icon :size="32"><Headset /></el-icon>
      </div>
      <h1 class="site-title">享受音乐</h1>
    </div>

    <div class="menu-section">
      <h3 class="section-title">发现音乐</h3>
      <el-menu-item index="/player" @click="navigateTo('/player')" class="menu-item">
        <el-icon><VideoPlay /></el-icon>
        <span>音乐播放</span>
      </el-menu-item>

      <el-menu-item index="/public-playlist" @click="navigateTo('/public-playlist')" class="menu-item">
        <el-icon><List /></el-icon>
        <span>音乐库</span>
      </el-menu-item>
    </div>

    <div class="menu-section">
      <h3 class="section-title">我的音乐</h3>
      <el-menu-item index="/my-love" @click="navigateTo(`/my-love/${getUserId()}`)" class="menu-item">
        <el-icon><Star /></el-icon>
        <span>我喜欢的音乐</span>
      </el-menu-item>

      <el-menu-item 
        index="/my-playlist" 
        @click="navigateTo(`/my-playlist/${getUserId()}`)"
        class="menu-item"
      >
        <el-icon><Menu /></el-icon>
        <span>我的歌单</span>
      </el-menu-item>

      <el-menu-item index="/uploaded" @click="navigateTo('/uploaded')" class="menu-item">
        <el-icon><Upload /></el-icon>
        <span>上传的音乐</span>
      </el-menu-item>
    </div>

    <div class="menu-section">
      <h3 class="section-title">管理</h3>
      <el-menu-item index="/manage-users" @click="navigateTo('/manage-users')" class="menu-item">
        <el-icon><User /></el-icon>
        <span>管理用户</span>
      </el-menu-item>

      <el-menu-item index="/manage-songs" @click="navigateTo('/manage-songs')" class="menu-item">
        <el-icon><Setting /></el-icon>
        <span>管理音乐</span>
      </el-menu-item>
    </div>
  </el-menu>
</template>

<script>
import { ref, onMounted } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import {
  Headset,
  VideoPlay,
  Star,
  Menu,
  List,
  Upload,
  User,
  Setting
} from '@element-plus/icons-vue'

export default {
  name: 'SidebarNavbar',
  components: {
    Headset,
    VideoPlay,
    Star,
    Menu,
    List,
    Upload,
    User,
    Setting
  },
  setup() {
    const router = useRouter()
    const route = useRoute()
    const activeRoute = ref(route.path)
    const userId = ref(localStorage.getItem('userId'))
    // 监听路由变化
    router.afterEach((to) => {
      activeRoute.value = to.path
    })

    // 导航方法
    const navigateTo = (path) => {
      router.push(path)
    }

    onMounted(() => {
      activeRoute.value = route.path
    })

    const getUserId = () => {
      try {
        const userStr = localStorage.getItem('userId')
        console.log(userStr)
        return userStr
      } catch (error) {
        console.error('获取用户ID失败:', error)
        return ''
      }
    }

    return {
      activeRoute,
      navigateTo,
      getUserId
    }
  }
}
</script>

<style scoped>
.sidebar-menu {
  height: 100%;
  border-right: none;
  padding: 16px 0;
  background: linear-gradient(180deg, #1a1a1a 0%, #2d2d2d 100%);
}

.menu-header {
  padding: 20px;
  text-align: center;
  margin-bottom: 24px;
}

.logo {
  width: 48px;
  height: 48px;
  margin-bottom: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--el-color-primary);
  transition: transform 0.3s ease;
}

.logo:hover {
  transform: scale(1.1);
}

.site-title {
  color: #ffffff;
  font-size: 1.2rem;
  margin: 0;
  font-weight: 500;
}

.menu-section {
  margin-bottom: 24px;
  padding: 0 12px;
}

.section-title {
  color: #6b7280;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  padding: 0 12px;
  margin: 8px 0;
}

.menu-item {
  margin: 4px 0;
  border-radius: 8px;
  height: 48px;
  transition: all 0.3s ease;
}

.menu-item:hover {
  background-color: rgba(255, 255, 255, 0.1) !important;
  transform: translateX(4px);
}

.menu-item.is-active {
  background: linear-gradient(90deg, var(--el-color-primary) 0%, var(--el-color-primary-light-3) 100%) !important;
  box-shadow: 0 4px 12px rgba(var(--el-color-primary-rgb), 0.3);
}

.el-menu-item .el-icon {
  margin-right: 12px;
  font-size: 18px;
  transition: transform 0.3s ease;
}

.menu-item:hover .el-icon {
  transform: scale(1.1);
}

.el-menu-item span {
  font-size: 14px;
  font-weight: 500;
}

/* 自定义滚动条 */
.sidebar-menu::-webkit-scrollbar {
  width: 6px;
}

.sidebar-menu::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 3px;
}

.sidebar-menu::-webkit-scrollbar-track {
  background-color: transparent;
}

/* 响应式调整 */
@media (max-width: 768px) {
  .sidebar-menu {
    padding: 12px 0;
  }

  .menu-header {
    padding: 12px;
  }

  .logo {
    width: 36px;
    height: 36px;
  }

  .site-title {
    font-size: 1rem;
  }

  .menu-item {
    height: 40px;
  }
}
</style>



================================================
FILE: components/Player.vue
================================================
<template>
  <div class="player-container" v-if="currentSong">
    <div class="player-info">
      <el-image 
        :src="currentSong.cover || '/assets/default-cover.jpg'"
        class="song-cover"
        fit="cover"
      />
      <div class="song-info">
        <div class="song-name">{{ currentSong.name }}</div>
        <div class="song-artist">{{ currentSong.artist }}</div>
      </div>
    </div>

    <div class="player-controls">
      <el-button 
        circle 
        :icon="ArrowLeft"
        @click="previousSong"
      />
      <el-button 
        circle 
        :icon="isPlaying ? VideoPause : VideoPlay"
        @click="togglePlay"
      />
      <el-button 
        circle 
        :icon="ArrowRight"
        @click="nextSong"
      />
    </div>

    <div class="player-volume">
      <el-slider v-model="volume" :max="100" :min="0" />
    </div>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import { ArrowLeft, ArrowRight, VideoPlay, VideoPause } from '@element-plus/icons-vue'
import { usePlayerStore } from '@/stores/player'

const playerStore = usePlayerStore()

// 状态
const volume = ref(100)

// 计算属性
const currentSong = computed(() => playerStore.getCurrentSong)
const isPlaying = computed(() => playerStore.getIsPlaying)

// 方法
const togglePlay = () => {
  if (isPlaying.value) {
    playerStore.pause()
  } else {
    playerStore.resume()
  }
}

const previousSong = () => {
  playerStore.previous()
}

const nextSong = () => {
  playerStore.next()
}
</script>

<style scoped>
.player-container {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 72px;
  background: var(--el-bg-color);
  border-top: 1px solid var(--el-border-color-lighter);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 24px;
  z-index: 1000;
}

.player-info {
  display: flex;
  align-items: center;
  gap: 12px;
  width: 300px;
}

.song-cover {
  width: 48px;
  height: 48px;
  border-radius: 4px;
}

.song-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.song-name {
  font-size: 14px;
  font-weight: 500;
  color: var(--el-text-color-primary);
}

.song-artist {
  font-size: 12px;
  color: var(--el-text-color-secondary);
}

.player-controls {
  display: flex;
  gap: 16px;
  align-items: center;
}

.player-volume {
  width: 200px;
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .player-container {
    padding: 0 16px;
  }

  .player-info {
    width: auto;
  }

  .song-info {
    display: none;
  }

  .player-volume {
    display: none;
  }
}
</style> 


================================================
FILE: layouts/CommonLayout.vue
================================================
<template>
  <div class="common-layout">
    <!-- 头部区域 -->
    <div class="fixed-header">
      <Banner :page-name="pageName"/>
    </div>

    <!-- 侧边栏区域 -->
    <div class="fixed-aside">
      <Navbar />
    </div>

    <!-- 主内容区域 -->
    <div class="main-content">
      <slot name="main"></slot>
    </div>

    <!-- 底部区域 -->
    <div class="fixed-footer">
      <MusicPlayer />
    </div>
  </div>
</template>

<script>
import Banner from '@/components/Banner.vue';  // 条幅信息栏
import Navbar from '@/components/Navbar.vue';  // 导航栏
import MusicPlayer from '@/components/MusicPlayer.vue';  // 音乐播放栏

export default {
  name: 'BaseLayout',
  components: {
    Banner,
    Navbar,
    MusicPlayer
  },
  props: {
    pageName: String,
  },
};
</script>

<style scoped>
.common-layout {
  height: 100vh;
  width: 100vw;
  overflow: hidden;
  position: relative;
}

/* 头部样式 */
.fixed-header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  height: 64px;
  background-color: #fff;
  z-index: 1000;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* 侧边栏样式 */
.fixed-aside {
  position: fixed;
  top: 64px;
  left: 0;
  bottom: 80px;
  width: 240px;
  background-color: #f4f4f4;
  z-index: 900;
  overflow: hidden;
}

/* 主内容区域样式 */
.main-content {
  position: fixed;
  top: 64px;
  left: 240px;
  right: 0;
  bottom: 80px;
  overflow: hidden;
  background-color: #fff;
}

/* 底部播放器样式 */
.fixed-footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 80px;
  background-color: #fff;
  z-index: 1000;
  box-shadow: 0 -2px 4px rgba(0, 0, 0, 0.1);
}
</style>



================================================
FILE: pages/Albums.vue
================================================
<template>
    <CommonLayout :page-name="currentName">
      <template #main>
        <div class="main-container">
          <!-- 左侧歌单信息 -->
          <div class="playlist-aside">
            <div class="playlist-info-card">
              <div class="playlist-cover">
                <el-image 
                  :src="currnetAlbum?.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <h2>{{ currnetAlbum?.name || '我的歌单' }}</h2>
              <div class="playlist-info">
                <span>{{ songs.length }}首歌曲</span>
              </div>
              <p class="playlist-description">{{ currnetAlbum?.description || '暂无描述' }}</p>
            </div>
          </div>
  
          <!-- 右侧歌曲列表 -->
          <div class="playlist-container" v-loading="isLoading">
            <!-- 搜索和筛选区域 -->
            <div class="filter-section">
              <el-input
                v-model="searchQuery"
                placeholder="搜索歌曲、歌手、专辑"
                class="search-input"
                :prefix-icon="Search"
                clearable
                @clear="handleSearch"
                @keyup.enter="handleSearch"
              />
              <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
                <el-option label="最新" value="latest" />
                <el-option label="最热" value="popular" />
              </el-select>
            </div>
  
            <!-- 歌曲列表 -->
            <div class="song-list">
              <div class="song-header">
                <div class="col-index">#</div>
                <div class="col-title">标题</div>
                <div class="col-duration">时长</div>
                <div class="col-artist">歌手</div>
                <div class="col-album">专辑</div>
                
              </div>
  
              <div 
                v-for="(song, index) in songs" 
                :key="song.id"
                class="song-item"
                @mouseenter="hoveredSong = song.id"
                @mouseleave="hoveredSong = null"
              >
                <div class="col-index">
                  <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
                  <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
                </div>
                <div class="col-title">
                  <div class="song-cover">
                    <el-image 
                    :src="currnetAlbum?.cover || '/assets/default-cover.jpg'"
                    fit="cover"
                    />
                  </div>
                  <span class="song-name">{{ song.name }}</span>
                </div>
                <div class="col-duration">
                  <template v-if="hoveredSong !== song.id">
                    {{ formatDuration(song.duration) }}
                  </template>
                  <div v-else class="action-buttons">
                    <el-tooltip content="喜欢" placement="top">
                      <el-icon 
                        @click="likeSong(song)" 
                        :class="{ 'liked': likedSongs.includes(song.id) }" 
                      >
                        <Star />
                      </el-icon>
                    </el-tooltip>
                    <el-tooltip content="添加到播放列表" placement="top">
                      <el-icon @click="addToPlaylist(song)"><Plus /></el-icon>
                    </el-tooltip>
                    <el-tooltip content="评论" placement="top">
                      <el-icon @click="goToComment(song)"><ChatDotRound /></el-icon>
                    </el-tooltip>
                    <el-tooltip content="下载" placement="top">
                      <el-icon @click="downloadSong(song)"><Download /></el-icon>
                    </el-tooltip>
                  </div>
                </div>
                <div class="col-artist" @click="goToArtist(song.author_id)">{{ song.artist }}</div>
                <div class="col-album" @click="goToAlbum(song.album_id)">{{ song.album }}</div>
              </div>
            </div>
          </div>
        </div>
  
         <!-- 添加到播放列表弹窗 -->
        <el-dialog
          v-model="playlistDialogVisible"
          title="添加到歌单"
          width="400px"
          @close="selectedPlaylist = null"
        >
          <div class="playlist-dialog-content">
            <!-- 现有歌单列表，设置为可见之后弹出 -->
            <div class="existing-playlists">
              <el-scrollbar height="400px">
                <div class="playlist-list">
                  <div 
                    v-for="playlist in userPlaylists" 
                    :key="playlist.id" 
                    class="playlist-item"
                    :class="{ 'playlist-item-selected': selectedPlaylist === playlist.id }"
                    @click="selectedPlaylist = playlist.id"
                  >
                    <div class="playlist-info-row">
                      <el-image 
                        :src="playlist.cover || '/assets/default-cover.jpg'" 
                        class="playlist-cover-img"
                      />
                      <div class="playlist-details">
                        <div class="playlist-name">{{ playlist.name }}</div>
                        <div class="playlist-description">{{ playlist.description || '暂无描述' }}</div>
                        <div class="playlist-count">{{ playlist.song_count || 0 }}首歌曲</div>
                      </div>
                    </div>
                  </div>
                </div>
              </el-scrollbar>
            </div>
  
            <!-- 创建新歌单 -->
            <div class="create-playlist">
              <el-divider>创建新歌单</el-divider>
              <div class="create-playlist-form">
                <el-input
                  v-model="newPlaylistName"
                  placeholder="请输入歌单名称"
                  clearable
                />
                <el-input
                  v-model="newPlaylistDescription"
                  type="textarea"
                  :rows="2"
                  placeholder="添加歌单描述（选填）"
                  class="mt-3"
                />
                <el-button type="primary" @click="createNewPlaylist" class="mt-3">
                  创建
                </el-button>
              </div>
            </div>
          </div>
          <template #footer>
            <span class="dialog-footer">
              <el-button @click="playlistDialogVisible = false">取消</el-button>
              <el-button type="primary" @click="confirmAddToPlaylist">
                确定
              </el-button>
            </span>
          </template>
        </el-dialog>
      
      </template>
    </CommonLayout>
  </template>
  
  <script setup>
  import { ref, onMounted } from 'vue'
  import { useRouter } from 'vue-router'
  import { ElMessage } from 'element-plus'
  import { 
    Search, 
    VideoPlay, 
    Star, 
    Plus, 
    FolderAdd, 
    ChatDotRound, 
    Download 
  } from '@element-plus/icons-vue'
  import { 
    getAlbums,
    getAlbumById,
    removeSongFromPlaylist,
    getLikedSongsById, 
    addLikedSong, 
    removeLikedSong,
    getMyPlaylists, 
    createPlaylist, 
    addSongToPlaylist 
  } from '@/api/axiosFile'
  import { usePlayerStore } from '@/stores/player'
  import CommonLayout from '@/layouts/CommonLayout.vue'
  
  const router = useRouter()
  const playerStore = usePlayerStore()
  
  // 基础数据
  const currentName = ref('专辑详情')
  const songs = ref([])
  const page = ref(1)
  const pageSize = ref(10)
  const totalSongs = ref(0)
  const isLoading = ref(false)
  const searchQuery = ref('')
  const sortBy = ref('latest')
  const hoveredSong = ref(null)
  const likedSongs = ref([])
  const coverDialogVisible = ref(false)
  const playlistDialogVisible = ref(false)
  const selectedSong = ref(null)
  const selectedPlaylist = ref(null)
  const newPlaylistName = ref('')
  const newPlaylistDescription = ref('')
  const userPlaylists = ref([])
  const currnetAlbum = ref(null)
  // 方法定义
  const loadData = async () => {
    isLoading.value = true
    try {
      // 1. 获取歌曲列表
      //注意这里的route文件获取当前路径id的方式
      const songsResponse = await getAlbumById(router.currentRoute.value.params.id,{
        page: page.value,
        pageSize: pageSize.value,
        search: searchQuery.value,
        sortBy: sortBy.value
      });
      //此处已经在后端处理了多表查询了，所以这里不需要再处理
      if (!songsResponse.data.message) {
        throw new Error(songsResponse.data.error || '获取歌曲列表失败')
      }

      console.log(songsResponse);
      const songsData = songsResponse.data.data;
      totalSongs.value = songsData.total;
      const songsList = songsData.songs || []
      currnetAlbum.value = songsData.album;
      // 2. 获取喜欢列表
      const userId = localStorage.getItem('userId')
      const likedResponse = await getLikedSongsById(userId)
      if (likedResponse.data.message) {
        likedSongs.value = likedResponse.data.data || []
      }
      // 3. 组装完整的歌曲信息,只是重新处理罢了
      console.log(songsList);
      songs.value = songsList.map(song => {
        return {
          ...song,
          artist: song.artist_name ? song.artist_name : '未知歌手',
          album: song.album_name ? song.album_name : '未知专辑',
          cover: song.album_cover ? song.album_cover : '/assets/default-cover.jpg',
          duration: song.duration || 0
        }
      })
    } catch (error) {
      console.error('加载数据失败:', error)
      ElMessage.error(error.message || '加载数据失败，请稍后重试')
    } finally {
      isLoading.value = false
    }
  }
  
  const handlePlaySong = (song) => {
    playerStore.setPlaylist([song])
    playerStore.play(0)
  }
  
  const likeSong = async (song) => {
    try {
      if (likedSongs.value.includes(song.id)) {
        await removeLikedSong(song.id)
        likedSongs.value = likedSongs.value.filter(id => id !== song.id)
        ElMessage.success(`已取消喜欢: ${song.name}`)
      } else {
        await addLikedSong(song.id)
        likedSongs.value.push(song.id)
        ElMessage.success(`已添加到我喜欢: ${song.name}`)
      }
    } catch (error) {
      console.error('操作失败:', error)
      ElMessage.error('操作失败，请稍后重试')
    }
  }
  
  const addToPlaylist = async (song) => {
    selectedSong.value = song
    playlistDialogVisible.value = true
    
    try {
      const response = await getMyPlaylists({
      id: parseInt(localStorage.getItem('userId')),
    })
      if (response.data.message) {
        userPlaylists.value = response.data.data.playlists
      } else {
        throw new Error(response.data.error || '获取歌单失败')
      }
    } catch (error) {
      console.error('获取歌单失败:', error)
      ElMessage.error(error.message || '获取歌单失败，请稍后重试')
    }
  }
  
  const createNewPlaylist = async () => {
    if (!newPlaylistName.value.trim()) {
      ElMessage.warning('请输入歌单名称')
      return
    }
  
    try {
      const response = await createPlaylist({
        name: newPlaylistName.value,
        description: newPlaylistDescription.value,
        isPublic: false
      })
  
      if (response.data.message) {
        userPlaylists.value.unshift({
          ...response.data.data,
          songCount: 0
        })
        selectedPlaylist.value = response.data.data.id
        newPlaylistName.value = ''
        newPlaylistDescription.value = ''
        ElMessage.success('歌单创建成功')
      } else {
        throw new Error(response.data.error || '创建歌单失败')
      }
    } catch (error) {
      console.error('创建歌单失败:', error)
      ElMessage.error(error.message || '创建歌单失败，请稍后重试')
    }
  }
  
  const confirmAddToPlaylist = async () => {
    if (!selectedPlaylist.value) {
      ElMessage.warning('请选择歌单')
      return
    }
  
    try {
      const response = await addSongToPlaylist(selectedPlaylist.value, selectedSong.value.id)
      if (response.data.message) {
        ElMessage.success('添加成功')
        playlistDialogVisible.value = false
        selectedPlaylist.value = null
      } else {
        throw new Error(response.data.error || '添加失败')
      }
    } catch (error) {
      console.error('添加失败:', error)
      ElMessage.error(error.message || '添加失败，请稍后重试')
    }
  }
  
  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }
  
  const handleSearch = () => {
    page.value = 1
    loadData()
  }
  
  const handlePageChange = (newPage) => {
    page.value = newPage
    loadData()
  }
  
  const handlePageSizeChange = (newSize) => {
    pageSize.value = newSize
    page.value = 1
    loadData()
  }
  
  const showCover = (song) => {
    selectedSong.value = song
    coverDialogVisible.value = true
  }
  
  const goToArtist = (artistId) => {
    if (artistId) {
      router.push(`/artist/${artistId}`)
    }
    else{
      ElMessage.error("歌手不存在!")
    }
  }
  
  const goToAlbum = (albumId) => {
    if (albumId) {
      router.push(`/album/${albumId}`)
    }
    else{
      ElMessage.error("专辑不存在!")
    }
  }
  const goToComment = (song) => {
    router.push(`/comment/${song.id}`)
  }
  //TODO 管理员可以对专辑页面进行增删改
//   const removeSong = async (song) => {
//     try {
//       const response = await removeSongFromPlaylist(currnetAlbum.value.id, song.id)
//       if (response.data.message) {
//         ElMessage.success('删除成功')
//         loadData()
//       } else {
//         throw new Error(response.data.error || '删除失败')
//       }
//     } catch (error) {
//       console.error('删除失败:', error)
//       ElMessage.error(error.message || '删除失败，请稍后重试')
//     }
//   }
  
  // 生命周期钩子
  onMounted(() => {
    loadData()
  })
  
  // 导出组件配置
  defineExpose({
    loadData
  })
  </script>
  
  <style scoped>
  .main-container {
    display: flex;
    gap: 24px;
    height: 100%;
    padding: 20px;
  }
  
  .playlist-aside {
    flex: 0 0 300px;
  }
  
  .playlist-info-card {
    padding: 24px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
  }
  
  .playlist-info-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
  }
  
  .playlist-cover {
    width: 200px;
    height: 200px;
    margin: 0 auto 20px;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .playlist-cover .el-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }
  
  .playlist-cover:hover .el-image {
    transform: scale(1.1);
  }
  
  .playlist-info-card h2 {
    margin: 0;
    font-size: 24px;
    color: #303133;
    text-align: center;
    transition: color 0.3s ease;
  }
  
  .playlist-info {
    margin: 16px 0;
    color: #606266;
    font-size: 14px;
    text-align: center;
  }
  
  .playlist-info span {
    margin: 0 8px;
  }
  
  .playlist-description {
    color: #909399;
    font-size: 14px;
    line-height: 1.6;
    margin: 16px 0 0;
    padding-top: 16px;
    border-top: 1px solid #EBEEF5;
  }
  
  .playlist-container {
    flex: 1;
    background-color: #fff;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  }
  
  .filter-section {
    display: flex;
    gap: 16px;
    margin-bottom: 24px;
  }
  
  .search-input {
    width: 300px;
    transition: all 0.3s ease;
  }
  
  .search-input:focus-within {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .song-list {
    border-radius: 8px;
    overflow: hidden;
  }
  
  .song-header,
  .song-item {
    display: grid;
    grid-template-columns: 60px 3fr 120px 2fr 2fr 100px;
    align-items: center;
    padding: 12px 16px;
    gap: 16px;
  }
  
  .song-header {
    background-color: #F5F7FA;
    color: #909399;
    font-size: 14px;
    font-weight: 500;
  }
  
  .song-item {
    border-bottom: 1px solid #EBEEF5;
    transition: background-color 0.3s;
  }
  
  .song-item:hover {
    background-color: #F5F7FA;
  }
  
  .song-cover {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    overflow: hidden;
    margin-right: 12px;
  }
  
  .col-title {
    display: flex;
    align-items: center;
  }
  
  .song-name {
    font-weight: 500;
    color: #303133;
  }
  
  .play-icon {
    cursor: pointer;
    color: var(--el-color-primary);
    transition: transform 0.3s ease;
  }
  
  .play-icon:hover {
    transform: scale(1.2);
  }
  
  .col-actions .el-button {
    padding: 4px 0;
  }
  
  .col-actions .el-button:hover {
    color: #F56C6C;
  }
  
  .action-buttons {
    display: flex;
    gap: 16px;
    justify-content: flex-start;
    align-items: center;
  }
  
  .action-buttons .el-icon {
    font-size: 16px;
    cursor: pointer;
    color: var(--el-text-color-secondary);
    transition: all 0.3s ease;
  }
  
  .action-buttons .el-icon:hover {
    color: var(--el-color-primary);
    transform: scale(1.2);
  }
  
  .action-buttons .liked {
    color: #ff4757;
    animation: heartBeat 0.3s ease-in-out;
  }
  
  @keyframes heartBeat {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1.1); }
  }
  
  
  /* 添加滚动条样式 */
  .playlist-container::-webkit-scrollbar {
    width: 6px;
  }
  
  .playlist-container::-webkit-scrollbar-thumb {
    background-color: #dcdfe6;
    border-radius: 3px;
  }
  
  .playlist-container::-webkit-scrollbar-track {
    background-color: #f5f7fa;
  }
  
  .playlist-dialog-content {
    padding: 20px 0;
  }
  
  .existing-playlists {
    max-height: 400px;
    overflow: hidden;
    margin: 0 -20px; /* 扩展到对话框边缘 */
  }
  
  .playlist-list {
    display: flex;
    flex-direction: column;
  }
  
  .playlist-item {
    padding: 16px 20px;
    border-bottom: 1px solid var(--el-border-color-lighter);
    cursor: pointer;
    transition: all 0.3s;
    position: relative;
  }
  
  .playlist-item:hover {
    background-color: var(--el-fill-color-light);
  }
  
  .playlist-item-selected {
    background-color: var(--el-color-primary-light-9);
  }
  
  .playlist-item-selected::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background-color: var(--el-color-primary);
  }
  
  .playlist-info-row {
    display: flex;
    gap: 16px;
    width: 100%;
  }
  
  .playlist-cover-img {
    width: 64px;
    height: 64px;
    border-radius: 6px;
    object-fit: cover;
    flex-shrink: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s;
  }
  
  .playlist-item:hover .playlist-cover-img {
    transform: scale(1.05);
  }
  
  /* 自定义滚动条样式 */
  .existing-playlists :deep(.el-scrollbar__wrap) {
    overflow-x: hidden;
  }
  
  .existing-playlists :deep(.el-scrollbar__bar.is-vertical) {
    width: 6px;
  }
  
  .existing-playlists :deep(.el-scrollbar__thumb) {
    background-color: var(--el-border-color);
    border-radius: 3px;
  }
  
  .existing-playlists :deep(.el-scrollbar__thumb:hover) {
    background-color: var(--el-border-color-darker);
  }
  
  /* 选中状态的额外样式 */
  .playlist-item-selected .playlist-name {
    color: var(--el-color-primary);
    font-weight: 600;
  }
  
  .playlist-item-selected .playlist-description,
  .playlist-item-selected .playlist-count {
    color: var(--el-color-primary-light-3);
  }
  
  /* 添加动画效果 */
  .playlist-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .playlist-item:active {
    transform: scale(0.98);
  }
  
  .create-playlist {
    margin-top: 20px;
    padding: 0 20px;
  }
  
  .create-playlist-form {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 16px;
  }
  
  .mt-3 {
    margin-top: 12px;
  }
  
  /* 自定义滚动条样式 */
  :deep(.el-scrollbar__wrap) {
    overflow-x: hidden !important;
  }
  
  /* 响应式设计 */
  @media screen and (max-width: 768px) {
    .playlist-item {
      padding: 12px 16px;
    }
  
    .playlist-cover-img {
      width: 48px;
      height: 48px;
    }
  }
  
  /* 添加跳转提示动画 */
  .col-artist,
  .col-album {
    cursor: pointer;
    position: relative;
    transition: color 0.3s ease;
  }
  
  .col-artist:hover,
  .col-album:hover {
    color: var(--el-color-primary);
  }
  
  .col-artist::after,
  .col-album::after {
    content: '→';
    position: absolute;
    right: -20px;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.3s ease;
  }
  
  .col-artist:hover::after,
  .col-album:hover::after {
    opacity: 1;
    transform: translateX(0);
  }
  
  /* 添加点击反馈动画 */
  .col-artist:active,
  .col-album:active {
    transform: scale(0.98);
  }
  </style>
    


================================================
FILE: pages/Artists.vue
================================================
<template>
    <CommonLayout :page-name="currentName">
      <template #main>
        <div class="main-container">
          <!-- 左侧歌单信息 -->
          <div class="playlist-aside">
            <div class="playlist-info-card">
              <div class="playlist-cover">
                <el-image 
                  :src="currentArtist?.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <h2>{{ currentArtist?.name || '我的歌单' }}</h2>
              <div class="playlist-info">
                <span>{{ songs.length }}首歌曲</span>
                <span>{{ currentArtist?.album_ids.length }}张专辑</span>
              </div>
              <p class="playlist-description">{{ currentArtist?.description || '暂无描述' }}</p>
            </div>
          </div>
  
          <!-- 右侧歌曲列表 -->
          <div class="playlist-container" v-loading="isLoading">
            <!-- 搜索和筛选区域 -->
            <div class="filter-section">
              <el-input
                v-model="searchQuery"
                placeholder="搜索歌曲、歌手、专辑"
                class="search-input"
                :prefix-icon="Search"
                clearable
                @clear="handleSearch"
                @keyup.enter="handleSearch"
              />
              <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
                <el-option label="最新" value="latest" />
                <el-option label="最热" value="popular" />
              </el-select>
            </div>
  
            <!-- 歌曲列表 -->
            <div class="song-list">
              <div class="song-header">
                <div class="col-index">#</div>
                <div class="col-title">标题</div>
                <div class="col-duration">时长</div>
                <div class="col-artist">歌手</div>
                <div class="col-album">专辑</div>
                
              </div>
  
              <div 
                v-for="(song, index) in songs" 
                :key="song.id"
                class="song-item"
                @mouseenter="hoveredSong = song.id"
                @mouseleave="hoveredSong = null"
              >
                <div class="col-index">
                  <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
                  <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
                </div>
                <div class="col-title">
                  <div class="song-cover">
                    <el-image 
                    :src="song?.cover || '/assets/default-cover.jpg'"
                    fit="cover"
                    />
                  </div>
                  <span class="song-name">{{ song.name }}</span>
                </div>
                <div class="col-duration">
                  <template v-if="hoveredSong !== song.id">
                    {{ formatDuration(song.duration) }}
                  </template>
                  <div v-else class="action-buttons">
                    <el-tooltip content="喜欢" placement="top">
                      <el-icon 
                        @click="likeSong(song)" 
                        :class="{ 'liked': likedSongs.includes(song.id) }" 
                      >
                        <Star />
                      </el-icon>
                    </el-tooltip>
                    <el-tooltip content="添加到播放列表" placement="top">
                      <el-icon @click="addToPlaylist(song)"><Plus /></el-icon>
                    </el-tooltip>
                    <el-tooltip content="评论" placement="top">
                      <el-icon @click="goToComment(song)"><ChatDotRound /></el-icon>
                    </el-tooltip>
                    <el-tooltip content="下载" placement="top">
                      <el-icon @click="downloadSong(song)"><Download /></el-icon>
                    </el-tooltip>
                  </div>
                </div>
                <div class="col-artist" @click="goToArtist(song.author_id)">{{ song.artist }}</div>
                <div class="col-album" @click="goToAlbum(song.album_id)">{{ song.album }}</div>
              </div>
            </div>
          </div>
        </div>
  
         <!-- 添加到播放列表弹窗 -->
        <el-dialog
          v-model="playlistDialogVisible"
          title="添加到歌单"
          width="400px"
          @close="selectedPlaylist = null"
        >
          <div class="playlist-dialog-content">
            <!-- 现有歌单列表，设置为可见之后弹出 -->
            <div class="existing-playlists">
              <el-scrollbar height="400px">
                <div class="playlist-list">
                  <div 
                    v-for="playlist in userPlaylists" 
                    :key="playlist.id" 
                    class="playlist-item"
                    :class="{ 'playlist-item-selected': selectedPlaylist === playlist.id }"
                    @click="selectedPlaylist = playlist.id"
                  >
                    <div class="playlist-info-row">
                      <el-image 
                        :src="playlist.cover || '/assets/default-cover.jpg'" 
                        class="playlist-cover-img"
                      />
                      <div class="playlist-details">
                        <div class="playlist-name">{{ playlist.name }}</div>
                        <div class="playlist-description">{{ playlist.description || '暂无描述' }}</div>
                        <div class="playlist-count">{{ playlist.song_count || 0 }}首歌曲</div>
                      </div>
                    </div>
                  </div>
                </div>
              </el-scrollbar>
            </div>
  
            <!-- 创建新歌单 -->
            <div class="create-playlist">
              <el-divider>创建新歌单</el-divider>
              <div class="create-playlist-form">
                <el-input
                  v-model="newPlaylistName"
                  placeholder="请输入歌单名称"
                  clearable
                />
                <el-input
                  v-model="newPlaylistDescription"
                  type="textarea"
                  :rows="2"
                  placeholder="添加歌单描述（选填）"
                  class="mt-3"
                />
                <el-button type="primary" @click="createNewPlaylist" class="mt-3">
                  创建
                </el-button>
              </div>
            </div>
          </div>
          <template #footer>
            <span class="dialog-footer">
              <el-button @click="playlistDialogVisible = false">取消</el-button>
              <el-button type="primary" @click="confirmAddToPlaylist">
                确定
              </el-button>
            </span>
          </template>
        </el-dialog>
      
      </template>
    </CommonLayout>
  </template>
  
  <script setup>
  import { ref, onMounted } from 'vue'
  import { useRouter } from 'vue-router'
  import { ElMessage } from 'element-plus'
  import { 
    Search, 
    VideoPlay, 
    Star, 
    Plus, 
    FolderAdd, 
    ChatDotRound, 
    Download 
  } from '@element-plus/icons-vue'
  import { 
    getAlbums,
    getAlbumById,
    getArtistById,
    removeSongFromPlaylist,
    getLikedSongsById, 
    addLikedSong, 
    removeLikedSong,
    getMyPlaylists, 
    createPlaylist, 
    addSongToPlaylist 
  } from '@/api/axiosFile'
  import { usePlayerStore } from '@/stores/player'
  import CommonLayout from '@/layouts/CommonLayout.vue'
  
  const router = useRouter()
  const playerStore = usePlayerStore()
  
  // 基础数据
  const currentName = ref('歌手详情')
  const songs = ref([])
  const page = ref(1)
  const pageSize = ref(10)
  const totalSongs = ref(0)
  const isLoading = ref(false)
  const searchQuery = ref('')
  const sortBy = ref('latest')
  const hoveredSong = ref(null)
  const likedSongs = ref([])
  const coverDialogVisible = ref(false)
  const playlistDialogVisible = ref(false)
  const selectedSong = ref(null)
  const selectedPlaylist = ref(null)
  const newPlaylistName = ref('')
  const newPlaylistDescription = ref('')
  const userPlaylists = ref([])
  const currentArtist = ref(null)
  // 方法定义
  const loadData = async () => {
    isLoading.value = true
    try {
      // 1. 获取歌曲列表
      //注意这里的route文件获取当前路径id的方式
      const songsResponse = await getArtistById(router.currentRoute.value.params.id,{
        page: page.value,
        pageSize: pageSize.value,
        search: searchQuery.value,
        sortBy: sortBy.value
      });
      //此处已经在后端处理了多表查询了，所以这里不需要再处理
      if (!songsResponse.data.message) {
        throw new Error(songsResponse.data.error || '获取歌曲列表失败')
      }
      const songsData = songsResponse.data.data;
      totalSongs.value = songsData.total;
      const songsList = songsData.songs || []
      currentArtist.value = songsData.artist;
      console.log(currentArtist.value);
      // 2. 获取喜欢列表
      const userId = localStorage.getItem('userId')
      const likedResponse = await getLikedSongsById(userId)
      if (likedResponse.data.message) {
        likedSongs.value = likedResponse.data.data || []
      }
      // 3. 组装完整的歌曲信息,只是重新处理罢了
      songs.value = songsList.map(song => {
        return {
          ...song,
          artist: song.artist_name ? song.artist_name : '未知歌手',
          album: song.album_name ? song.album_name : '未知专辑',
          cover: song.album_cover ? song.album_cover : '/assets/default-cover.jpg',
          duration: song.duration || 0
        }
      })
    } catch (error) {
      console.error('加载数据失败:', error)
      ElMessage.error(error.message || '加载数据失败，请稍后重试')
    } finally {
      isLoading.value = false
    }
  }
  
  const handlePlaySong = (song) => {
    playerStore.setPlaylist([song])
    playerStore.play(0)
  }
  
  const likeSong = async (song) => {
    try {
      if (likedSongs.value.includes(song.id)) {
        await removeLikedSong(song.id)
        likedSongs.value = likedSongs.value.filter(id => id !== song.id)
        ElMessage.success(`已取消喜欢: ${song.name}`)
      } else {
        await addLikedSong(song.id)
        likedSongs.value.push(song.id)
        ElMessage.success(`已添加到我喜欢: ${song.name}`)
      }
    } catch (error) {
      console.error('操作失败:', error)
      ElMessage.error('操作失败，请稍后重试')
    }
  }
  
  const addToPlaylist = async (song) => {
    selectedSong.value = song
    playlistDialogVisible.value = true
    
    try {
      const response = await getMyPlaylists({
      id: parseInt(localStorage.getItem('userId')),
    })
      if (response.data.message) {
        userPlaylists.value = response.data.data.playlists
      } else {
        throw new Error(response.data.error || '获取歌单失败')
      }
    } catch (error) {
      console.error('获取歌单失败:', error)
      ElMessage.error(error.message || '获取歌单失败，请稍后重试')
    }
  }
  
  const createNewPlaylist = async () => {
    if (!newPlaylistName.value.trim()) {
      ElMessage.warning('请输入歌单名称')
      return
    }
  
    try {
      const response = await createPlaylist({
        name: newPlaylistName.value,
        description: newPlaylistDescription.value,
        isPublic: false
      })
  
      if (response.data.message) {
        userPlaylists.value.unshift({
          ...response.data.data,
          songCount: 0
        })
        selectedPlaylist.value = response.data.data.id
        newPlaylistName.value = ''
        newPlaylistDescription.value = ''
        ElMessage.success('歌单创建成功')
      } else {
        throw new Error(response.data.error || '创建歌单失败')
      }
    } catch (error) {
      console.error('创建歌单失败:', error)
      ElMessage.error(error.message || '创建歌单失败，请稍后重试')
    }
  }
  
  const confirmAddToPlaylist = async () => {
    if (!selectedPlaylist.value) {
      ElMessage.warning('请选择歌单')
      return
    }
  
    try {
      const response = await addSongToPlaylist(selectedPlaylist.value, selectedSong.value.id)
      if (response.data.message) {
        ElMessage.success('添加成功')
        playlistDialogVisible.value = false
        selectedPlaylist.value = null
      } else {
        throw new Error(response.data.error || '添加失败')
      }
    } catch (error) {
      console.error('添加失败:', error)
      ElMessage.error(error.message || '添加失败，请稍后重试')
    }
  }
  
  const formatDuration = (seconds) => {
    const minutes = Math.floor(seconds / 60)
    const remainingSeconds = seconds % 60
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }
  
  const handleSearch = () => {
    page.value = 1
    loadData()
  }
  
  const handlePageChange = (newPage) => {
    page.value = newPage
    loadData()
  }
  
  const handlePageSizeChange = (newSize) => {
    pageSize.value = newSize
    page.value = 1
    loadData()
  }
  
  const showCover = (song) => {
    selectedSong.value = song
    coverDialogVisible.value = true
  }
  
  const goToArtist = (artistId) => {
    if (artistId) {
      router.push(`/artist/${artistId}`)
    }
    else{
      ElMessage.error("歌手不存在!")
    }
  }
  
  const goToAlbum = (albumId) => {
    if (albumId) {
      router.push(`/album/${albumId}`)
    }
    else{
      ElMessage.error("专辑不存在!")
    }
  }
  const goToComment = (song) => {
    router.push(`/comment/${song.id}`)
  }
  //TODO 管理员可以对专辑页面进行增删改
//   const removeSong = async (song) => {
//     try {
//       const response = await removeSongFromPlaylist(currentArtist.value.id, song.id)
//       if (response.data.message) {
//         ElMessage.success('删除成功')
//         loadData()
//       } else {
//         throw new Error(response.data.error || '删除失败')
//       }
//     } catch (error) {
//       console.error('删除失败:', error)
//       ElMessage.error(error.message || '删除失败，请稍后重试')
//     }
//   }
  
  // 生命周期钩子
  onMounted(() => {
    loadData()
  })
  
  // 导出组件配置
  defineExpose({
    loadData
  })
  </script>
  
  <style scoped>
  .main-container {
    display: flex;
    gap: 24px;
    height: 100%;
    padding: 20px;
  }
  
  .playlist-aside {
    flex: 0 0 300px;
  }
  
  .playlist-info-card {
    padding: 24px;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
    transition: transform 0.3s ease;
  }
  
  .playlist-info-card:hover {
    transform: translateY(-4px);
  }
  
  .playlist-cover {
    width: 200px;
    height: 200px;
    margin: 0 auto 20px;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .playlist-cover .el-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }
  
  .playlist-cover:hover .el-image {
    transform: scale(1.1);
  }
  
  .playlist-info-card h2 {
    margin: 0;
    font-size: 24px;
    color: #303133;
    text-align: center;
  }
  
  .playlist-info {
    margin: 16px 0;
    color: #606266;
    font-size: 14px;
    text-align: center;
  }
  
  .playlist-info span {
    margin: 0 8px;
  }
  
  .playlist-description {
    color: #909399;
    font-size: 14px;
    line-height: 1.6;
    margin: 16px 0 0;
    padding-top: 16px;
    border-top: 1px solid #EBEEF5;
  }
  
  .playlist-container {
    flex: 1;
    background-color: #fff;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  }
  
  .filter-section {
    display: flex;
    gap: 16px;
    margin-bottom: 24px;
  }
  
  .search-input {
    width: 300px;
    transition: box-shadow 0.3s ease;
  }
  
  .search-input:focus-within {
    box-shadow: 0 0 8px rgba(var(--el-color-primary-rgb), 0.2);
  }
  
  .song-list {
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
  }
  
  .song-header,
  .song-item {
    display: grid;
    grid-template-columns: 60px 3fr 120px 2fr 2fr 100px;
    align-items: center;
    padding: 12px 16px;
    gap: 16px;
  }
  
  .song-header {
    background-color: var(--el-fill-color-light);
    font-weight: 500;
  }
  
  .song-item {
    border-bottom: 1px solid #EBEEF5;
    transition: background-color 0.3s ease;
  }
  
  .song-item:hover {
    background-color: var(--el-fill-color-light);
  }
  
  .song-cover {
    width: 40px;
    height: 40px;
    border-radius: 4px;
    overflow: hidden;
    margin-right: 12px;
  }
  
  .col-title {
    display: flex;
    align-items: center;
  }
  
  .song-name {
    font-weight: 500;
    color: #303133;
  }
  
  .play-icon {
    cursor: pointer;
    color: var(--el-color-primary);
    transition: transform 0.3s ease;
  }
  
  .play-icon:hover {
    transform: scale(1.2);
  }
  
  .col-actions .el-button {
    padding: 4px 0;
  }
  
  .col-actions .el-button:hover {
    color: #F56C6C;
  }
  
  .action-buttons {
    display: flex;
    gap: 16px;
    opacity: 0;
    transform: translateY(4px);
    transition: all 0.3s ease;
  }
  
  .song-item:hover .action-buttons {
    opacity: 1;
    transform: translateY(0);
  }
  
  .action-buttons .el-icon {
    font-size: 16px;
    cursor: pointer;
    color: var(--el-text-color-secondary);
    transition: all 0.3s ease;
  }
  
  .action-buttons .el-icon:hover {
    color: var(--el-color-primary);
    transform: scale(1.2);
  }
  
  .action-buttons .liked {
    color: #ff4757;
    animation: heartBeat 0.3s ease-in-out;
  }
  
  @keyframes heartBeat {
    0% { transform: scale(1); }
    50% { transform: scale(1.3); }
    100% { transform: scale(1.1); }
  }
  
  /* 添加滚动条样式 */
  .playlist-container::-webkit-scrollbar {
    width: 6px;
  }
  
  .playlist-container::-webkit-scrollbar-thumb {
    background-color: #dcdfe6;
    border-radius: 3px;
  }
  
  .playlist-container::-webkit-scrollbar-track {
    background-color: #f5f7fa;
  }
  
  .playlist-dialog-content {
    padding: 20px 0;
  }
  
  .existing-playlists {
    max-height: 400px;
    overflow: hidden;
    margin: 0 -20px; /* 扩展到对话框边缘 */
  }
  
  .playlist-list {
    display: flex;
    flex-direction: column;
  }
  
  .playlist-item {
    padding: 16px 20px;
    border-bottom: 1px solid var(--el-border-color-lighter);
    cursor: pointer;
    transition: all 0.3s;
    position: relative;
  }
  
  .playlist-item:hover {
    background-color: var(--el-fill-color-light);
  }
  
  .playlist-item-selected {
    background-color: var(--el-color-primary-light-9);
  }
  
  .playlist-item-selected::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 4px;
    background-color: var(--el-color-primary);
  }
  
  .playlist-info-row {
    display: flex;
    gap: 16px;
    width: 100%;
  }
  
  .playlist-cover-img {
    width: 64px;
    height: 64px;
    border-radius: 6px;
    object-fit: cover;
    flex-shrink: 0;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s;
  }
  
  .playlist-item:hover .playlist-cover-img {
    transform: scale(1.05);
  }
  
  /* 自定义滚动条样式 */
  .existing-playlists :deep(.el-scrollbar__wrap) {
    overflow-x: hidden;
  }
  
  .existing-playlists :deep(.el-scrollbar__bar.is-vertical) {
    width: 6px;
  }
  
  .existing-playlists :deep(.el-scrollbar__thumb) {
    background-color: var(--el-border-color);
    border-radius: 3px;
  }
  
  .existing-playlists :deep(.el-scrollbar__thumb:hover) {
    background-color: var(--el-border-color-darker);
  }
  
  /* 选中状态的额外样式 */
  .playlist-item-selected .playlist-name {
    color: var(--el-color-primary);
    font-weight: 600;
  }
  
  .playlist-item-selected .playlist-description,
  .playlist-item-selected .playlist-count {
    color: var(--el-color-primary-light-3);
  }
  
  /* 添加动画效果 */
  .playlist-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .playlist-item:active {
    transform: scale(0.98);
  }
  
  .create-playlist {
    margin-top: 20px;
    padding: 0 20px;
  }
  
  .create-playlist-form {
    display: flex;
    flex-direction: column;
    gap: 12px;
    margin-top: 16px;
  }
  
  .mt-3 {
    margin-top: 12px;
  }
  
  /* 自定义滚动条样式 */
  :deep(.el-scrollbar__wrap) {
    overflow-x: hidden !important;
  }
  
  /* 响应式设计 */
  @media screen and (max-width: 768px) {
    .playlist-item {
      padding: 12px 16px;
    }
  
    .playlist-cover-img {
      width: 48px;
      height: 48px;
    }
  }
  
  .col-artist,
  .col-album {
    cursor: pointer;
    transition: color 0.3s ease;
  }
  
  .col-artist:hover,
  .col-album:hover {
    color: var(--el-color-primary);
  }
  
  /* 优化分页器 */
  .pagination {
    margin-top: 20px;
    padding: 16px 0;
    background-color: var(--el-bg-color);
    border-radius: 8px;
  }
  </style>
    


================================================
FILE: pages/CommentOfSong.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="main-container">
        <!-- 左侧歌曲信息 -->
        <div class="song-aside">
          <div class="song-info-card">
            <div class="song-cover">
              <el-image 
                :src="songInfo?.cover || '/assets/default-cover.jpg'"
                fit="cover"
              />
            </div>
            <h2>{{ songInfo?.name }}</h2>
            <div class="song-info">
              <span>歌手：{{ songInfo?.artist_name }}</span>
              <span>专辑：{{ songInfo?.album_name }}</span>
            </div>
          </div>
        </div>

        <!-- 右侧评论区 -->
        <div class="comment-container">
          <!-- 统一的评论输入框 -->
          <el-card class="comment-input">
            <div class="input-area">
              <!-- 添加回复对象提示 -->
              <div v-if="activeReplyTarget" class="reply-target">
                <el-tag size="small" class="reply-tag" type="info" closable @close="cancelReply">
                  <el-icon><ChatDotRound /></el-icon>
                  回复 @{{ activeReplyTarget.username }}
                </el-tag>
              </div>
              <el-input
                v-model="newComment"
                type="textarea"
                :rows="3"
                :placeholder="activeReplyTarget ? `回复 @${activeReplyTarget.username}...` : '发表评论...' "
              />
              <div class="comment-actions">
                <el-button v-if="activeReplyTarget" @click="cancelReply">取消回复</el-button>
                <el-button 
                  type="primary" 
                  @click="activeReplyTarget ? submitReply() : submitComment()" 
                  :disabled="!newComment.trim()"
                >
                  {{ activeReplyTarget ? '回复' : '发表评论' }}
                </el-button>
              </div>
            </div>
          </el-card>

          <!-- 评论列表 -->
          <el-card class="comment-list" v-loading="isLoading">
            <div v-for="comment in comments" :key="comment.id" class="comment-item">
              <!-- 主评论 -->
              <div class="comment-main">
                <el-avatar 
                  :src="comment.avatar" 
                  class="clickable-avatar"
                  @click="goToUserProfile(comment.user_id)"
                />
                <div class="comment-content">
                  <div class="comment-header">
                    <span class="username clickable" @click="goToUserProfile(comment.user_id)">
                      {{ comment.name || comment.username }}
                    </span>
                    <span class="time">{{ formatTime(comment.created_at) }}</span>
                  </div>
                  <p class="text">{{ comment.text }}</p>
                  <div class="comment-actions">
                    <el-button type="text" @click="handleLikeComment(comment)">
                      <el-icon><ArrowUpBold /></el-icon>
                      {{ comment.like_count || 0 }}
                    </el-button>
                    <el-button type="text" @click="showReplyInput(comment)">
                      <el-icon><ChatLineRound /></el-icon>
                      回复
                    </el-button>
                    <el-button 
                      v-if="comment.user_id === currentUser.id" 
                      type="text" 
                      @click="deleteComment(comment.id)"
                    >
                      删除
                    </el-button>
                  </div>

                  <!-- 嵌套的回复列表 -->
                  <div v-if="comment.replies && comment.replies.length > 0" class="replies">
                    <div v-for="reply in comment.replies" :key="reply.id" class="reply-item">
                      <el-avatar 
                        :size="30" 
                        :src="reply.avatar"
                        class="clickable-avatar"
                        @click="goToUserProfile(reply.user_id)"
                      />
                      <div class="reply-content">
                        <div class="reply-header">
                          <span class="username clickable" @click="goToUserProfile(reply.user_id)">
                            {{ reply.name || reply.username }}
                          </span>
                          <span class="time">{{ formatTime(reply.created_at) }}</span>
                        </div>
                        <p class="text">
                          <el-tag size="small" class="reply-tag" type="info">
                            回复 @{{ reply.reply_to_name || reply.reply_to_username || comment.name || comment.username }}
                          </el-tag>
                          {{ reply.text }}
                        </p>
                        <div class="reply-actions">
                          <el-button type="text" @click="handleLikeComment(reply)">
                            <el-icon><ArrowUpBold /></el-icon>
                            {{ reply.like_count || 0 }}
                          </el-button>
                          <el-button type="text" @click="showReplyInput(comment, reply)">
                            <el-icon><ChatLineRound /></el-icon>
                            回复
                          </el-button>
                          <el-button 
                            v-if="reply.user_id === currentUser.id" 
                            type="text" 
                            @click="handleDeleteComment(reply.id)"
                          >
                            删除
                          </el-button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- 分页 -->
            <div class="pagination">
              <el-pagination
                v-model:current-page="currentPage"
                v-model:page-size="pageSize"
                :total="total"
                :page-sizes="[5, 10, 20, 50]"
                layout="total, sizes, prev, pager, next"
                @size-change="handleSizeChange"
                @current-change="handleCurrentChange"
              />
            </div>
          </el-card>
        </div>
      </div>
    </template>
  </CommonLayout>
</template>
<script setup>
import { ref, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { ArrowUpBold, ChatLineRound, ChatDotRound } from '@element-plus/icons-vue'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { 
getComments, 
getCommentReplies, 
createComment, 
likeComment, 
deleteComment,
getSongById
} from '@/api/axiosFile'
import { useUserStore } from '@/stores/user'

const currentName = ref('评论详情')
const route = useRoute()
const router = useRouter()
const userStore = useUserStore()
const currentUser = userStore.userInfo
const isLoading = ref(false)

// 状态变量
const songInfo = ref(null)
const comments = ref([])
const total = ref(0)
const currentPage = ref(1)
const pageSize = ref(10)
const newComment = ref('')
const activeReplyTarget = ref(null)

// 获取歌曲信息
const fetchSongInfo = async () => {
try {
  const resp = await getSongById(route.params.id)
  if (resp.data.message) {
    songInfo.value = resp.data.data
  }
} catch (error) {
  console.error('获取歌曲信息失败:', error)
  ElMessage.error('获取歌曲信息失败')
}
}

// 获取评论列表
const fetchComments = async () => {
try {
  isLoading.value = true
  const params = {
    page: currentPage.value,
    pageSize: pageSize.value
  }
  const resp = await getComments(route.params.id, params)
  if (resp.data.message) {
    comments.value = resp.data.data.comments
    total.value = resp.data.data.total

    // 获取每个评论的回复
    for (const comment of comments.value) {
      const repliesResp = await getCommentReplies(comment.id)
      if (repliesResp.data.message) {
        comment.replies = repliesResp.data.data.data.replies || []
        console.log('评论回复:', comment.replies)
      }
    }
    console.log('所有评论:', comments.value)
  }
} catch (error) {
  console.error('获取评论失败:', error)
  ElMessage.error('获取评论失败')
} finally {
  isLoading.value = false
}
}

// 提交评论
const submitComment = async () => {
try {
  const resp = await createComment({
    songId: route.params.id,
    text: newComment.value
  })
  if (resp.data.message) {
    ElMessage.success('评论成功')
    newComment.value = ''
    await fetchComments()
  }
} catch (error) {
  console.error('发表评论失败:', error)
  ElMessage.error('发表评论失败')
}
}

// 提交回复
const submitReply = async () => {
if (!activeReplyTarget.value) return

try {
  const data = {
    songId: route.params.id,
    text: newComment.value,
    parentId: activeReplyTarget.value.parentId,
    replyToUserId: activeReplyTarget.value.id
  }
  const resp = await createComment(data)
  if (resp.data.message) {
    ElMessage.success('回复成功')
    newComment.value = ''
    activeReplyTarget.value = null
    await fetchComments()
  }
} catch (error) {
  console.error('回复失败:', error)
  ElMessage.error('回复失败')
}
}

// 显示回复输入框
const showReplyInput = (comment, replyTo = null) => {
activeReplyTarget.value = {
  id: replyTo ? replyTo.user_id : comment.user_id,
  username: replyTo ? replyTo.username : comment.username,
  name: replyTo ? replyTo.name : comment.name,
  parentId: comment.id
}
newComment.value = ''
}

// 取消回复
const cancelReply = () => {
activeReplyTarget.value = null
newComment.value = ''
}

// 处理点赞
const handleLikeComment = async (comment) => {
try {
  const resp = await likeComment(comment.id)
  if (resp.data.message) {
    ElMessage.success('点赞成功')
    await fetchComments()
  }
} catch (error) {
  console.error('点赞失败:', error)
  ElMessage.error('点赞失败')
}
}

// 删除评论
const handleDeleteComment = async (commentId) => {
try {
  const resp = await deleteComment(commentId)
  if (resp.data.message) {
    ElMessage.success('删除成功')
    await fetchComments()
  }
} catch (error) {
  console.error('删除失败:', error)
  ElMessage.error('删除失败')
}
}

// 格式化时间
const formatTime = (timestamp) => {
return new Date(timestamp).toLocaleString()
}

// 分页改变
const handleSizeChange = (size) => {
pageSize.value = size
fetchComments()
}

const handleCurrentChange = (page) => {
currentPage.value = page
fetchComments()
}

// 跳转到用户主页
const goToUserProfile = (userId) => {
  if (userId) {
    router.push(`/profile/${userId}`)
  }
}

// 页面加载时获取数据
onMounted(() => {
fetchSongInfo()
fetchComments()
})

</script>


<style scoped>
.main-container {
display: flex;
gap: 24px;
height: 100%;
padding: 20px;
}

.song-aside {
flex: 0 0 300px;
}

.song-info-card {
padding: 24px;
background-color: #fff;
border-radius: 12px;
box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
}

.song-cover {
width: 200px;
height: 200px;
margin: 0 auto 20px;
border-radius: 8px;
overflow: hidden;
box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.song-cover .el-image {
width: 100%;
height: 100%;
object-fit: cover;
}

.song-info-card h2 {
margin: 0;
font-size: 24px;
color: #303133;
text-align: center;
}

.song-info {
margin: 16px 0;
color: #606266;
font-size: 14px;
text-align: center;
display: flex;
flex-direction: column;
gap: 8px;
}

.comment-container {
flex: 1;
display: flex;
flex-direction: column;
gap: 20px;
overflow: hidden;
}

.comment-input {
position: sticky;
top: 20px;
z-index: 10;
margin-bottom: 20px;
background: var(--el-bg-color);
border-radius: 8px;
box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
}

.input-area {
display: flex;
flex-direction: column;
gap: 12px;
}

.reply-target {
display: flex;
align-items: center;
gap: 8px;
}

.reply-tag {
display: inline-flex;
align-items: center;
gap: 4px;
background-color: var(--el-color-info-light-9);
border-color: var(--el-color-info-light-8);
color: var(--el-color-info-dark-2);
}

.comment-actions {
display: flex;
justify-content: flex-end;
gap: 12px;
margin-top: 8px;
}

.comment-list {
flex: 1;
overflow-y: auto;
}

.comment-item {
padding: 20px 0;
border-bottom: 1px solid #EBEEF5;
}

.comment-main {
display: flex;
gap: 15px;
}

.comment-content {
flex: 1;
}

.comment-header {
display: flex;
justify-content: space-between;
margin-bottom: 8px;
}

.username {
font-weight: bold;
color: #303133;
}

.time {
color: #909399;
font-size: 0.9em;
}

.comment-actions {
margin-top: 8px;
display: flex;
gap: 16px;
}

.reply-input.nested {
margin: 8px 0 8px 30px;
padding: 12px;
background: var(--el-color-primary-light-9);
border-radius: 4px;
}

.replies {
margin: 12px 0 0 40px;
padding: 12px;
background: var(--el-fill-color-light);
border-radius: 8px;
}

.reply-item {
display: flex;
gap: 12px;
padding: 12px;
margin-bottom: 8px;
background: var(--el-bg-color);
border-radius: 8px;
box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
}

.reply-item:last-child {
margin-bottom: 0;
}

.reply-content {
flex: 1;
}

.reply-header {
display: flex;
justify-content: space-between;
align-items: center;
margin-bottom: 4px;
}

.reply-tag {
margin-right: 8px;
font-size: 12px;
display: inline-flex;
align-items: center;
gap: 4px;
}

.reply-actions {
margin-top: 8px;
display: flex;
gap: 16px;
}

.clickable-avatar {
  cursor: pointer;
  transition: transform 0.2s;
}

.clickable-avatar:hover {
  transform: scale(1.05);
}

.username.clickable {
  cursor: pointer;
  color: var(--el-color-primary);
  transition: color 0.2s;
}

.username.clickable:hover {
  color: var(--el-color-primary-light-3);
  text-decoration: underline;
}
</style> 


================================================
FILE: pages/Login.vue
================================================
<template>
  <div class="login-container">
    <div class="login-wrapper">
      <!-- 左侧装饰区域 -->
      <div class="login-decoration">
        <div class="decoration-content">
          <h1>音乐，让生活更美好</h1>
          <p>享受无限音乐，尽在于此</p>
        </div>
      </div>

      <!-- 右侧登录表单 -->
      <div class="login-form-container">
        <el-card class="login-card" :body-style="{ padding: '40px' }">
          <div class="login-header">
            <h2>欢迎回来</h2>
            <p class="subtitle">请登录您的账号</p>
          </div>

          <el-form 
            :model="loginForm" 
            :rules="rules"
            ref="loginFormRef"
            class="login-form"
          >
            <el-form-item prop="username">
              <el-input
                v-model="loginForm.username"
                placeholder="请输入用户名"
                :prefix-icon="User"
                size="large"
                @keyup.enter="handleLogin"
              />
            </el-form-item>
            
            <el-form-item prop="password">
              <el-input
                v-model="loginForm.password"
                type="password"
                placeholder="请输入密码"
                :prefix-icon="Lock"
                size="large"
                show-password
                @keyup.enter="handleLogin"
              />
            </el-form-item>

            <div class="login-options">
              <el-checkbox v-model="rememberMe">
                <span class="remember-text">记住我</span>
              </el-checkbox>
              <el-button link type="primary" @click="handleForgotPassword">
                忘记密码？
              </el-button>
            </div>

            <el-button
              type="primary"
              :loading="loading"
              @click="handleLogin"
              class="login-button"
              size="large"
            >
              {{ loading ? '登录中...' : '登录' }}
            </el-button>

            <div class="register-link">
              还没有账号？
              <router-link to="/register" class="register-button">
                立即注册
              </router-link>
            </div>
          </el-form>
        </el-card>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { User, Lock } from '@element-plus/icons-vue'
import { login } from '@/api/axiosFile'

const router = useRouter()
const loginFormRef = ref(null)
const loading = ref(false)
const rememberMe = ref(false)

// 表单数据
const loginForm = ref({
  username: '',
  password: ''
})

// 表单验证规则
const rules = {
  username: [
    { required: true, message: '请输入用户名', trigger: 'blur' },
    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }
  ],
  password: [
    { required: true, message: '请输入密码', trigger: 'blur' },
    { min: 5, message: '密码长度不能少于5位', trigger: 'blur' }
  ]
}

// 处理忘记密码
const handleForgotPassword = () => {
  ElMessageBox.alert(
    '请联系管理员重置密码',
    '忘记密码',
    {
      confirmButtonText: '确定',
      type: 'info',
    }
  )
}

// 登录处理
const handleLogin = async () => {
  if (!loginFormRef.value) return

  try {
    // 表单验证
    await loginFormRef.value.validate()
    
    loading.value = true
    const result = await login(loginForm.value.username, loginForm.value.password)
    
    if (result.data.message) {
      localStorage.setItem('token', result.data.token);
      localStorage.setItem('userId', result.data.userId);
      
      
      if (rememberMe.value) {
        localStorage.setItem('remembered_username', loginForm.value.username)
      } else {
        localStorage.removeItem('remembered_username')
      }

      ElMessage({
        type: 'success',
        message: '登录成功，欢迎回来！',
        duration: 2000
      })
      
      router.push('/pub')
    } else {
      throw new Error(result.data.error || '登录失败')
    }
  } catch (error) {
    console.error('登录失败:', error)
    ElMessageBox.alert(
      error.message || '登录失败，请检查用户名和密码',
      '登录失败',
      {
        confirmButtonText: '确定',
        type: 'error',
      }
    )
  } finally {
    loading.value = false
  }
}

// 生命周期钩子
onMounted(() => {
  const rememberedUsername = localStorage.getItem('remembered_username')
  if (rememberedUsername) {
    loginForm.value.username = rememberedUsername
    rememberMe.value = true
  }
})
</script>

<style scoped>
.login-container {
  min-height: 100vh;
  background: linear-gradient(120deg, #84fab0 0%, #8fd3f4 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  animation: gradientBG 15s ease infinite;
  background-size: 400% 400%;
}

.login-wrapper {
  display: flex;
  width: 1000px;
  max-width: 100%;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
  backdrop-filter: blur(10px);
  transform: translateY(0);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.login-wrapper:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12), 0 8px 20px rgba(0, 0, 0, 0.09);
}

.login-decoration {
  flex: 1;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  padding: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  position: relative;
  overflow: hidden;
}

.login-decoration::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
  transform: translateX(-100%);
  animation: shimmer 3s infinite;
}

.decoration-content {
  text-align: center;
  position: relative;
  z-index: 1;
}

.decoration-content h1 {
  font-size: 2.8em;
  margin-bottom: 20px;
  font-weight: 600;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  animation: slideInLeft 0.8s ease-out;
}

.decoration-content p {
  font-size: 1.4em;
  opacity: 0.95;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);
  animation: slideInLeft 0.8s ease-out 0.2s backwards;
}

.login-form-container {
  flex: 1;
  padding: 40px;
  background: #ffffff;
  position: relative;
}

.login-card {
  box-shadow: none !important;
  border: none !important;
  animation: fadeIn 0.8s ease-out;
}

.login-header {
  text-align: center;
  margin-bottom: 40px;
}

.login-header h2 {
  font-size: 28px;
  color: #2c3e50;
  margin-bottom: 12px;
  font-weight: 600;
  animation: slideInDown 0.6s ease-out;
}

.subtitle {
  color: #7f8c8d;
  font-size: 16px;
  animation: slideInDown 0.6s ease-out 0.1s backwards;
}

.login-form :deep(.el-input__wrapper) {
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.03);
  border-radius: 12px;
  padding: 0 15px;
  transition: all 0.3s ease;
}

.login-form :deep(.el-input__wrapper:hover) {
  transform: translateY(-1px);
  box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.06);
}

.login-form :deep(.el-input__inner) {
  height: 48px;
  font-size: 16px;
}

.login-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 25px 0;
  animation: fadeIn 0.6s ease-out 0.3s backwards;
}

.remember-text {
  color: #7f8c8d;
  font-size: 14px;
}

.login-button {
  width: 100%;
  height: 48px;
  border-radius: 12px;
  font-size: 16px;
  margin-top: 20px;
  font-weight: 500;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border: none;
  transition: all 0.3s ease;
  animation: slideInUp 0.6s ease-out 0.4s backwards;
}

.login-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
}

.login-button:active {
  transform: translateY(0);
}

.register-link {
  text-align: center;
  margin-top: 25px;
  color: #7f8c8d;
  font-size: 15px;
  animation: fadeIn 0.6s ease-out 0.5s backwards;
}

.register-button {
  color: #667eea;
  text-decoration: none;
  font-weight: 500;
  margin-left: 5px;
  transition: all 0.3s ease;
}

.register-button:hover {
  color: #764ba2;
  text-decoration: none;
}

/* 响应式设计 */
@media (max-width: 768px) {
  .login-wrapper {
    flex-direction: column;
  }

  .login-decoration {
    padding: 30px 20px;
    min-height: 180px;
  }

  .decoration-content h1 {
    font-size: 2.2em;
  }

  .decoration-content p {
    font-size: 1.1em;
  }
}

/* 动画关键帧 */
@keyframes gradientBG {
  0% { background-position: 0% 50% }
  50% { background-position: 100% 50% }
  100% { background-position: 0% 50% }
}

@keyframes shimmer {
  0% { transform: translateX(-100%) }
  100% { transform: translateX(100%) }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>


================================================
FILE: pages/ManageSongs.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <el-input
            v-model="searchQuery"
            placeholder="搜索音乐"
            class="search-input"
            :prefix-icon="Search"
            clearable
            @clear="handleSearch"
            @keyup.enter="handleSearch"
          />
          <el-select v-model="status" placeholder="审核状态" @change="handleSearch">
            <el-option label="全部" value="" />
            <el-option label="待审核" value="pending" />
            <el-option label="已通过" value="approved" />
            <el-option label="已拒绝" value="rejected" />
          </el-select>
        </div>

        <!-- 加载状态 -->
        <el-loading 
          :visible="isLoading"
          element-loading-text="加载中..."
          element-loading-background="rgba(255, 255, 255, 0.8)"
        />

        <!-- 空状态 -->
        <el-empty
          v-if="!isLoading && songs.length === 0"
          description="暂无音乐"
        />

        <!-- 歌曲列表 -->
        <div class="song-list" v-if="songs.length > 0">
          <div class="song-header">
            <div class="col-index">#</div>
            <div class="col-title">标题</div>
            <div class="col-duration">时长</div>
            <div class="col-artist">歌手</div>
            <div class="col-album">专辑</div>
            <div class="col-uploader">上传者</div>
            <div class="col-status">状态</div>
            <div class="col-actions">操作</div>
          </div>

          <div 
            v-for="(song, index) in songs" 
            :key="song.id" 
            class="song-item"
            @mouseenter="hoveredSong = song.id"
            @mouseleave="hoveredSong = null"
          >
            <div class="col-index">
              <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
              <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
            </div>

            <div class="col-title">
              <div class="song-cover">
                <el-image 
                  :src="song.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <span class="song-name">{{ song.name }}</span>
            </div>

            <div class="col-duration">{{ formatDuration(song.duration) }}</div>
            <div class="col-artist">{{ song.artist }}</div>
            <div class="col-album">{{ song.album }}</div>
            <div class="col-uploader">{{ song.uploader }}</div>
            
            <div class="col-status">
              <el-tag :type="getStatusType(song.status)">
                {{ getStatusText(song.status) }}
              </el-tag>
            </div>

            <div class="col-actions">
              <el-button-group>
                <el-button 
                  v-if="song.status === 'pending'"
                  type="success" 
                  size="small"
                  @click="approveSong(song)"
                >
                  通过
                </el-button>
                <el-button 
                  v-if="song.status === 'pending'"
                  type="danger" 
                  size="small"
                  @click="rejectSong(song)"
                >
                  拒绝
                </el-button>
                <el-button 
                  type="danger" 
                  size="small"
                  @click="deleteSong(song)"
                >
                  删除
                </el-button>
              </el-button-group>
            </div>
          </div>
        </div>

        <!-- 分页器 -->
        <el-pagination
          v-if="songs.length > 0"
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalSongs"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />

        <div class="player-controls">
          <el-button circle @click="previousSong">
            <el-icon><ArrowLeft /></el-icon>
          </el-button>
          <el-button circle @click="togglePlay">
            <el-icon>
              <VideoPlay v-if="!isPlaying" />
              <VideoPause v-else />
            </el-icon>
          </el-button>
          <el-button circle @click="nextSong">
            <el-icon><ArrowRight /></el-icon>
          </el-button>
        </div>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Search, VideoPlay, ArrowLeft, ArrowRight } from '@element-plus/icons-vue'
import { usePlayerStore } from '@/stores/player'

const playerStore = usePlayerStore()

const currentName = ref('音乐管理')
const songs = ref([])
const page = ref(1)
const pageSize = ref(10)
const totalSongs = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const status = ref('')
const hoveredSong = ref(null)

const handlePlaySong = (song) => {
  playerStore.setPlaylist([song])
  playerStore.play(0)
}

const formatDuration = (seconds) => {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

const getStatusType = (status) => {
  const types = {
    pending: 'warning',
    approved: 'success',
    rejected: 'danger'
  }
  return types[status] || 'info'
}

const getStatusText = (status) => {
  const texts = {
    pending: '待审核',
    approved: '已通过',
    rejected: '已拒绝'
  }
  return texts[status] || '未知'
}

const handleSearch = async () => {
  page.value = 1
  await loadData()
}

const handlePageChange = async (newPage) => {
  page.value = newPage
  await loadData()
}

const handlePageSizeChange = async (newSize) => {
  pageSize.value = newSize
  page.value = 1
  await loadData()
}

const loadData = async () => {
  isLoading.value = true
  try {
    // TODO: 实现获取音乐列表的接口
    isLoading.value = false
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error('加载数据失败，请稍后重试')
    isLoading.value = false
  }
}

const approveSong = async (song) => {
  try {
    await ElMessageBox.confirm(
      '确定通过这首音乐的审核吗？',
      '审核音乐',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'success'
      }
    )
    // TODO: 实现通过审核的接口
    ElMessage.success(`已通过音乐: ${song.name}`)
    await loadData()
  } catch {
    // 用户取消操作
  }
}

const rejectSong = async (song) => {
  try {
    await ElMessageBox.confirm(
      '确定拒绝这首音乐的审核吗？',
      '审核音乐',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )
    // TODO: 实现拒绝审核的接口
    ElMessage.success(`已拒绝音乐: ${song.name}`)
    await loadData()
  } catch {
    // 用户取消操作
  }
}

const deleteSong = async (song) => {
  try {
    await ElMessageBox.confirm(
      '确定要删除这首音乐吗？',
      '删除音乐',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )
    // TODO: 实现删除音乐的接口
    ElMessage.success(`音乐已删除: ${song.name}`)
    await loadData()
  } catch {
    // 用户取消删除
  }
}

onMounted(() => {
  loadData()
})
</script>

<style scoped>
@import '../styles/common.css';

.col-uploader {
  flex: 1;
  padding: 0 10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.col-status {
  width: 80px;
  text-align: center;
}

.col-actions {
  width: 200px;
  text-align: center;
}
</style>


================================================
FILE: pages/ManageUsers.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <el-input
            v-model="searchQuery"
            placeholder="搜索用户"
            class="search-input"
            :prefix-icon="Search"
            clearable
            @clear="handleSearch"
            @keyup.enter="handleSearch"
          />
          <el-select v-model="role" placeholder="用户角色" @change="handleSearch">
            <el-option label="全部" value="" />
            <el-option label="普通用户" value="user" />
            <el-option label="管理员" value="admin" />
          </el-select>
        </div>

        <!-- 加载状态 -->
        <el-loading 
          :visible="isLoading"
          element-loading-text="加载中..."
          element-loading-background="rgba(255, 255, 255, 0.8)"
        />

        <!-- 空状态 -->
        <el-empty
          v-if="!isLoading && users.length === 0"
          description="暂无用户"
        />

        <!-- 用户列表 -->
        <el-table
          v-if="users.length > 0"
          :data="users"
          style="width: 100%"
          :header-cell-style="{ background: '#f5f7fa' }"
        >
          <el-table-column prop="id" label="ID" width="80" />
          
          <el-table-column label="用户信息" min-width="200">
            <template #default="{ row }">
              <div class="user-info">
                <el-avatar :src="row.avatar || '/assets/default-avatar.jpg'" :size="40" />
                <div class="user-details">
                  <div class="username">{{ row.username }}</div>
                  <div class="email">{{ row.email }}</div>
                </div>
              </div>
            </template>
          </el-table-column>

          <el-table-column prop="name" label="昵称" min-width="120" />
          
          <el-table-column label="角色" width="120">
            <template #default="{ row }">
              <el-tag :type="row.role === 'admin' ? 'danger' : 'info'">
                {{ row.role === 'admin' ? '管理员' : '普通用户' }}
              </el-tag>
            </template>
          </el-table-column>

          <el-table-column prop="created_at" label="注册时间" width="180" />
          
          <el-table-column label="状态" width="100">
            <template #default="{ row }">
              <el-switch
                v-model="row.is_active"
                :active-value="1"
                :inactive-value="0"
                @change="handleStatusChange(row)"
              />
            </template>
          </el-table-column>

          <el-table-column label="操作" width="200" fixed="right">
            <template #default="{ row }">
              <el-button-group>
                <el-button 
                  type="primary" 
                  size="small"
                  @click="editUser(row)"
                >
                  编辑
                </el-button>
                <el-button 
                  type="danger" 
                  size="small"
                  @click="deleteUser(row)"
                >
                  删除
                </el-button>
              </el-button-group>
            </template>
          </el-table-column>
        </el-table>

        <!-- 分页器 -->
        <el-pagination
          v-if="users.length > 0"
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalUsers"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />

        <!-- 编辑用户对话框 -->
        <el-dialog
          v-model="editDialogVisible"
          :title="editForm.id ? '编辑用户' : '新增用户'"
          width="500px"
        >
          <el-form :model="editForm" label-width="80px">
            <el-form-item label="用户名">
              <el-input v-model="editForm.username" :disabled="!!editForm.id" />
            </el-form-item>
            <el-form-item label="昵称">
              <el-input v-model="editForm.name" />
            </el-form-item>
            <el-form-item label="邮箱">
              <el-input v-model="editForm.email" />
            </el-form-item>
            <el-form-item label="角色">
              <el-select v-model="editForm.role">
                <el-option label="普通用户" value="user" />
                <el-option label="管理员" value="admin" />
              </el-select>
            </el-form-item>
          </el-form>
          <template #footer>
            <el-button @click="editDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="submitEdit">确定</el-button>
          </template>
        </el-dialog>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { Search } from '@element-plus/icons-vue'

const currentName = ref('用户管理')
const users = ref([])
const page = ref(1)
const pageSize = ref(10)
const totalUsers = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const role = ref('')
const editDialogVisible = ref(false)
const editForm = ref({
  id: '',
  username: '',
  name: '',
  email: '',
  role: 'user'
})

const handleSearch = async () => {
  page.value = 1
  await loadData()
}

const handlePageChange = async (newPage) => {
  page.value = newPage
  await loadData()
}

const handlePageSizeChange = async (newSize) => {
  pageSize.value = newSize
  page.value = 1
  await loadData()
}

const loadData = async () => {
  isLoading.value = true
  try {
    // TODO: 实现获取用户列表的接口
    // const response = await getUsers(page.value, pageSize.value, role.value)
    isLoading.value = false
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error('加载数据失败，请稍后重试')
    isLoading.value = false
  }
}

const editUser = (user) => {
  editForm.value = { ...user }
  editDialogVisible.value = true
}

const submitEdit = async () => {
  // TODO: 实现编辑用户的接口
  ElMessage.success('用户信息已更新')
  editDialogVisible.value = false
  await loadData()
}

const handleStatusChange = async (user) => {
  // TODO: 实现更新用户状态的接口
  ElMessage.success(`用户状态已${user.is_active ? '启用' : '禁用'}`)
}

const deleteUser = async (user) => {
  try {
    await ElMessageBox.confirm(
      '确定要删除这个用户吗？此操作不可恢复！',
      '删除用户',
      {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )
    // TODO: 实现删除用户的接口
    ElMessage.success('用户已删除')
    await loadData()
  } catch {
    // 用户取消删除
  }
}

onMounted(() => {
  loadData()
})
</script>

<style scoped>
@import '../styles/common.css';

.user-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.user-details {
  display: flex;
  flex-direction: column;
}

.username {
  font-weight: 500;
}

.email {
  font-size: 12px;
  color: #666;
}

.el-table {
  margin: 20px 0;
}
</style>


================================================
FILE: pages/MyLove.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <el-input
            v-model="searchQuery"
            placeholder="搜索喜欢的音乐"
            class="search-input"
            :prefix-icon="Search"
            clearable
            @clear="handleSearch"
            @keyup.enter="handleSearch"
          />
          <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
            <el-option label="最新" value="latest" />
            <el-option label="最早" value="oldest" />
          </el-select>
        </div>

        <!-- 加载状态 -->
        <el-loading 
          :visible="isLoading"
          element-loading-text="加载中..."
          element-loading-background="rgba(255, 255, 255, 0.8)"
        />

        <!-- 空状态 -->
        <el-empty
          v-if="!isLoading && songs.length === 0"
          description="还没有喜欢的音乐"
        />

        <!-- 歌曲列表 -->
        <div class="song-list" v-if="songs.length > 0">
          <div class="song-header">
            <div class="col-index">#</div>
            <div class="col-title">标题</div>
            <div class="col-duration">时长</div>
            <div class="col-artist">歌手</div>
            <div class="col-album">专辑</div>
          </div>

          <div 
            v-for="(song, index) in songs" 
            :key="song.id" 
            class="song-item"
            @mouseenter="hoveredSong = song.id"
            @mouseleave="hoveredSong = null"
          >
            <div class="col-index">
              <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
              <el-icon v-else class="play-icon" @click="handlePlaySong(song)">
                <VideoPlay />
              </el-icon>
            </div>

            <div class="col-title">
              <div class="song-cover" @click="goToPlayer(song)">
                <el-image 
                  :src="song.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <span class="song-name">{{ song.name }}</span>
            </div>

            <div class="col-duration">
              <template v-if="hoveredSong !== song.id">
                {{ formatDuration(song.duration) }}
              </template>
              <div v-else class="action-buttons">
                <!-- 当前用户查看自己的喜欢列表时显示删除按钮 -->
                <template v-if="isCurrentUser">
                  <el-tooltip content="删除" placement="top">
                    <el-icon 
                      @click.stop="unlikeSong(song)"
                      class="delete-icon"
                    >
                      <Delete />
                    </el-icon>
                  </el-tooltip>
                </template>
                <!-- 其他用户查看时显示喜欢按钮 -->
                <template v-else>
                  <el-tooltip content="喜欢" placement="top">
                    <el-icon 
                      @click.stop="likeSong(song)"
                      :class="{ 'liked': likedSongs.includes(song.id) }"
                    >
                      <Star />
                    </el-icon>
                  </el-tooltip>
                </template>
                <el-tooltip content="添加到播放列表" placement="top">
                  <el-icon @click.stop="addToPlaylist(song)"><Plus /></el-icon>
                </el-tooltip>
                <el-tooltip content="评论" placement="top">
                  <el-icon @click.stop="goToComment(song)"><ChatDotRound /></el-icon>
                </el-tooltip>
              </div>
            </div>

            <div class="col-artist" @click="goToArtist(song.author_id)">
              {{ song.artist }}
            </div>
            <div class="col-album" @click="goToAlbum(song.album_id)">
              {{ song.album }}
            </div>
          </div>
        </div>

        <!-- 分页器 -->
        <el-pagination
          v-if="songs.length > 0"
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalSongs"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />

        <div class="player-controls" v-if="showPlayerControls">
          <el-button circle @click="previousSong">
            <el-icon><ArrowLeft /></el-icon>
          </el-button>
          <el-button circle @click="togglePlay">
            <el-icon>
              <VideoPlay v-if="!isPlaying" />
              <VideoPause v-else />
            </el-icon>
          </el-button>
          <el-button circle @click="nextSong">
            <el-icon><ArrowRight /></el-icon>
          </el-button>
        </div>

          <el-dialog
          v-model="playlistDialogVisible"
          title="添加到歌单"
          width="600px"
          @close="selectedPlaylist = null"
        >
          <div class="playlist-dialog-content">
            <!-- 现有歌单列表，设置为可见之后弹出 -->
            <div class="existing-playlists">
              <el-scrollbar height="400px">
                <div class="playlist-list">
                  <div 
                    v-for="playlist in userPlaylists" 
                    :key="playlist.id" 
                    class="playlist-item"
                    :class="{ 'playlist-item-selected': selectedPlaylist === playlist.id }"
                    @click="selectedPlaylist = playlist.id"
                  >
                    <div class="playlist-info-row">
                      <el-image 
                        :src="playlist.cover || '/assets/default-cover.jpg'" 
                        class="playlist-cover-img"
                      />
                      <div class="playlist-details">
                        <div class="playlist-name">{{ playlist.name }}</div>
                        <div class="playlist-description">{{ playlist.description || '暂无��述' }}</div>
                        <div class="playlist-count">{{ playlist.song_count || 0 }}首歌曲</div>
                      </div>
                    </div>
                  </div>
                </div>
              </el-scrollbar>
            </div>

            <!-- 创建新歌单 -->
            <div class="create-playlist">
              <el-divider>创建新歌单</el-divider>
              <div class="create-playlist-form">
                <el-input
                  v-model="newPlaylistName"
                  placeholder="请输入歌单名称"
                  clearable
                />
                <el-input
                  v-model="newPlaylistDescription"
                  type="textarea"
                  :rows="2"
                  placeholder="添加歌单描述（选填）"
                  class="mt-3"
                />
                <el-button type="primary" @click="createNewPlaylist" class="mt-3">
                  创建
                </el-button>
              </div>
            </div>
          </div>
          <template #footer>
            <span class="dialog-footer">
              <el-button @click="playlistDialogVisible = false">取消</el-button>
              <el-button type="primary" @click="confirmAddToPlaylist">
                确定
              </el-button>
            </span>
          </template>
        </el-dialog>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted, watch } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { ElMessage } from 'element-plus'
import { 
  Search, 
  VideoPlay, 
  VideoPause, 
  Star,
  Plus,
  FolderAdd,
  ChatDotRound,
  ArrowLeft,
  ArrowRight,
  Delete
} from '@element-plus/icons-vue'
import { 
  getLikedSongs, 
  removeLikedSong,
  getMyPlaylists, // 直接都采用相同的接口函数即可
  createPlaylist,
  addSongToPlaylist,
  getUserInfo,
  getLikedSongsById,
  addLikedSong
} from '@/api/axiosFile'
import { usePlayerStore } from '@/stores/player'
import CommonLayout from '@/layouts/CommonLayout.vue'

// 响应式状态
const currentName = ref('')
const songs = ref([])
const page = ref(1)
const pageSize = ref(10)
const totalSongs = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const sortBy = ref('latest')
const hoveredSong = ref(null)

const router = useRouter()
const playerStore = usePlayerStore()
const route = useRoute()

// 歌单相关的响应式变量
const playlistDialogVisible = ref(false)
const showCreateForm = ref(false)
const selectedPlaylist = ref(null)
const newPlaylistName = ref('')
const newPlaylistDescription = ref('')
const userPlaylists = ref([])
const selectedSong = ref(null)

// 添加新的响应式变量
const isCurrentUser = ref(false)
const likedSongs = ref([])

// 加载数据
const loadData = async () => {
  isLoading.value = true
  try {
    const response = await getLikedSongs({
      id: route.params.id,
      page: page.value,
      pageSize: pageSize.value,
      search: searchQuery.value,
      sortBy: sortBy.value
    })
    if (response.data.message) {
      songs.value = response.data.data.list
      totalSongs.value = response.data.data.total
    } else {
      throw new Error(response.data.error || '获取数据失败')
    }
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error('加载数据失败，请稍后重试')
  } finally {
    isLoading.value = false
  }
}

// 搜索处理
const handleSearch = async () => {
  page.value = 1
  await loadData()
}

// 分页处理
const handlePageChange = async (newPage) => {
  page.value = newPage
  await loadData()
}

const handlePageSizeChange = async (newSize) => {
  pageSize.value = newSize
  page.value = 1
  await loadData()
}

// 播放歌曲
const handlePlaySong = (song) => {
  playerStore.setPlaylist([song])
  playerStore.play(0)
}

// 取消喜欢
const unlikeSong = async (song) => {
  try {
    await removeLikedSong(song.id)
    ElMessage.success(`已取消喜欢: ${song.name}`)
    await loadData() // 重��加载数据
  } catch (error) {
    console.error('取消喜欢失败:', error)
    ElMessage.error('操作失败，请稍后重试')
  }
}
const addToPlaylist = async (song) => {
  selectedSong.value = song
  playlistDialogVisible.value = true
  //在这里修改显示状态，然后弹出一个弹窗
  try {
    const response = await getMyPlaylists({
      id: parseInt(localStorage.getItem('userId')),
    })
    console.log(response)
    if (response.data.message) {
      userPlaylists.value = response.data.data.playlists
    } else {
      throw new Error(response.data.error || '获取歌单失败')
    }
  } catch (error) {
    console.error('获取歌单失败:', error)
    ElMessage.error(error.message || '获取歌单失败，请稍后重试')
  }
}

const createNewPlaylist = async () => {
  if (!newPlaylistName.value.trim()) {
    ElMessage.warning('请输入歌单名称')
    return
  }

  try {
    const response = await createPlaylist({
      name: newPlaylistName.value,
      description: newPlaylistDescription.value,
      isPublic: false
    })

    if (response.data.message) {
      userPlaylists.value.unshift({
        ...response.data.data,
        songCount: 0
      })
      selectedPlaylist.value = response.data.data.id
      newPlaylistName.value = ''
      newPlaylistDescription.value = ''
      ElMessage.success('歌单创建成功')
    } else {
      throw new Error(response.data.error || '创建歌单失败')
    }
  } catch (error) {
    console.error('创建歌单失败:', error)
    ElMessage.error(error.message || '创建歌单失败，请稍后重试')
  }
}

const confirmAddToPlaylist = async () => {
  if (!selectedPlaylist.value) {
    ElMessage.warning('请选择歌单')
    return
  }

  try {
    const response = await addSongToPlaylist(selectedPlaylist.value, selectedSong.value.id)
    if (response.data.message) {
      ElMessage.success('添加成功')
      playlistDialogVisible.value = false
      selectedPlaylist.value = null
    } else {
      throw new Error(response.data.error || '添加失败')
    }
  } catch (error) {
    console.error('添加失败:', error)
    ElMessage.error(error.message || '添加失败，请稍后重试')
  }
}

// const addAlbum = (song) => {
//   console.log(song);
//   // playerStore.setPlaylist([song])
//   ElMessage.success(`已收藏专辑: ${song.album.name}`)
// }

const goToComment = (song) => {
  router.push(`/comment/${song.id}`)
}

// 格式化时长
const formatDuration = (seconds) => {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

// 添加路由跳转方法
const goToArtist = (artistId) => {
  if (artistId) {
    router.push(`/artist/${artistId}`)
  }
  else{
    ElMessage.error("歌手不存在!")
  }
}

const goToAlbum = (albumId) => {
  if (albumId) {
    router.push(`/album/${albumId}`)
  }
  else{
    ElMessage.error("专辑不存在!")
  }
}

const goToPlayer = (song) => {
  handlePlaySong(song) // 点击封面时同时开始播放
  router.push('/player')
}

// 获取用户信息并设置标题
const setPageTitle = async () => {
  try {
    const userId = route.params.id
    const userStr = localStorage.getItem('userId')
    const currentUser = userStr ? JSON.parse(userStr) : null
    
    isCurrentUser.value = userId === currentUser?.id
    
    if (isCurrentUser.value) {
      currentName.value = '我喜欢的音乐'
    } else {
      const response = await getUserInfo(userId)
      if (response.data.message) {
        const targetUser = response.data.data.data
        currentName.value = `${targetUser.name || targetUser.username}喜欢的音乐`
        // 获取当前用户的喜欢列表
        const likedResponse = await getLikedSongsById(currentUser?.id)
        if (likedResponse.data.message) {
          likedSongs.value = likedResponse.data.data || []
        }
      }
    }
  } catch (error) {
    console.error('获取用户信息失败:', error)
    currentName.value = '喜欢的音乐'
  }
}

// 添加喜欢歌曲的方法
const likeSong = async (song) => {
  try {
    if (likedSongs.value.includes(song.id)) {
      await removeLikedSong(song.id)
      likedSongs.value = likedSongs.value.filter(id => id !== song.id)
      ElMessage.success(`已取消喜欢: ${song.name}`)
    } else {
      await addLikedSong(song.id)
      likedSongs.value.push(song.id)
      ElMessage.success(`已添加到我喜欢: ${song.name}`)
    }
  } catch (error) {
    console.error('操作失败:', error)
    ElMessage.error('操作失败，请稍后重试')
  }
}

// 组件挂载时加载数据
onMounted(() => {
  loadData()
  setPageTitle()
})

// 监听路由变化，更新标题
watch(() => route.params.id, () => {
  setPageTitle()
})
</script>

<style scoped>
.playlist-container {
  padding: 24px 32px;
  margin-right: 16px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  height: 100%;
  overflow-y: auto;
  padding-bottom: 100px;
}

.filter-section {
  display: flex;
  gap: 20px;
  margin-bottom: 24px;
  align-items: center;
}

.search-input {
  width: 300px;
}

.song-list {
  margin-top: 20px;
  border: 1px solid #EBEEF5;
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 24px;
}

.song-header {
  position: sticky;
  top: 0;
  display: grid;
  grid-template-columns: 60px minmax(300px, 2.5fr) 180px minmax(160px, 1fr) minmax(160px, 1fr);
  padding: 12px 24px;
  background-color: #f5f7fa;
  border-bottom: 1px solid #ebeef5;
  font-weight: 600;
  color: #606266;
  align-items: center;
  z-index: 1;
  gap: 12px;
}

.song-item {
  display: grid;
  grid-template-columns: 60px minmax(300px, 2.5fr) 180px minmax(160px, 1fr) minmax(160px, 1fr);
  padding: 12px 24px;
  border-bottom: 1px solid #ebeef5;
  align-items: center;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.song-item:hover {
  background-color: #F5F7FA;
  transform: translateX(4px);
}

.col-index {
  text-align: center;
  color: #909399;
  font-size: 14px;
}

.col-title {
  display: flex;
  align-items: center;
  gap: 16px;
  min-width: 0;
}

.song-cover {
  width: 48px;
  height: 48px;
  border-radius: 6px;
  overflow: hidden;
  flex-shrink: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
}

.song-cover:hover {
  transform: scale(1.05) rotate(2deg);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.song-name {
  font-weight: 500;
  color: #303133;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.col-duration {
  min-width: 180px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding-right: 24px;
  color: #606266;
  font-size: 14px;
}

.col-artist, .col-album {
  padding: 0 12px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: pointer;
  color: #606266;
}

.col-artist:hover, .col-album:hover {
  color: #409EFF;
}

.action-buttons {
  display: flex;
  gap: 20px;
  justify-content: flex-start;
  align-items: center;
}

.action-buttons .el-icon {
  font-size: 16px;
  cursor: pointer;
  color: #606266;
  transition: color 0.3s;
  padding: 4px;
}

.action-buttons .el-icon:hover {
  color: #409EFF;
}

.el-icon {
  font-size: 18px;
  color: #909399;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  padding: 6px;
  border-radius: 50%;
}

.el-icon:hover {
  transform: scale(1.2);
  color: var(--el-color-primary);
  background-color: rgba(64, 158, 255, 0.1);
}

.liked {
  color: #ffcc00 !important;
  transform: scale(1.1);
  animation: heartBeat 0.3s ease-in-out;
}

.play-icon {
  color: var(--el-color-primary);
  font-size: 20px;
}

.play-icon:hover {
  animation: pulse 1s infinite;
}

.pagination {
  position: sticky;
  bottom: 0;
  margin-top: 24px;
  padding: 16px 0;
  background-color: #fff;
  display: flex;
  justify-content: center;
  box-shadow: 0 -2px 12px 0 rgba(0, 0, 0, 0.05);
}

/* 滚动条样式 */
.playlist-container::-webkit-scrollbar {
  width: 6px;
}

.playlist-container::-webkit-scrollbar-thumb {
  background-color: #dcdfe6;
  border-radius: 3px;
}

.playlist-container::-webkit-scrollbar-track {
  background-color: #f5f7fa;
}

/* 动画效果 */
@keyframes heartBeat {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1.1); }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

/* 响应式设计 */
@media screen and (max-width: 1200px) {
  .song-header, .song-item {
    grid-template-columns: 60px 2.5fr 100px 1.2fr 1.2fr 120px;
  }
}

@media screen and (max-width: 768px) {
  .song-header, .song-item {
    grid-template-columns: 50px 3fr 1.5fr 100px;
  }
  
  .col-album, .col-duration {
    display: none;
  }
  
  .filter-section {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-input {
    width: 100%;
  }
}
/* 添加滚动条样式 */
.playlist-container::-webkit-scrollbar {
  width: 6px;
}

.playlist-container::-webkit-scrollbar-thumb {
  background-color: #dcdfe6;
  border-radius: 3px;
}

.playlist-container::-webkit-scrollbar-track {
  background-color: #f5f7fa;
}

.playlist-dialog-content {
  padding: 20px 0;
}

.existing-playlists {
  max-height: 400px;
  overflow: hidden;
  margin: 0 -20px; /* 扩展到对话框边缘 */
}

.playlist-list {
  display: flex;
  flex-direction: column;
}

.playlist-item {
  padding: 16px 20px;
  border-bottom: 1px solid var(--el-border-color-lighter);
  cursor: pointer;
  transition: all 0.3s;
  position: relative;
}

.playlist-item:hover {
  background-color: var(--el-fill-color-light);
}

.playlist-item-selected {
  background-color: var(--el-color-primary-light-9);
}

.playlist-item-selected::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background-color: var(--el-color-primary);
}

.playlist-info-row {
  display: flex;
  gap: 16px;
  width: 100%;
}

.playlist-cover-img {
  width: 64px;
  height: 64px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s;
}

.playlist-item:hover .playlist-cover-img {
  transform: scale(1.05);
}

/* 自定义滚动条样式 */
.existing-playlists :deep(.el-scrollbar__wrap) {
  overflow-x: hidden;
}

.existing-playlists :deep(.el-scrollbar__bar.is-vertical) {
  width: 6px;
}

.existing-playlists :deep(.el-scrollbar__thumb) {
  background-color: var(--el-border-color);
  border-radius: 3px;
}

.existing-playlists :deep(.el-scrollbar__thumb:hover) {
  background-color: var(--el-border-color-darker);
}

/* 选中状态的额外样式 */
.playlist-item-selected .playlist-name {
  color: var(--el-color-primary);
  font-weight: 600;
}

.playlist-item-selected .playlist-description,
.playlist-item-selected .playlist-count {
  color: var(--el-color-primary-light-3);
}

/* 添加动画效果 */
.playlist-item {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.playlist-item:active {
  transform: scale(0.98);
}

.create-playlist {
  margin-top: 20px;
  padding: 0 20px;
}

.create-playlist-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 16px;
}

.mt-3 {
  margin-top: 12px;
}

/* 自定义滚动条样式 */
:deep(.el-scrollbar__wrap) {
  overflow-x: hidden !important;
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .playlist-item {
    padding: 12px 16px;
  }

  .playlist-cover-img {
    width: 48px;
    height: 48px;
  }
}

.delete-icon {
  color: var(--el-color-danger);
  transition: all 0.3s;
}

.delete-icon:hover {
  transform: scale(1.1);
  color: var(--el-color-danger-dark-2);
}

.liked {
  color: #ffcc00 !important;
  transform: scale(1.1);
  animation: heartBeat 0.3s ease-in-out;
}

@keyframes heartBeat {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1.1); }
}
</style>


================================================
FILE: pages/MyNewPlaylist.vue
================================================
<template>
  <CommonLayout>
    <template #main>
      <div class="main-container">
        <!-- 左侧歌单信息 -->
        <div class="playlist-aside">
          <div class="playlist-info-card">
            <div class="playlist-cover">
              <el-image 
                :src="currentPlaylist?.cover || '/assets/default-cover.jpg'"
                fit="cover"
              />
            </div>
            <h2>{{ currentPlaylist?.name || '我的歌单' }}</h2>
            <div class="playlist-info">
              <span>创建者：{{ currentPlaylist?.creator_name || '未知' }}</span>
              <span>|</span>
              <span>{{ currentPlaylist?.is_public ? '公开' : '私密' }}歌单</span>
              <span>|</span>
              <span>{{ songs.length }}首歌曲</span>
            </div>
            <p class="playlist-description">{{ currentPlaylist?.description || '暂无描述' }}</p>
            <!-- 添加修改按钮，仅当当前用户是创建者时显示 -->
            <el-button 
              v-if="isCreator"
              type="primary" 
              class="edit-btn"
              @click="handleEdit(currentPlaylist)">修改歌单信息</el-button>
          </div>


           <!-- 编辑歌单对话框 -->
        <el-dialog
          v-model="editDialogVisible"
          title="编辑歌单"
          width="400px"
          @close="resetEditData"
        >
          <el-form :model="editPlaylistData" label-width="80px">
            <el-form-item label="歌单名称">
              <el-input v-model="editPlaylistData.name" placeholder="请输入歌单名称" />
            </el-form-item>
            <el-form-item label="描述">
              <el-input
                v-model="editPlaylistData.description"
                type="textarea"
                placeholder="请输入歌单描述"
              />
            </el-form-item>
            <el-form-item label="公开">
              <el-switch v-model="editPlaylistData.isPublic" />
            </el-form-item>
          </el-form>
          <template #footer>
            <el-button @click="editDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="submitEditPlaylist">保存</el-button>
          </template>
        </el-dialog>
        </div>

        <!-- 右侧歌曲列表 -->
        <div class="playlist-container" v-loading="isLoading">
          <!-- 搜��和筛选区域 -->
          <div class="filter-section">
            <el-input
              v-model="searchQuery"
              placeholder="搜索歌曲、歌手、专辑"
              class="search-input"
              :prefix-icon="Search"
              clearable
              @clear="handleSearch"
              @keyup.enter="handleSearch"
            />
            <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
              <el-option label="最新" value="latest" />
              <el-option label="最热" value="popular" />
            </el-select>
          </div>

          <!-- 歌曲列表 -->
          <div class="song-list">
            <div class="song-header">
              <div class="col-index">#</div>
              <div class="col-title">标题</div>
              <div class="col-duration">时长</div>
              <div class="col-artist">歌手</div>
              <div class="col-album">专辑</div>
              <div class="col-actions" v-if="isCreator">操作</div>
            </div>

            <div 
              v-for="(song, index) in songs" 
              :key="song.id"
              class="song-item"
              @mouseenter="hoveredSong = song.id"
              @mouseleave="hoveredSong = null"
            >
              <div class="col-index">
                <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
                <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
              </div>
              <div class="col-title">
                <div class="song-cover">
                  <el-image 
                    :src="song.cover || '/assets/default-cover.jpg'"
                    fit="cover"
                  />
                </div>
                <span class="song-name">{{ song.name }}</span>
              </div>
              <div class="col-duration">
                <template v-if="hoveredSong !== song.id">
                  {{ formatDuration(song.duration) }}
                </template>
                <div v-else class="action-buttons">
                  <el-tooltip content="喜欢" placement="top">
                    <el-icon 
                      @click="likeSong(song)" 
                      :class="{ 'liked': likedSongs.includes(song.id) }" 
                    >
                      <Star />
                    </el-icon>
                  </el-tooltip>
                  <el-tooltip content="添加到播放列表" placement="top">
                    <el-icon @click="addToPlaylist(song)"><Plus /></el-icon>
                  </el-tooltip>
                  <el-tooltip content="评论" placement="top">
                    <el-icon @click="goToComment(song)"><ChatDotRound /></el-icon>
                  </el-tooltip>
                  <el-tooltip content="下载" placement="top">
                    <el-icon @click="downloadSong(song)"><Download /></el-icon>
                  </el-tooltip>
                </div>
              </div>
              <div class="col-artist" @click="goToArtist(song.author_id)">{{ song.artist }}</div>
              <div class="col-album" @click="goToAlbum(song.album_id)">{{ song.album }}</div>
              <div class="col-actions" v-if="isCreator">
                <el-button 
                  type="text" 
                  size="small" 
                  @click="removeSong(song)"
                >
                  删除
                </el-button>
              </div>
            </div>
          </div>
        </div>
      </div>

       <!-- 添加到播放列表弹窗 -->
      <el-dialog
        v-model="playlistDialogVisible"
        title="添加到歌单"
        width="400px"
        @close="selectedPlaylist = null"
      >
        <div class="playlist-dialog-content">
          <!-- 现有歌单列表，设置为可见之后弹出 -->
          <div class="existing-playlists">
            <el-scrollbar height="400px">
              <div class="playlist-list">
                <div 
                  v-for="playlist in userPlaylists" 
                  :key="playlist.id" 
                  class="playlist-item"
                  :class="{ 'playlist-item-selected': selectedPlaylist === playlist.id }"
                  @click="selectedPlaylist = playlist.id"
                >
                  <div class="playlist-info-row">
                    <el-image 
                      :src="playlist.cover || '/assets/default-cover.jpg'" 
                      class="playlist-cover-img"
                    />
                    <div class="playlist-details">
                      <div class="playlist-name">{{ playlist.name }}</div>
                      <div class="playlist-description">{{ playlist.description || '暂无描述' }}</div>
                      <div class="playlist-count">{{ playlist.song_count || 0 }}首歌曲</div>
                    </div>
                  </div>
                </div>
              </div>
            </el-scrollbar>
          </div>

          <!-- 创建新歌单 -->
          <div class="create-playlist">
            <el-divider>创建新歌单</el-divider>
            <div class="create-playlist-form">
              <el-input
                v-model="newPlaylistName"
                placeholder="请输入歌单名称"
                clearable
              />
              <el-input
                v-model="newPlaylistDescription"
                type="textarea"
                :rows="2"
                placeholder="添加歌单描述（选填）"
                class="mt-3"
              />
              <el-button type="primary" @click="createNewPlaylist" class="mt-3">
                创建
              </el-button>
            </div>
          </div>
        </div>
        <template #footer>
          <span class="dialog-footer">
            <el-button @click="playlistDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="confirmAddToPlaylist">
              确定
            </el-button>
          </span>
        </template>
      </el-dialog>
    
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted, computed, watch } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { 
  Search, 
  VideoPlay, 
  Star, 
  Plus, 
  FolderAdd, 
  ChatDotRound, 
  Download 
} from '@element-plus/icons-vue'
import { 
  getSongFromPlaylistById, // 其实这个页面直接从pub修改即可
  removeSongFromPlaylist,
  getLikedSongsById, 
  addLikedSong, 
  removeLikedSong,
  getMyPlaylists, 
  createPlaylist, 
  addSongToPlaylist,
  updatePlaylist
} from '@/api/axiosFile'
import { usePlayerStore } from '@/stores/player'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { useUserStore } from '@/stores/user'

const router = useRouter()
const playerStore = usePlayerStore()
const userStore = useUserStore()

// 基础数据
const currentName = ref('公共歌单')
const songs = ref([])
const page = ref(1)
const pageSize = ref(10)
const totalSongs = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const sortBy = ref('latest')
const hoveredSong = ref(null)
const likedSongs = ref([])
const coverDialogVisible = ref(false)
const playlistDialogVisible = ref(false)
const selectedSong = ref(null)
const selectedPlaylist = ref(null)
const newPlaylistName = ref('')
const newPlaylistDescription = ref('')
const userPlaylists = ref([])
const currentPlaylist = ref(null)

const editDialogVisible = ref(false)
const editPlaylistData = ref({
  name: '',
  description: '',
  isPublic: false
})


// 判断是否是创建者
const isCreator = computed(() => {
  const userId = parseInt(localStorage.getItem('userId'))
  return currentPlaylist.value?.user_id === userId
})

/// 编辑歌单
const handleEdit = (playlist) => {
  editPlaylistData.value = { ...playlist }
  editDialogVisible.value = true
}

// 提交编辑的歌单
const submitEditPlaylist = async () => {
  try {
    const playlistId = currentPlaylist.value.id
    await updatePlaylist(playlistId, editPlaylistData.value)
    ElMessage.success('歌单已更新')
    editDialogVisible.value = false
    await loadData()
  } catch (error) {
    ElMessage.error('更新歌单失败')
  }
}

// 重置编辑数据
const resetEditData = () => {
  editPlaylistData.value = { name: '', description: '', isPublic: false };
}

// 方法定义
const loadData = async () => {
  isLoading.value = true
  try {
    // 1. 获取歌曲列表
    //注意这里的route文件获取当前路径id的方式
    const songsResponse = await getSongFromPlaylistById(router.currentRoute.value.params.id,{
      page: page.value,
      pageSize: pageSize.value,
      search: searchQuery.value,
      sortBy: sortBy.value
    });
    console.log(songsResponse);
    //此处已经在后端处理了多表查询了，所以这里不需要再处理
    if (!songsResponse.data.message) {
      throw new Error(songsResponse.data.error || '获取歌曲列表失败')
    }

    const songsData = songsResponse.data.data;
    totalSongs.value = songsData.total;
    const songsList = songsData.songs || []
    currentPlaylist.value = songsData.playlist;
    // 2. 获取喜欢列表
    const userId = localStorage.getItem('userId')
    const likedResponse = await getLikedSongsById(userId)
    if (likedResponse.data.message) {
      likedSongs.value = likedResponse.data.data || []
    }
    // 3. 组装完整的歌曲信息,只是重新处理罢了
    songs.value = songsList.map(song => {
      return {
        ...song,
        artist: song.artist_name ? song.artist_name : '未知歌手',
        album: song.album_name ? song.album_name : '未知专辑',
        cover: song.album_cover ? song.album_cover : '/assets/default-cover.jpg',
        duration: song.duration || 0
      }
    })
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error(error.message || '加载数据失败，请稍后重试')
  } finally {
    isLoading.value = false
  }
}

const handlePlaySong = (song) => {
  playerStore.setPlaylist([song])
  playerStore.play(0)
}

const likeSong = async (song) => {
  try {
    if (likedSongs.value.includes(song.id)) {
      await removeLikedSong(song.id)
      likedSongs.value = likedSongs.value.filter(id => id !== song.id)
      ElMessage.success(`已取消喜欢: ${song.name}`)
    } else {
      await addLikedSong(song.id)
      likedSongs.value.push(song.id)
      ElMessage.success(`已添加到我喜欢: ${song.name}`)
    }
  } catch (error) {
    console.error('操作失败:', error)
    ElMessage.error('操作失败，请稍后重试')
  }
}

const addToPlaylist = async (song) => {
  selectedSong.value = song
  playlistDialogVisible.value = true
  
  try {
    const response = await getMyPlaylists({
      id: parseInt(localStorage.getItem('userId')),
    })
    if (response.data.message) {
      userPlaylists.value = response.data.data.playlists
    } else {
      throw new Error(response.data.error || '获取歌单失败')
    }
  } catch (error) {
    console.error('获取歌单失败:', error)
    ElMessage.error(error.message || '获取歌单失败，请稍后重试')
  }
}

const createNewPlaylist = async () => {
  if (!newPlaylistName.value.trim()) {
    ElMessage.warning('请输入歌单名称')
    return
  }

  try {
    const response = await createPlaylist({
      name: newPlaylistName.value,
      description: newPlaylistDescription.value,
      isPublic: false
    })

    if (response.data.message) {
      userPlaylists.value.unshift({
        ...response.data.data,
        songCount: 0
      })
      selectedPlaylist.value = response.data.data.id
      newPlaylistName.value = ''
      newPlaylistDescription.value = ''
      ElMessage.success('歌单创建成功')
    } else {
      throw new Error(response.data.error || '创建歌单失败')
    }
  } catch (error) {
    console.error('创建歌单失败:', error)
    ElMessage.error(error.message || '创建歌单失败，请稍后重试')
  }
}

const confirmAddToPlaylist = async () => {
  if (!selectedPlaylist.value) {
    ElMessage.warning('请选择歌单')
    return
  }

  try {
    const response = await addSongToPlaylist(selectedPlaylist.value, selectedSong.value.id)
    if (response.data.message) {
      ElMessage.success('添加成功')
      playlistDialogVisible.value = false
      selectedPlaylist.value = null
    } else {
      throw new Error(response.data.error || '添加失败')
    }
  } catch (error) {
    console.error('添加失败:', error)
    ElMessage.error(error.message || '添加失败，请稍后重试')
  }
}

const formatDuration = (seconds) => {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

const handleSearch = () => {
  page.value = 1
  loadData()
}

const handlePageChange = (newPage) => {
  page.value = newPage
  loadData()
}

const handlePageSizeChange = (newSize) => {
  pageSize.value = newSize
  page.value = 1
  loadData()
}

const showCover = (song) => {
  selectedSong.value = song
  coverDialogVisible.value = true
}

const goToArtist = (artistId) => {
  if (artistId) {
    router.push(`/artist/${artistId}`)
  }
  else{
    ElMessage.error("歌手不存在!")
  }
}

const goToAlbum = (albumId) => {
  if (albumId) {
    router.push(`/album/${albumId}`)
  }
  else{
    ElMessage.error("专辑不存在!")
  }
}

const goToComment = (song) => {
  router.push(`/comment/${song.id}`)
}


const removeSong = async (song) => {
  try {
    const response = await removeSongFromPlaylist(currentPlaylist.value.id, song.id)
    if (response.data.message) {
      ElMessage.success('删除成功')
      loadData()
    } else {
      throw new Error(response.data.error || '删除失败')
    }
  } catch (error) {
    console.error('删除失败:', error)
    ElMessage.error(error.message || '删除失败，请稍后重试')
  }
}

// 生命周期钩子
onMounted(() => {
  loadData()
})

// 导出组件配置
defineExpose({
  loadData
})
</script>

<style scoped>
.main-container {
  display: flex;
  gap: 24px;
  height: 100%;
  padding: 20px;
}

.playlist-aside {
  flex: 0 0 300px;
}

.playlist-info-card {
  padding: 24px;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 12px;
  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.playlist-info-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 6px 24px rgba(0, 0, 0, 0.12);
}

.playlist-cover {
  width: 200px;
  height: 200px;
  margin: 0 auto 20px;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.playlist-cover .el-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.6s ease;
}

.playlist-cover:hover .el-image {
  transform: scale(1.1);
}

.playlist-info-card h2 {
  margin: 0;
  font-size: 24px;
  color: #303133;
  text-align: center;
}

.playlist-info {
  margin: 16px 0;
  color: #606266;
  font-size: 14px;
  text-align: center;
}

.playlist-info span {
  margin: 0 8px;
}

.playlist-description {
  color: #909399;
  font-size: 14px;
  line-height: 1.6;
  margin: 16px 0 0;
  padding-top: 16px;
  border-top: 1px solid #EBEEF5;
}

.playlist-container {
  flex: 1;
  background-color: #fff;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
}

.filter-section {
  display: flex;
  gap: 16px;
  margin-bottom: 24px;
}

.search-input {
  width: 300px;
}

.song-list {
  border-radius: 8px;
  overflow: hidden;
}

.song-header,
.song-item {
  display: grid;
  grid-template-columns: 60px 3fr 120px 2fr 2fr 100px;
  align-items: center;
  padding: 12px 16px;
  gap: 16px;
}

.song-header {
  background-color: #F5F7FA;
  color: #909399;
  font-size: 14px;
  font-weight: 500;
}

.song-item {
  border-bottom: 1px solid #EBEEF5;
  transition: background-color 0.3s;
}

.song-item:hover {
  background-color: #F5F7FA;
}

.song-cover {
  width: 40px;
  height: 40px;
  border-radius: 4px;
  overflow: hidden;
  margin-right: 12px;
}

.col-title {
  display: flex;
  align-items: center;
}

.song-name {
  font-weight: 500;
  color: #303133;
}

.play-icon {
  cursor: pointer;
  color: var(--el-color-primary);
  transition: transform 0.3s ease;
}

.play-icon:hover {
  transform: scale(1.2);
}

.col-actions .el-button {
  padding: 4px 0;
}

.col-actions .el-button:hover {
  color: #F56C6C;
}

.action-buttons {
  display: flex;
  gap: 16px;
  justify-content: flex-start;
  align-items: center;
}

.action-buttons .el-icon {
  font-size: 16px;
  cursor: pointer;
  color: var(--el-text-color-secondary);
  transition: all 0.3s ease;
}

.action-buttons .el-icon:hover {
  color: var(--el-color-primary);
  transform: scale(1.2);
}

.action-buttons .liked {
  color: #ff4757;
  animation: heartBeat 0.3s ease-in-out;
}

@keyframes heartBeat {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1.1); }
}

/* 添加滚动条样式 */
.playlist-container::-webkit-scrollbar {
  width: 6px;
}

.playlist-container::-webkit-scrollbar-thumb {
  background-color: #dcdfe6;
  border-radius: 3px;
}

.playlist-container::-webkit-scrollbar-track {
  background-color: #f5f7fa;
}

.playlist-dialog-content {
  padding: 20px 0;
}

.existing-playlists {
  max-height: 400px;
  overflow: hidden;
  margin: 0 -20px; /* 扩展到对话框边缘 */
}

.playlist-list {
  display: flex;
  flex-direction: column;
}

.playlist-item {
  padding: 16px 20px;
  border-bottom: 1px solid var(--el-border-color-lighter);
  cursor: pointer;
  transition: all 0.3s;
  position: relative;
}

.playlist-item:hover {
  background-color: var(--el-fill-color-light);
}

.playlist-item-selected {
  background-color: var(--el-color-primary-light-9);
}

.playlist-item-selected::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background-color: var(--el-color-primary);
}

.playlist-info-row {
  display: flex;
  gap: 16px;
  width: 100%;
}

.playlist-cover-img {
  width: 64px;
  height: 64px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s;
}

.playlist-item:hover .playlist-cover-img {
  transform: scale(1.05);
}

/* 自定义滚动条样式 */
.existing-playlists :deep(.el-scrollbar__wrap) {
  overflow-x: hidden;
}

.existing-playlists :deep(.el-scrollbar__bar.is-vertical) {
  width: 6px;
}

.existing-playlists :deep(.el-scrollbar__thumb) {
  background-color: var(--el-border-color);
  border-radius: 3px;
}

.existing-playlists :deep(.el-scrollbar__thumb:hover) {
  background-color: var(--el-border-color-darker);
}

/* 选中状态的额外样式 */
.playlist-item-selected .playlist-name {
  color: var(--el-color-primary);
  font-weight: 600;
}

.playlist-item-selected .playlist-description,
.playlist-item-selected .playlist-count {
  color: var(--el-color-primary-light-3);
}

/* 添加动画效果 */
.playlist-item {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.playlist-item:active {
  transform: scale(0.98);
}

.create-playlist {
  margin-top: 20px;
  padding: 0 20px;
}

.create-playlist-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 16px;
}

.mt-3 {
  margin-top: 12px;
}

/* 自定义滚动条样式 */
:deep(.el-scrollbar__wrap) {
  overflow-x: hidden !important;
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .playlist-item {
    padding: 12px 16px;
  }

  .playlist-cover-img {
    width: 48px;
    height: 48px;
  }
}

.edit-btn {
  margin-top: 16px;
  transition: all 0.3s ease;
}

.edit-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.cover-uploader {
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  width: 178px;
  height: 178px;
}

.cover-uploader:hover {
  border-color: #409EFF;
}

.cover-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 178px;
  height: 178px;
  line-height: 178px;
  text-align: center;
}

.cover-preview {
  width: 178px;
  height: 178px;
  display: block;
  object-fit: cover;
}

.dialog-footer {
  margin-top: 20px;
}

/* 优化跳转提示和动画 */
.col-artist,
.col-album {
  cursor: pointer;
  position: relative;
  transition: color 0.3s ease;
}

.col-artist:hover,
.col-album:hover {
  color: var(--el-color-primary);
}

.col-artist::after,
.col-album::after {
  content: '→';
  position: absolute;
  right: -20px;
  opacity: 0;
  transform: translateX(-10px);
  transition: all 0.3s ease;
}

.col-artist:hover::after,
.col-album:hover::after {
  opacity: 1;
  transform: translateX(0);
}
</style>
  


================================================
FILE: pages/MyPlaylist.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <div class="left-section">
            <el-input
              v-model="searchQuery"
              placeholder="搜索歌单"
              class="search-input"
              :prefix-icon="Search"
              clearable
              @clear="handleSearch"
              @keyup.enter="handleSearch"
            />
            <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
              <el-option label="最新" value="latest" />
              <el-option label="最早" value="oldest" />
            </el-select>
          </div>
          <el-button  v-if="isCurrentUser" type="primary" @click="createDialogVisible = true">
            新建歌单
          </el-button>
        </div>

        <!-- 内容区域 -->
        <div class="content-area">
          <!-- 加载状态 -->
          <el-loading 
            v-loading="isLoading"
            element-loading-text="加载中..."
            element-loading-background="rgba(255, 255, 255, 0.8)"
          />

          <!-- 空状态 -->
          <el-empty
            v-if="!isLoading && playlists?.length === 0"
            description="还没有创建歌单"
          />

          <!-- 歌单网格 -->
          <div v-if="playlists?.length > 0" class="playlist-grid">
            <div 
              v-for="playlist in playlists" 
              :key="playlist.id" 
              class="playlist-card"
              @mouseenter="hoveredPlaylist = playlist.id"
              @mouseleave="hoveredPlaylist = null"
            >
              <div class="playlist-cover">
                <el-image 
                  :src="playlist.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                  class="cover-image"
                />
                <div class="playlist-hover-overlay" v-show="hoveredPlaylist === playlist.id">
                  <div class="hover-buttons">
                    <el-button 
                      circle 
                      :icon="View"
                      @click.stop="navigateToDetail(playlist.id)"
                      title="查看详情"
                    />
                    <template v-if="isCurrentUser">
                      <el-button 
                        circle 
                        :icon="Edit"
                        @click.stop="handleEdit(playlist)"
                        title="编辑歌单"
                      />
                      <el-button 
                        circle 
                        :icon="Delete"
                        @click.stop="handleDelete(playlist)"
                        title="删除歌单"
                      />
                    </template>
                  </div>
                </div>
              </div>
              <div class="playlist-info">
                <h3 class="playlist-name" :title="playlist.name">{{ playlist.name }}</h3>
                <p class="playlist-count">{{ playlist.song_count}}首歌曲</p>
                <p class="playlist-creator">创建者：{{ playlist.creator_name }}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- 分页器 -->
        <el-pagination
          v-if="playlists?.length > 0"
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalPlaylists"
          :page-sizes="[12, 24, 36, 48]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />

        <!-- 创建歌单对话框 -->
        <el-dialog
          v-model="createDialogVisible"
          title="创建歌单"
          width="400px"
        >
          <el-form :model="newPlaylist" label-width="80px">
            <el-form-item label="歌单名称">
              <el-input v-model="newPlaylist.name" placeholder="请输入歌单名称" />
            </el-form-item>
            <el-form-item label="描述">
              <el-input
                v-model="newPlaylist.description"
                type="textarea"
                placeholder="请输入歌单描述"
              />
            </el-form-item>
            <el-form-item label="私密">
              <el-switch v-model="newPlaylist.isPublic" :active-value="false" :inactive-value="true" />
            </el-form-item>
          </el-form>
          <template #footer>
            <el-button @click="createDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="submitNewPlaylist">创建</el-button>
          </template>
        </el-dialog>

        <!-- 编辑歌单对话框 -->
        <el-dialog
          v-model="editDialogVisible"
          v-if="isCurrentUser"
          title="编辑歌单"
          width="400px"
          @close="resetEditData"
        >
          <el-form :model="editPlaylistData" label-width="80px">
            <el-form-item label="歌单名称">
              <el-input v-model="editPlaylistData.name" placeholder="请输入歌单名称" />
            </el-form-item>
            <el-form-item label="描述">
              <el-input
                v-model="editPlaylistData.description"
                type="textarea"
                placeholder="请输入歌单描述"
              />
            </el-form-item>
            <el-form-item label="公开">
              <el-switch v-model="editPlaylistData.isPublic" />
            </el-form-item>
          </el-form>
          <template #footer>
            <el-button @click="editDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="submitEditPlaylist">保存</el-button>
          </template>
        </el-dialog>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount, watch, computed } from 'vue'
import { useRouter, useRoute } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import {
  Search,
  VideoPlay,
  Plus,
  Edit,
  Delete,
  View
} from '@element-plus/icons-vue'
import { getMyPlaylists, createPlaylist, deletePlaylist, updatePlaylist, getUserInfo } from '@/api/axiosFile'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { usePlayerStore } from '@/stores/player'

const isCurrentUser = computed(() => {
  return (parseInt(localStorage.getItem('userId'))) === parseInt(route.params.id)
})

// 响应式状态
const currentName = ref('')
const playlists = ref([])
const page = ref(1)
const pageSize = ref(12)
const totalPlaylists = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const hoveredPlaylist = ref(null)
const createDialogVisible = ref(false)
const editDialogVisible = ref(false)
const editPlaylistData = ref({
  name: '',
  description: '',
  isPublic: false
})
const newPlaylist = ref({
  name: '',
  description: '',
  isPublic: false
})
const sortBy = ref('latest')

const router = useRouter()
const playerStore = usePlayerStore()
const route = useRoute()

// 获取用户信息并设置标题
const setPageTitle = async () => {
  try {
    const userId = route.params.id
    const userStr = localStorage.getItem('userId')
    const currentUser = userStr ? JSON.parse(userStr) : null
    
    if (userId === currentUser?.id) {
      currentName.value = '我的歌单'
    } else {
      // 获取目标用户信息
      const response = await getUserInfo(userId)
      if (response.data.message) {
        const targetUser = response.data.data.data
        currentName.value = `${targetUser.name || targetUser.username}的歌单`
      }
    }
  } catch (error) {
    console.error('获取用户信息失败:', error)
    currentName.value = '歌单'
  }
}

// 加载数据
const loadData = async () => {
  isLoading.value = true
  try {
    const response = await getMyPlaylists({
      id: route.params.id,
      page: page.value,
      pageSize: pageSize.value,
      search: searchQuery.value
    })
    if (response.data.message) {
      playlists.value = response.data.data.playlists.map(playlist => ({
        ...playlist,
        songCount: playlist.songCount || 0,
        creator: {
          name: playlist.creatorName || '未知'
        }
      }))
      totalPlaylists.value = response.data.data.total || 0;
    } else {
      throw new Error(response.data.error || '获取数据失败')
    }
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error('加载数据失败，请稍后重试')
    playlists.value = []
    totalPlaylists.value = 0
  } finally {
    isLoading.value = false
  }
}

// 搜索处理
const handleSearch = async () => {
  page.value = 1
  await loadData()
}

// 分页处理
const handlePageChange = async (newPage) => {
  page.value = newPage
  await loadData()
}

const handlePageSizeChange = async (newSize) => {
  pageSize.value = newSize
  page.value = 1
  await loadData()
}

// 创建歌单
const createNewPlaylist = () => {
  createDialogVisible.value = true
}

const submitNewPlaylist = async () => {
  if (!newPlaylist.value.name.trim()) {
    ElMessage.warning('请输入歌单名称')
    return
  }
  try {
    await createPlaylist(newPlaylist.value)
    ElMessage.success('歌单创建成功')
    createDialogVisible.value = false
    newPlaylist.value = { name: '', description: '', isPublic: false }
    await loadData()
  } catch (error) {
    ElMessage.error('创建歌单失败')
  }
}

// 删除歌单
const handleDelete = (playlist) => {
  ElMessageBox.confirm(
    `确定要删除歌单"${playlist.name}"吗？`,
    '删除确认',
    {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning',
    }
  ).then(async () => {
    try {
      const response = await deletePlaylist(playlist.id)
      if (response.data.message) {
        ElMessage.success('删除成功')
        loadData() // 重新加载数据
      } else {
        throw new Error(response.data.error || '删除失败')
      }
    } catch (error) {
      console.error('删除失败:', error)
      ElMessage.error(error.message || '删除失败，请稍后重试')
    }
  }).catch(() => {
    // 用户取消删除
  })
}

// 编辑歌单
const handleEdit = (playlist) => {
  editPlaylistData.value = { ...playlist }
  editDialogVisible.value = true
}

// 提交编辑的歌单
const submitEditPlaylist = async () => {
  try {
    const playlistId = playlists.value.find(p => p.name === editPlaylistData.value.name).id;
    await updatePlaylist(playlistId, editPlaylistData.value)
    ElMessage.success('歌单已更新')
    editDialogVisible.value = false
    await loadData()
  } catch (error) {
    ElMessage.error('更新歌单失败')
  }
}

// 重置编辑数据
const resetEditData = () => {
  editPlaylistData.value = { name: '', description: '', isPublic: false };
}

// 播放歌单
const playPlaylist = (playlist) => {
  if (playlist.songs && playlist.songs.length > 0) {
    playerStore.setPlaylist(playlist.songs)
    playerStore.play(0)
  } else {
    router.push(`/playlist/${playlist.id}`)
  }
}

// 跳转到详情页
const navigateToDetail = (id) => {
  router.push(`/playlist/${id}`)
}

// 生命周期钩子
onMounted(() => {
  setPageTitle()
  loadData()
})

// 监听路由变化，更新标题
watch(() => route.params.id, () => {
  setPageTitle()
})

onBeforeUnmount(() => {
  // 这里可以添加任何需要在组件卸载时清理的逻辑
})
</script>

<style scoped>
@import '../styles/common.css';

/* 主容器 */
.playlist-container {
  height: calc(100vh - 64px - 72px); /* 减去顶部导航和底部播放器的高度 */
  display: flex;
  flex-direction: column;
  position: relative;
  background-color: var(--el-bg-color);
}

/* 搜索和筛选区域 */
.filter-section {
  position: sticky;
  top: 0;
  z-index: 10;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 16px;
  padding: 16px 24px;
  background: var(--el-bg-color);
  border-bottom: 1px solid var(--el-border-color-lighter);
}

.left-section {
  display: flex;
  gap: 16px;
  align-items: center;
}

.search-input {
  width: 300px;
}

/* 内容区域 */
.content-area {
  flex: 1;
  overflow-y: auto;
  padding: 24px;
}

/* 歌单网格布局 */
.playlist-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 24px;
  padding: 24px;
}

/* 歌单卡片 */
.playlist-card {
  background: var(--el-bg-color);
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  transition: transform 0.3s;
}

.playlist-card:hover {
  transform: translateY(-5px);
}

/* 封面区域 */
.playlist-cover {
  position: relative;
  width: 100%;
  padding-top: 100%; /* 1:1 aspect ratio */
}

.cover-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.playlist-hover-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  opacity: 0;
  transition: opacity 0.3s;
}

.playlist-card:hover .playlist-hover-overlay {
  opacity: 1;
}

.hover-buttons {
  display: flex;
  gap: 12px;
  justify-content: center;
  align-items: center;
}

.hover-buttons .el-button {
  --el-button-bg-color: rgba(255, 255, 255, 0.9);
  --el-button-hover-bg-color: var(--el-color-primary);
  --el-button-hover-text-color: #fff;
  transform: scale(0.9);
  transition: all 0.3s;
}

.hover-buttons .el-button:hover {
  transform: scale(1);
}

/* 删除按钮特殊样式 */
.hover-buttons .el-button:last-child:hover {
  --el-button-hover-bg-color: var(--el-color-danger);
}

/* 歌单信息 */
.playlist-info {
  padding: 12px;
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.playlist-name {
  font-size: 14px;
  font-weight: 600;
  color: var(--el-text-color-primary);
  margin: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.playlist-count,
.playlist-creator {
  font-size: 12px;
  color: var(--el-text-color-secondary);
  margin: 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  line-height: 1.5;
}

/* 分页器 */
.pagination {
  position: sticky;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 16px 24px;
  background-color: var(--el-bg-color);
  display: flex;
  justify-content: center;
  border-top: 1px solid var(--el-border-color-lighter);
  z-index: 10;
}

/* 动画效果 */
@keyframes heartBeat {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1.1); }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .filter-section {
    flex-direction: column;
    align-items: stretch;
  }

  .left-section {
    flex-direction: column;
  }

  .search-input {
    width: 100%;
  }

  .playlist-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 16px;
    padding: 16px;
  }
}
</style>


================================================
FILE: pages/Player.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <div class="player-content">
          <!-- 旋转的专辑封面 -->
          <div class="album-container" :class="{ 'is-playing': isPlaying }">
            <div class="album-cover">
              <el-image 
                :src="currentSong?.cover || '/assets/default-cover.jpg'"
                fit="cover"
              />
            </div>
          </div>

          <!-- 歌曲信息 -->
          <div class="song-info">
            <h2 class="song-name">{{ currentSong?.name || '未播放' }}</h2>
            <p class="song-artist">{{ currentSong?.artist || '未知歌手' }}</p>
          </div>

          <!-- 播放控制 -->
          <div class="player-controls">
            <el-button circle @click="previousSong">
              <el-icon><ArrowLeft /></el-icon>
            </el-button>
            <el-button circle @click="togglePlay">
              <el-icon>
                <VideoPlay v-if="!isPlaying" />
                <VideoPause v-else />
              </el-icon>
            </el-button>
            <el-button circle @click="nextSong">
              <el-icon><ArrowRight /></el-icon>
            </el-button>
          </div>

          <!-- 音频控制器 -->
          <audio 
            v-if="currentSong" 
            :src="currentSong.url" 
            ref="audioPlayer"
            @play="handlePlay"
            @pause="handlePause"
            @ended="handleEnded"
            @timeupdate="handleTimeUpdate"
            controls 
            class="audio-player"
          ></audio>
        </div>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, computed } from 'vue'
import { useRouter } from 'vue-router'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { usePlayerStore } from '@/stores/player'
import { 
  ArrowLeft, 
  ArrowRight, 
  VideoPlay, 
  VideoPause 
} from '@element-plus/icons-vue'

const router = useRouter()
const playerStore = usePlayerStore()
const currentName = ref('正在播放')

const currentSong = computed(() => playerStore.getCurrentSong)
const isPlaying = computed(() => playerStore.getIsPlaying)

const togglePlay = () => {
  if (isPlaying.value) {
    playerStore.pause()
  } else {
    playerStore.resume()
  }
}

const previousSong = () => {
  playerStore.previous()
}

const nextSong = () => {
  playerStore.next()
}

const handlePlay = () => {
  playerStore.resume()
}

const handlePause = () => {
  playerStore.pause()
}

const handleEnded = () => {
  playerStore.next()
}

const handleTimeUpdate = (event) => {
  // 可以在这里处理播放进度更新
}
</script>

<style scoped>
@import '../styles/common.css';

.player-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 70vh;
  padding: 20px;
}

.album-container {
  width: 300px;
  height: 300px;
  margin-bottom: 30px;
  perspective: 1000px;
}

.album-cover {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  overflow: hidden;
  box-shadow: 0 0 20px rgba(0,0,0,0.2);
  transition: transform 0.3s ease;
}

.album-cover .el-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* 旋转动画 */
.is-playing .album-cover {
  animation: rotate 20s linear infinite;
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.song-info {
  text-align: center;
  margin-bottom: 30px;
}

.song-name {
  font-size: 24px;
  font-weight: 600;
  margin: 0 0 8px;
}

.song-artist {
  font-size: 16px;
  color: #666;
  margin: 0;
}

.player-controls {
  display: flex;
  gap: 16px;
  margin-bottom: 24px;
}

.audio-player {
  width: 80%;
  max-width: 500px;
}

/* 自定义音频控制器样式 */
.audio-player::-webkit-media-controls-panel {
  background-color: #f5f7fa;
}

.audio-player::-webkit-media-controls-play-button {
  background-color: #409EFF;
  border-radius: 50%;
}

.audio-player::-webkit-media-controls-current-time-display,
.audio-player::-webkit-media-controls-time-remaining-display {
  color: #606266;
}
</style> 


================================================
FILE: pages/PublicPlaylist.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container" v-loading="isLoading">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <el-input
            v-model="searchQuery"
            placeholder="搜索歌曲、歌手、专辑"
            class="search-input"
            :prefix-icon="Search"
            clearable
            @clear="handleSearch"
            @keyup.enter="handleSearch"
          />
          <el-select v-model="sortBy" placeholder="排序方式" @change="handleSearch">
            <el-option label="最新" value="latest" />
            <el-option label="最热" value="popular" />
          </el-select>
        </div>

        <!-- 当没有数据时显示空状态 -->
        <el-empty
          v-if="!isLoading && songs.length === 0"
          description="暂无歌曲"
        />

        <!-- 歌曲列表 -->
        <div class="song-list">
          <!-- 表头 -->
          <div class="song-header">
            <div class="col-index">#</div>
            <div class="col-title">标题</div>
            <div class="col-duration">时长</div>
            <div class="col-artist">歌手</div>
            <div class="col-album">专辑</div>
          </div>

          <!-- 歌曲列表项 -->
          <div 
            v-for="(song, index) in songs" 
            :key="song.id" 
            class="song-item"
            @mouseenter="hoveredSong = song.id"
            @mouseleave="hoveredSong = null"
            @click="handlePlaySong(song)"
          >
            <!-- 序号/播放按钮 -->
            <div class="col-index">
              <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
              <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
            </div>

            <!-- 歌曲信息 -->
            <div class="col-title">
              <div class="song-cover" @click="goToPlayer(song)">
                <el-image 
                  :src="song.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <span class="song-name">{{ song.name }}</span>
            </div>

            <!-- 时长/操作按钮 -->
            <div class="col-duration">
              <template v-if="hoveredSong !== song.id">
                {{ formatDuration(song.duration) }}
              </template>
              <div v-else class="action-buttons">
                <el-tooltip content="喜欢" placement="top">
                  <el-icon 
                    @click="likeSong(song)" 
                    :class="{ 'liked': likedSongs.includes(song.id) }" 
                  >
                    <Star />
                  </el-icon>
                </el-tooltip>
                <el-tooltip content="添加到播放列表" placement="top">
                  <el-icon @click="addToPlaylist(song)"><Plus /></el-icon>
                </el-tooltip>
                <!-- <el-tooltip content="收藏专辑" placement="top">
                  <el-icon @click="addAlbum(song)"><FolderAdd /></el-icon>
                </el-tooltip> -->
                <el-tooltip content="评论" placement="top">
                  <el-icon @click="goToComment(song)"><ChatDotRound /></el-icon>
                </el-tooltip>
                <el-tooltip content="下载" placement="top">
                  <el-icon @click="downloadSong(song)"><Download /></el-icon>
                </el-tooltip>
              </div>
            </div>


            <!-- 歌手 -->
            <div class="col-artist" @click="goToArtist(song.author_id)">
              {{ song.artist }}
            </div>

            <!-- 专辑 -->
            <div class="col-album" @click="goToAlbum(song.album_id)">
              {{ song.album }}
            </div>
          </div>
        </div>

        <!-- 分页器 -->
        <el-pagination
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalSongs"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />
      </div>

      <!-- 封面预览弹窗 -->
      <el-dialog
        v-model="coverDialogVisible"
        :title="selectedSong?.name"
        width="400px"
        align-center
      >
        <div class="cover-preview">
          <el-image
            :src="selectedSong?.cover || '/assets/default-cover.jpg'"
            fit="cover"
          />
        </div>
      </el-dialog>

      <!-- 添加到播放列表弹窗 -->
      <el-dialog
        v-model="playlistDialogVisible"
        title="添加到歌单"
        width="600px"
        @close="selectedPlaylist = null"
      >
        <div class="playlist-dialog-content">
          <!-- 现有歌单列表，设置为可见之后弹出 -->
          <div class="existing-playlists">
            <el-scrollbar height="400px">
              <div class="playlist-list">
                <div 
                  v-for="playlist in userPlaylists" 
                  :key="playlist.id" 
                  class="playlist-item"
                  :class="{ 'playlist-item-selected': selectedPlaylist === playlist.id }"
                  @click="selectedPlaylist = playlist.id"
                >
                  <div class="playlist-info-row">
                    <el-image 
                      :src="playlist.cover || '/assets/default-cover.jpg'" 
                      class="playlist-cover-img"
                    />
                    <div class="playlist-details">
                      <div class="playlist-name">{{ playlist.name }}</div>
                      <div class="playlist-description">{{ playlist.description || '暂无描述' }}</div>
                      <div class="playlist-count">{{ playlist.song_count || 0 }}首歌曲</div>
                    </div>
                  </div>
                </div>
              </div>
            </el-scrollbar>
          </div>

          <!-- 创建新歌单 -->
          <div class="create-playlist">
            <el-divider>创建新歌单</el-divider>
            <div class="create-playlist-form">
              <el-input
                v-model="newPlaylistName"
                placeholder="请输入歌单名称"
                clearable
              />
              <el-input
                v-model="newPlaylistDescription"
                type="textarea"
                :rows="2"
                placeholder="添加歌单描述（选填）"
                class="mt-3"
              />
              <el-button type="primary" @click="createNewPlaylist" class="mt-3">
                创建
              </el-button>
            </div>
          </div>
        </div>
        <template #footer>
          <span class="dialog-footer">
            <el-button @click="playlistDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="confirmAddToPlaylist">
              确定
            </el-button>
          </span>
        </template>
      </el-dialog>

    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { 
  Search, 
  VideoPlay, 
  Star, 
  Plus, 
  FolderAdd, 
  ChatDotRound, 
  Download 
} from '@element-plus/icons-vue'
import { 
  getSongs, 
  getLikedSongsById, 
  addLikedSong, 
  removeLikedSong,
  getMyPlaylists, 
  createPlaylist, 
  addSongToPlaylist 
} from '@/api/axiosFile'
import { usePlayerStore } from '@/stores/player'
import CommonLayout from '@/layouts/CommonLayout.vue'

const router = useRouter()
const playerStore = usePlayerStore()

// 基础数据
const currentName = ref('公共歌单')
const songs = ref([])
const page = ref(1)
const pageSize = ref(10)
const totalSongs = ref(0)
const isLoading = ref(false)
const searchQuery = ref('')
const sortBy = ref('latest')
const hoveredSong = ref(null)
const likedSongs = ref([])
const coverDialogVisible = ref(false)
const playlistDialogVisible = ref(false)
const selectedSong = ref(null)
const selectedPlaylist = ref(null)
const newPlaylistName = ref('')
const newPlaylistDescription = ref('')
const userPlaylists = ref([])

// 方法定义
const loadData = async () => {
  isLoading.value = true
  try {
    // 1. 获取歌曲列表
    const songsResponse = await getSongs({
      page: page.value,
      pageSize: pageSize.value,
      search: searchQuery.value,
      sortBy: sortBy.value
    })
    //此处已经在后端处理了多表查询了，所以这里不需要再处理
    if (!songsResponse.data.message) {
      throw new Error(songsResponse.data.error || '获取歌曲列表失败')
    }
    
    const songsData = songsResponse.data.data
    totalSongs.value = songsData.total
    const songsList = songsData.list || []

    // 2. 获取喜欢列表
    const userId = localStorage.getItem('userId')
    const likedResponse = await getLikedSongsById(userId)
    if (likedResponse.data.message) {
      likedSongs.value = likedResponse.data.data || []
    }

    
    // 3. 组装完整的歌曲信息,只是重新处理罢了
    songs.value = songsList.map(song => {
      return {
        ...song,
        artist: song.artist_name ? song.artist_name : '未知歌手',
        album: song.album_name ? song.album_name : '未知专辑',
        cover: song.album_cover ? song.album_cover : '/assets/default-cover.jpg',
        duration: song.duration || 0
      }
    })
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error(error.message || '加载数据失败，请稍后重试')
  } finally {
    isLoading.value = false
  }
}

const handlePlaySong = (song) => {
  playerStore.setPlaylist([song])
  playerStore.play(0)
}

const likeSong = async (song) => {
  try {
    if (likedSongs.value.includes(song.id)) {
      await removeLikedSong(song.id)
      likedSongs.value = likedSongs.value.filter(id => id !== song.id)
      ElMessage.success(`已取消喜欢: ${song.name}`)
    } else {
      await addLikedSong(song.id)
      likedSongs.value.push(song.id)
      ElMessage.success(`已添加到我喜欢: ${song.name}`)
    }
  } catch (error) {
    console.error('操作失败:', error)
    ElMessage.error('操作失败，请稍后重试')
  }
}

const addToPlaylist = async (song) => {
  selectedSong.value = song
  playlistDialogVisible.value = true
  //在这里修改显示状态，然后弹出一个弹窗
  try {
    const response = await getMyPlaylists({
      id: parseInt(localStorage.getItem('userId')),
    })
    if (response.data.message) {
      
      userPlaylists.value = response.data.data.playlists
    } else {
      throw new Error(response.data.error || '获取歌单失败')
    }
  } catch (error) {
    console.error('获取歌单失败:', error)
    ElMessage.error(error.message || '获取歌单失败，请稍后重试')
  }
}

const createNewPlaylist = async () => {
  if (!newPlaylistName.value.trim()) {
    ElMessage.warning('请输入歌单名称')
    return
  }

  try {
    const response = await createPlaylist({
      name: newPlaylistName.value,
      description: newPlaylistDescription.value,
      isPublic: false
    })

    if (response.data.message) {
      userPlaylists.value.unshift({
        ...response.data.data,
        songCount: 0
      })
      selectedPlaylist.value = response.data.data.id
      newPlaylistName.value = ''
      newPlaylistDescription.value = ''
      ElMessage.success('歌单创建成功')
    } else {
      throw new Error(response.data.error || '创建歌单失败')
    }
  } catch (error) {
    console.error('创建歌单失败:', error)
    ElMessage.error(error.message || '创建歌单失败，请稍后重试')
  }
}

const confirmAddToPlaylist = async () => {
  if (!selectedPlaylist.value) {
    ElMessage.warning('请选择歌单')
    return
  }

  try {
    const response = await addSongToPlaylist(selectedPlaylist.value, selectedSong.value.id)
    if (response.data.message) {
      ElMessage.success('添加成功')
      playlistDialogVisible.value = false
      selectedPlaylist.value = null
    } else {
      throw new Error(response.data.error || '添加失败')
    }
  } catch (error) {
    console.error('添加失败:', error)
    ElMessage.error(error.message || '添加失败，请稍后重试')
  }
}

const formatDuration = (seconds) => {
  const minutes = Math.floor(seconds / 60)
  const remainingSeconds = seconds % 60
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
}

const handleSearch = () => {
  page.value = 1
  loadData()
}

const handlePageChange = (newPage) => {
  page.value = newPage
  loadData()
}

const handlePageSizeChange = (newSize) => {
  pageSize.value = newSize
  page.value = 1
  loadData()
}

const showCover = (song) => {
  selectedSong.value = song
  coverDialogVisible.value = true
}

const goToArtist = (artistId) => {
  if (artistId) {
    router.push(`/artist/${artistId}`)
  }
  else{
    ElMessage.error("歌手不存在!")
  }
}

const goToAlbum = (albumId) => {
  if (albumId) {
    router.push(`/album/${albumId}`)
  }
  else{
    ElMessage.error("专辑不存在!")
  }
}

const goToPlayer = (song) => {
  handlePlaySong(song) // 点击封面时同时开始播放
  router.push('/player')
}

const goToComment = (song) => {
  router.push(`/comment/${song.id}`)
}

// 生命周期钩子
onMounted(() => {
  loadData()
})

// 导出组件配置
defineExpose({
  loadData
})
</script>

<style scoped>
.playlist-container {
  padding: 24px 32px;
  margin-right: 16px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
  /* 添加滚动容器 */
  height: 100%;
  overflow-y: auto;
  /* 确保内容不会被播放器遮挡 */
  padding-bottom: 100px;
}

.filter-section {
  display: flex;
  gap: 20px;
  margin-bottom: 24px;
  align-items: center;
}

.search-input {
  width: 300px;
}

.song-list {
  margin-top: 20px;
  border: 1px solid #ebeef5;
  border-radius: 4px;
  overflow: hidden; /* 确保圆角生效 */
}

/* 表头样式 */
.song-header {
  position: sticky;
  top: 0;
  display: grid;
  grid-template-columns: 60px minmax(300px, 2.5fr) 180px minmax(160px, 1fr) minmax(160px, 1fr);
  padding: 12px 24px;
  background-color: #f5f7fa;
  border-bottom: 1px solid #ebeef5;
  font-weight: 600;
  color: #606266;
  align-items: center;
  z-index: 1;
  gap: 12px;
}

/* 歌曲项样式 */
.song-item {
  display: grid;
  grid-template-columns: 60px minmax(300px, 2.5fr) 180px minmax(160px, 1fr) minmax(160px, 1fr);
  padding: 12px 24px;
  border-bottom: 1px solid #ebeef5;
  align-items: center;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.song-item:hover {
  background-color: #f5f7fa;
  transform: translateX(4px);
}

/* 序号列 */
.col-index {
  text-align: center;
  color: #909399;
  font-size: 14px;
}

/* 标题列 */
.col-title {
  display: flex;
  align-items: center;
  gap: 16px;
  min-width: 0; /* 防止内容溢出 */
}

.song-cover {
  width: 48px;
  height: 48px;
  border-radius: 6px;
  overflow: hidden;
  flex-shrink: 0; /* 防止图片被压缩 */
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.song-cover:hover {
  transform: scale(1.05) rotate(2deg);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.song-name {
  font-weight: 500;
  color: #303133;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* 时长列 */
.col-duration {
  min-width: 180px;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  padding-right: 24px;
}

/* 歌手和专辑列 */
.col-artist, .col-album {
  padding: 0 12px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: pointer;
  color: #606266;
}

.col-artist:hover, .col-album:hover {
  color: #409EFF;
}

/* 操作按钮 */
.action-buttons {
  display: flex;
  gap: 20px;
  justify-content: flex-start;
  align-items: center;
}

.action-buttons .el-icon {
  font-size: 16px;
  cursor: pointer;
  color: #606266;
  transition: all 0.3s;
}

.action-buttons .el-icon.is-liked {
  color: #ffcc00;
}

.action-buttons .el-icon:hover {
  color: #409EFF;
}

/* 喜欢图标特殊样式 */
.liked {
  color: #ffcc00 !important;
  transform: scale(1.1);
  animation: heartBeat 0.3s ease-in-out;
}

/* 播放图标 */
.play-icon {
  color: var(--el-color-primary);
  font-size: 20px;
}

.play-icon:hover {
  animation: pulse 1s infinite;
}

/* 分页器 */
.pagination {
  position: sticky;
  bottom: 0;
  margin-top: 24px;
  padding: 16px 0;
  background-color: #fff;
  display: flex;
  justify-content: center;
  box-shadow: 0 -2px 12px 0 rgba(0, 0, 0, 0.05);
}

/* 动画效果 */
@keyframes heartBeat {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1.1); }
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

/* 响应式设计 */
@media screen and (max-width: 1200px) {
  .song-header, .song-item {
    grid-template-columns: 60px 2.5fr 100px 1.2fr 1.2fr 120px;
  }
}

@media screen and (max-width: 768px) {
  .song-header, .song-item {
    grid-template-columns: 50px 3fr 1.5fr 100px;
  }
  
  .col-album, .col-duration {
    display: none;
  }
  
  .filter-section {
    flex-direction: column;
    align-items: stretch;
  }
  
  .search-input {
    width: 100%;
  }
}

/* 添加滚动条样式 */
.playlist-container::-webkit-scrollbar {
  width: 6px;
}

.playlist-container::-webkit-scrollbar-thumb {
  background-color: #dcdfe6;
  border-radius: 3px;
}

.playlist-container::-webkit-scrollbar-track {
  background-color: #f5f7fa;
}

.playlist-dialog-content {
  padding: 20px 0;
}

.existing-playlists {
  max-height: 400px;
  overflow: hidden;
  margin: 0 -20px; /* 扩展到对话框边缘 */
}

.playlist-list {
  display: flex;
  flex-direction: column;
}

.playlist-item {
  padding: 16px 20px;
  border-bottom: 1px solid var(--el-border-color-lighter);
  cursor: pointer;
  transition: all 0.3s;
  position: relative;
}

.playlist-item:hover {
  background-color: var(--el-fill-color-light);
}

.playlist-item-selected {
  background-color: var(--el-color-primary-light-9);
}

.playlist-item-selected::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 4px;
  background-color: var(--el-color-primary);
}

.playlist-info-row {
  display: flex;
  gap: 16px;
  width: 100%;
}

.playlist-cover-img {
  width: 64px;
  height: 64px;
  border-radius: 6px;
  object-fit: cover;
  flex-shrink: 0;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s;
}

.playlist-item:hover .playlist-cover-img {
  transform: scale(1.05);
}

/* 自定义滚动条样式 */
.existing-playlists :deep(.el-scrollbar__wrap) {
  overflow-x: hidden;
}

.existing-playlists :deep(.el-scrollbar__bar.is-vertical) {
  width: 6px;
}

.existing-playlists :deep(.el-scrollbar__thumb) {
  background-color: var(--el-border-color);
  border-radius: 3px;
}

.existing-playlists :deep(.el-scrollbar__thumb:hover) {
  background-color: var(--el-border-color-darker);
}

/* 选中状态的额外样式 */
.playlist-item-selected .playlist-name {
  color: var(--el-color-primary);
  font-weight: 600;
}

.playlist-item-selected .playlist-description,
.playlist-item-selected .playlist-count {
  color: var(--el-color-primary-light-3);
}

/* 添加动画效果 */
.playlist-item {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.playlist-item:active {
  transform: scale(0.98);
}

.create-playlist {
  margin-top: 20px;
  padding: 0 20px;
}

.create-playlist-form {
  display: flex;
  flex-direction: column;
  gap: 12px;
  margin-top: 16px;
}

.mt-3 {
  margin-top: 12px;
}

/* 自定义滚动条样式 */
:deep(.el-scrollbar__wrap) {
  overflow-x: hidden !important;
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .playlist-item {
    padding: 12px 16px;
  }

  .playlist-cover-img {
    width: 48px;
    height: 48px;
  }
}
</style>



================================================
FILE: pages/Register.vue
================================================
<template>
  <div class="register-container">
    <div class="register-wrapper">
      <!-- 左侧装饰区域 -->
      <div class="register-decoration">
        <div class="decoration-content">
          <h1>开启音乐之旅</h1>
          <p>注册账号，探索更多精彩</p>
        </div>
      </div>

      <!-- 右侧注册表单 -->
      <div class="register-form-container">
        <el-card class="register-card" :body-style="{ padding: '40px' }">
          <div class="register-header">
            <h2>创建账号</h2>
            <p class="subtitle">请填写以下信息完成注册</p>
          </div>

          <el-form 
            :model="registerForm" 
            :rules="rules"
            ref="registerFormRef"
            class="register-form"
          >
            <el-form-item prop="username">
              <el-input
                v-model="registerForm.username"
                placeholder="用户名"
                :prefix-icon="User"
                size="large"
              />
            </el-form-item>

            <el-form-item prop="password">
              <el-input
                v-model="registerForm.password"
                type="password"
                placeholder="密码"
                :prefix-icon="Lock"
                size="large"
                show-password
              />
            </el-form-item>

            <el-form-item prop="confirmPassword">
              <el-input
                v-model="registerForm.confirmPassword"
                type="password"
                placeholder="确认密码"
                :prefix-icon="Lock"
                size="large"
                show-password
              />
            </el-form-item>

            <el-form-item prop="name">
              <el-input
                v-model="registerForm.name"
                placeholder="昵称"
                :prefix-icon="User"
                size="large"
              />
            </el-form-item>

            <el-form-item prop="email">
              <el-input
                v-model="registerForm.email"
                placeholder="邮箱"
                :prefix-icon="Message"
                size="large"
              />
            </el-form-item>

            <el-form-item prop="phone">
              <el-input
                v-model="registerForm.phone"
                placeholder="手机号码"
                :prefix-icon="Phone"
                size="large"
              />
            </el-form-item>

            <el-form-item prop="gender">
              <el-select
                v-model="registerForm.gender"
                placeholder="性别"
                size="large"
                style="width: 100%"
              >
                <el-option label="保密" :value="0" />
                <el-option label="男" :value="1" />
                <el-option label="女" :value="2" />
              </el-select>
            </el-form-item>

            <el-form-item prop="birthday">
              <el-date-picker
                v-model="registerForm.birthday"
                type="date"
                placeholder="选择生日"
                size="large"
                style="width: 100%"
              />
            </el-form-item>

            <el-form-item prop="location">
              <el-input
                v-model="registerForm.location"
                placeholder="所在地"
                :prefix-icon="Location"
                size="large"
              />
            </el-form-item>

            <el-form-item prop="bio">
              <el-input
                v-model="registerForm.bio"
                type="textarea"
                placeholder="个人简介"
                :rows="3"
              />
            </el-form-item>

            <el-button
              type="primary"
              :loading="loading"
              @click="handleRegister"
              class="register-button"
              size="large"
            >
              {{ loading ? '注册中...' : '立即注册' }}
            </el-button>

            <div class="login-link">
              已有账号？
              <router-link to="/login" class="login-button">
                立即登录
              </router-link>
            </div>
          </el-form>
        </el-card>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { User, Lock, Message, Phone, Location } from '@element-plus/icons-vue'
import { register } from '@/api/axiosFile'

const router = useRouter()
const registerFormRef = ref(null)

const registerForm = ref({
  username: '',
  password: '',
  confirmPassword: '',
  name: '',
  email: '',
  phone: '',
  gender: 0,
  birthday: '',
  location: '',
  bio: '',
  avatar: '/assets/avatars/default-user.jpg',
  status: 1
})

const validatePass2 = (rule, value, callback) => {
  if (value === '') {
    callback(new Error('请再次输入密码'))
  } else if (value !== registerForm.value.password) {
    callback(new Error('两次输入密码不一致!'))
  } else {
    callback()
  }
}

const rules = {
  username: [
    { required: true, message: '请输入用户名', trigger: 'blur' },
    { min: 3, max: 20, message: '长度在 3 到 20 个字符', trigger: 'blur' }
  ],
  password: [
    { required: true, message: '请输入密码', trigger: 'blur' },
    { min: 6, message: '密码长度不能少于6位', trigger: 'blur' }
  ],
  confirmPassword: [
    { required: true, validator: validatePass2, trigger: 'blur' }
  ],
  email: [
    { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }
  ],
  phone: [
    { pattern: /^1[3-9]\d{9}$/, message: '请输入正确的手机号码', trigger: 'blur' }
  ],
  name: [
    { max: 50, message: '姓名长度不能超过50个字符', trigger: 'blur' }
  ],
  bio: [
    { max: 500, message: '个人简介不能超过500个字符', trigger: 'blur' }
  ],
  location: [
    { max: 100, message: '地址长度不能超过100个字符', trigger: 'blur' }
  ]
}

const loading = ref(false)

const handleRegister = async () => {
  if (!registerFormRef.value) return
  
  try {
    await registerFormRef.value.validate()
    
    loading.value = true
    const { confirmPassword, ...registerData } = registerForm.value
    
    // 转换日期格式
    if (registerData.birthday) {
      registerData.birthday = registerData.birthday.toISOString().split('T')[0]
    }
    
    const result = await register(registerData)
    if (result.data.message) {
      ElMessage.success('注册成功')
      router.push('/login')
    } else {
      throw new Error(result.data.error || '注册失败')
    }
  } catch (error) {
    console.error('注册失败:', error)
    ElMessage.error(error.message || '注册失败，请稍后重试')
  } finally {
    loading.value = false
  }
}
</script>

<style scoped>
.register-container {
  min-height: 100vh;
  background: linear-gradient(120deg, #a1c4fd 0%, #c2e9fb 100%);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  animation: gradientBG 15s ease infinite;
  background-size: 400% 400%;
}

.register-wrapper {
  display: flex;
  width: 1200px;
  max-width: 100%;
  background: rgba(255, 255, 255, 0.95);
  border-radius: 20px;
  overflow: hidden;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);
  backdrop-filter: blur(10px);
  transform: translateY(0);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.register-wrapper:hover {
  transform: translateY(-5px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.12), 0 8px 20px rgba(0, 0, 0, 0.09);
}

.register-decoration {
  flex: 0.8;
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  padding: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  position: relative;
  overflow: hidden;
}

.register-decoration::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
  transform: translateX(-100%);
  animation: shimmer 3s infinite;
}

.decoration-content {
  text-align: center;
  position: relative;
  z-index: 1;
}

.decoration-content h1 {
  font-size: 2.8em;
  margin-bottom: 20px;
  font-weight: 600;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.2);
  animation: slideInLeft 0.8s ease-out;
}

.decoration-content p {
  font-size: 1.4em;
  opacity: 0.95;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.15);
  animation: slideInLeft 0.8s ease-out 0.2s backwards;
}

.register-form-container {
  flex: 1.2;
  padding: 60px;
  background: #ffffff;
  overflow-y: auto;
  max-height: 90vh;
}

.register-card {
  box-shadow: none !important;
  border: none !important;
  width: 100%;
  max-width: 500px;
  margin: 0 auto;
  animation: fadeIn 0.8s ease-out;
}

.register-header {
  text-align: center;
  margin-bottom: 40px;
}

.register-header h2 {
  font-size: 28px;
  color: #2c3e50;
  margin-bottom: 12px;
  font-weight: 600;
  animation: slideInDown 0.6s ease-out;
}

.subtitle {
  color: #7f8c8d;
  font-size: 16px;
  animation: slideInDown 0.6s ease-out 0.1s backwards;
}

.register-form :deep(.el-input__wrapper) {
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.03);
  border-radius: 12px;
  padding: 0 15px;
  transition: all 0.3s ease;
}

.register-form :deep(.el-input__wrapper:hover) {
  transform: translateY(-1px);
  box-shadow: 0 4px 16px 0 rgba(0, 0, 0, 0.06);
}

.register-form :deep(.el-input__inner) {
  height: 48px;
  font-size: 16px;
}

.register-form :deep(.el-form-item) {
  margin-bottom: 25px;
  animation: slideInRight 0.6s ease-out calc(var(--el-transition-duration) * 0.1s) backwards;
}

.register-button {
  width: 100%;
  height: 48px;
  border-radius: 12px;
  font-size: 16px;
  margin-top: 30px;
  font-weight: 500;
  background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
  border: none;
  transition: all 0.3s ease;
  animation: slideInUp 0.6s ease-out 0.4s backwards;
}

.register-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(106, 17, 203, 0.3);
}

.register-button:active {
  transform: translateY(0);
}

.login-link {
  text-align: center;
  margin-top: 25px;
  color: #7f8c8d;
  font-size: 15px;
  animation: fadeIn 0.6s ease-out 0.5s backwards;
}

.login-button {
  color: #6a11cb;
  text-decoration: none;
  font-weight: 500;
  margin-left: 5px;
  transition: all 0.3s ease;
}

.login-button:hover {
  color: #2575fc;
  text-decoration: none;
}

/* 滚动条样式 */
.register-form-container::-webkit-scrollbar {
  width: 6px;
}

.register-form-container::-webkit-scrollbar-thumb {
  background-color: #cbd5e0;
  border-radius: 3px;
}

.register-form-container::-webkit-scrollbar-track {
  background-color: #f7fafc;
}

/* 响应式设计 */
@media (max-width: 992px) {
  .register-wrapper {
    flex-direction: column;
  }

  .register-decoration {
    padding: 40px 20px;
    min-height: 200px;
  }

  .register-form-container {
    padding: 30px 20px;
  }
}

/* 动画关键帧 */
@keyframes gradientBG {
  0% { background-position: 0% 50% }
  50% { background-position: 100% 50% }
  100% { background-position: 0% 50% }
}

@keyframes shimmer {
  0% { transform: translateX(-100%) }
  100% { transform: translateX(100%) }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style> 


================================================
FILE: pages/Uploaded.vue
================================================
<template>
  <CommonLayout :page-name="currentName">
    <template #main>
      <div class="playlist-container">
        <!-- 搜索和筛选区域 -->
        <div class="filter-section">
          <el-input
            v-model="searchQuery"
            placeholder="搜索上传的音乐"
            class="search-input"
            :prefix-icon="Search"
            clearable
            @clear="handleSearch"
            @keyup.enter="handleSearch"
          />
          <el-button type="primary" @click="uploadMusic">
            <el-icon><Upload /></el-icon>上传音乐
          </el-button>
        </div>

        <!-- 加载状态 -->
        <el-loading 
          :visible="isLoading"
          element-loading-text="加载中..."
          element-loading-background="rgba(255, 255, 255, 0.8)"
        />

        <!-- 空状态 -->
        <el-empty
          v-if="!isLoading && songs.length === 0"
          description="还没有上传音乐"
        >
          <el-button type="primary" @click="uploadMusic">上传音乐</el-button>
        </el-empty>

        <!-- 歌曲列表 -->
        <div class="song-list" v-if="songs.length > 0">
          <div class="song-header">
            <div class="col-index">#</div>
            <div class="col-title">标题</div>
            <div class="col-duration">时长</div>
            <div class="col-artist">歌手</div>
            <div class="col-album">专辑</div>
            <div class="col-status">状态</div>
          </div>

          <div 
            v-for="(song, index) in songs" 
            :key="song.id" 
            class="song-item"
            @mouseenter="hoveredSong = song.id"
            @mouseleave="hoveredSong = null"
          >
            <div class="col-index">
              <span v-if="hoveredSong !== song.id">{{ (page - 1) * pageSize + index + 1 }}</span>
              <el-icon v-else class="play-icon" @click="handlePlaySong(song)"><VideoPlay /></el-icon>
            </div>

            <div class="col-title">
              <div class="song-cover">
                <el-image 
                  :src="song.cover || '/assets/default-cover.jpg'"
                  fit="cover"
                />
              </div>
              <span class="song-name">{{ song.name }}</span>
            </div>

            <div class="col-duration">
              <template v-if="hoveredSong !== song.id">
                {{ formatDuration(song.duration) }}
              </template>
              <div v-else class="action-buttons">
                <el-tooltip content="编辑" placement="top">
                  <el-icon @click="editSong(song)"><Edit /></el-icon>
                </el-tooltip>
                <el-tooltip content="删除" placement="top">
                  <el-icon @click="deleteSong(song)"><Delete /></el-icon>
                </el-tooltip>
              </div>
            </div>

            <div class="col-artist">{{ song.artist }}</div>
            <div class="col-album">{{ song.album }}</div>
            <div class="col-status">
              <el-tag :type="song.status === 'approved' ? 'success' : 'warning'">
                {{ song.status === 'approved' ? '已通过' : '审核中' }}
              </el-tag>
            </div>
          </div>
        </div>

        <!-- 分页器 -->
        <el-pagination
          v-if="songs.length > 0"
          v-model:current-page="page"
          v-model:page-size="pageSize"
          :total="totalSongs"
          :page-sizes="[10, 20, 30, 50]"
          layout="total, sizes, prev, pager, next"
          class="pagination"
          @size-change="handlePageSizeChange"
          @current-change="handlePageChange"
        />

        <!-- 上传音乐对话框 -->
        <el-dialog
          v-model="uploadDialogVisible"
          title="上传音乐"
          width="500px"
        >
          <el-form :model="uploadForm" label-width="80px">
            <el-form-item label="音乐文件">
              <el-upload
                class="upload-demo"
                drag
                action="/upload"
                :auto-upload="false"
                :on-change="handleFileChange"
              >
                <el-icon class="el-icon--upload"><upload-filled /></el-icon>
                <div class="el-upload__text">
                  将文件拖到此处，或<em>点击上传</em>
                </div>
                <template #tip>
                  <div class="el-upload__tip">
                    支持 mp3 格式，单个文件不超过 20MB
                  </div>
                </template>
              </el-upload>
            </el-form-item>
            <el-form-item label="歌曲名称">
              <el-input v-model="uploadForm.name" />
            </el-form-item>
            <el-form-item label="歌手">
              <el-input v-model="uploadForm.artist" />
            </el-form-item>
            <el-form-item label="专辑">
              <el-input v-model="uploadForm.album" />
            </el-form-item>
          </el-form>
          <template #footer>
            <el-button @click="uploadDialogVisible = false">取消</el-button>
            <el-button type="primary" @click="submitUpload">上传</el-button>
          </template>
        </el-dialog>
      </div>
    </template>
  </CommonLayout>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import CommonLayout from '@/layouts/CommonLayout.vue'
import { ElMessage } from 'element-plus'
import { Search } from '@element-plus/icons-vue'
import { usePlayerStore } from '@/stores/player'

const playerStore = usePlayerStore()

const currentName = ref('我的上传')
const songs = ref([])
const isLoading = ref(false)
const searchQuery = ref('')

const handlePlaySong = (song) => {
  playerStore.setPlaylist([song])
  playerStore.play(0)
}

const loadData = async () => {
  isLoading.value = true
  try {
    // TODO: 实现获取上传音乐列表的接口
    isLoading.value = false
  } catch (error) {
    console.error('加载数据失败:', error)
    ElMessage.error('加载数据失败，请稍后重试')
    isLoading.value = false
  }
}

const handleSearch = () => {
  loadData()
}

onMounted(() => {
  loadData()
})
</script>

<style scoped>
@import '../styles/common.css';

.upload-demo {
  width: 100%;
}
</style>


================================================
FILE: pages/UserProfile.vue
================================================
<template>
  <common-layout>
    <template #main>
      <div class="profile-container" v-loading="isLoading">
        <!-- 顶部个人信息区域 -->
        <div class="profile-header" :class="{ 'header-loaded': !isLoading }">
          <div class="profile-cover">
            <div class="profile-info">
              <div class="left-section">
                <el-avatar 
                  :size="90" 
                  :src="userInfo?.avatar"
                  class="profile-avatar"
                />
                <div class="user-meta">
                  <h1>{{ userInfo?.name || userInfo?.username }}</h1>
                  <p class="bio">{{ userInfo?.bio || '这个人很懒，什么都没写~' }}</p>
                  <el-button 
                    v-if="isCurrentUser" 
                    type="primary" 
                    class="edit-btn"
                    size="small"
                    @click="showEditDialog = true"
                  >
                    <el-icon><Edit /></el-icon>
                    编辑资料
                  </el-button>
                </div>
              </div>
              <div class="right-section">
                <!-- 添加快捷操作按钮 -->
                <div class="quick-actions">
                  <el-button 
                    type="primary" 
                    class="action-btn"
                    @click="router.push(`/my-love/${userInfo?.id}`)"
                  >
                    <el-icon><Star /></el-icon>
                    喜欢的音乐
                  </el-button>
                  <el-button 
                    type="primary" 
                    class="action-btn"
                    @click="router.push(`/my-playlist/${userInfo?.id}`)"
                  >
                    <el-icon><Menu /></el-icon>
                    查看歌单
                  </el-button>
                </div>
                <div class="user-stats">
                  <div class="stat-item" v-for="(stat, index) in userStats" :key="index">
                    <h3>{{ stat.value }}</h3>
                    <p>{{ stat.label }}</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- 主要内容区域 -->
        <div class="profile-content">
          <el-tabs v-model="activeTab" class="profile-tabs">
            <el-tab-pane label="个人信息" name="info">
              <el-descriptions :column="2" border>
                <el-descriptions-item label="用户名">
                  {{ userInfo?.username }}
                </el-descriptions-item>
                <el-descriptions-item label="性别">
                  {{ formatGender(userInfo?.gender) }}
                </el-descriptions-item>
                <el-descriptions-item label="生日">
                  {{ formatDate(userInfo?.birthday) }}
                </el-descriptions-item>
                <el-descriptions-item label="地区">
                  {{ userInfo?.location || '未设置' }}
                </el-descriptions-item>
                <el-descriptions-item label="邮箱">
                  {{ userInfo?.email || '未设置' }}
                </el-descriptions-item>
                <el-descriptions-item label="手机">
                  {{ formatPhone(userInfo?.phone) }}
                </el-descriptions-item>
              </el-descriptions>
            </el-tab-pane>
          </el-tabs>
        </div>

        <!-- 编辑资料对话框 -->
        <el-dialog
          v-model="showEditDialog"
          title="编辑个人资料"
          width="500px"
          class="edit-dialog"
        >
          <el-form :model="editForm" label-width="80px">
            <el-form-item label="头像">
              <el-upload
                class="avatar-uploader"
                :action="uploadUrl"
                :show-file-list="false"
                :on-success="handleAvatarSuccess"
                :before-upload="beforeAvatarUpload"
              >
                <img v-if="editForm.avatar" :src="editForm.avatar" class="avatar" />
                <el-icon v-else class="avatar-uploader-icon"><Plus /></el-icon>
              </el-upload>
            </el-form-item>
            <el-form-item label="昵称">
              <el-input v-model="editForm.name" />
            </el-form-item>
            <el-form-item label="个人简介">
              <el-input v-model="editForm.bio" type="textarea" :rows="3" />
            </el-form-item>
            <el-form-item label="性别">
              <el-radio-group v-model="editForm.gender">
                <el-radio :label="1">男</el-radio>
                <el-radio :label="2">女</el-radio>
                <el-radio :label="0">保密</el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="生日">
              <el-date-picker
                v-model="editForm.birthday"
                type="date"
                placeholder="选择日期"
                format="YYYY-MM-DD"
              />
            </el-form-item>
            <el-form-item label="地区">
              <el-input v-model="editForm.location" />
            </el-form-item>
            <el-form-item label="邮箱">
              <el-input v-model="editForm.email" />
            </el-form-item>
            <el-form-item label="手机">
              <el-input v-model="editForm.phone" />
            </el-form-item>
          </el-form>
          <template #footer>
            <span class="dialog-footer">
              <el-button @click="showEditDialog = false">取消</el-button>
              <el-button type="primary" @click="handleUpdateProfile">
                保存
              </el-button>
            </span>
          </template>
        </el-dialog>
      </div>
    </template>

    <template #aside>
      <transition-group name="card-fade">
        <el-card class="side-card" key="activity">
          <template #header>
            <div class="card-header">
              <span>个人动态</span>
            </div>
          </template>
          <div class="activity-list">
            <el-empty description="暂无动态" />
          </div>
        </el-card>

        <el-card class="side-card" key="visitors">
          <template #header>
            <div class="card-header">
              <span>最近访客</span>
            </div>
          </template>
          <div class="visitors-list">
            <el-empty description="暂无访客" />
          </div>
        </el-card>
      </transition-group>
    </template>
  </common-layout>
</template>

<script setup>
import CommonLayout from '@/layouts/CommonLayout.vue'
import { ref, computed, onMounted } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { useUserStore } from '@/stores/user'
import { getUserInfo, updateUserInfo } from '@/api/axiosFile'
import { ElMessage } from 'element-plus'
import { Plus, Edit, Star, Menu } from '@element-plus/icons-vue'

const route = useRoute()
const userStore = useUserStore()
const router = useRouter()

// 状态变量
const isLoading = ref(false)
const userInfo = ref(null)
const activeTab = ref('info')
const showEditDialog = ref(false)
const editForm = ref({
  avatar: '',
  name: '',
  bio: '',
  gender: 0,
  birthday: '',
  location: '',
  email: '',
  phone: ''
})

// 计算属性
const isCurrentUser = computed(() => {
  return String(localStorage.getItem('userId')) === String(route.params.id)
})

// 格式化函数
const formatGender = (gender) => {
  const genderMap = {
    0: '保密',
    1: '男',
    2: '女'
  }
  return genderMap[gender] || '保密'
}

const formatDate = (date) => {
  if (!date) return '未设置'
  return new Date(date).toLocaleDateString()
}

const formatPhone = (phone) => {
  if (!phone) return '未设置'
  return phone.replace(/(\d{3})\d{4}(\d{4})/, '$1****$2')
}

// 获取用户信息
const fetchUserInfo = async () => {
  try {
    isLoading.value = true
    console.log(route)
    const resp = await getUserInfo(route.params.id)
    if (resp.data.message) {
      userInfo.value = resp.data.data.data
      // 如果是当前用户，初始化编辑表单
      if (isCurrentUser.value) {
        initEditForm()
      }
    }
  } catch (error) {
    console.error('获取用户信息失败:', error)
    ElMessage.error('获取用户��息失败')
  } finally {
    isLoading.value = false
  }
}

// 初始化编辑表单
const initEditForm = () => {
  const info = userInfo.value
  editForm.value = {
    avatar: info.avatar,
    name: info.name,
    bio: info.bio,
    gender: info.gender,
    birthday: info.birthday,
    location: info.location,
    email: info.email,
    phone: info.phone
  }
}

// 更新用户信息
const handleUpdateProfile = async () => {
  try {
    const resp = await updateUserInfo(route.params.id, editForm.value)
    if (resp.data.message) {
      ElMessage.success('更新成功')
      showEditDialog.value = false
      await fetchUserInfo()
    }
  } catch (error) {
    console.error('更新用户信息失败:', error)
    ElMessage.error('更新用户信息失败')
  }
}

// 头像上传相关
const uploadUrl = import.meta.env.VITE_API_URL + '/upload'
const handleAvatarSuccess = (res) => {
  editForm.value.avatar = res.url
}
const beforeAvatarUpload = (file) => {
  const isImage = file.type.startsWith('image/')
  const isLt2M = file.size / 1024 / 1024 < 2

  if (!isImage) {
    ElMessage.error('只能上传图片文件!')
    return false
  }
  if (!isLt2M) {
    ElMessage.error('图片大小不能超过 2MB!')
    return false
  }
  return true
}

// 用户统计数据
const userStats = computed(() => [
  { label: '粉丝', value: userInfo.value?.followers || 0 },
  { label: '关注', value: userInfo.value?.followings || 0 }
])

// 生命周期钩子
onMounted(() => {
  fetchUserInfo()
})
</script>

<style scoped>
.profile-container {
  width: 100%;
}

.profile-header {
  margin-bottom: 20px;
  background: var(--el-bg-color);
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.profile-cover {
  background: linear-gradient(135deg, var(--el-color-primary-light-3), var(--el-color-primary));
  padding: 30px;
  color: white;
}

.profile-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.left-section {
  display: flex;
  align-items: center;
  gap: 24px;
}

.profile-avatar {
  border: 3px solid rgba(255, 255, 255, 0.3);
}

.user-meta {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.user-meta h1 {
  margin: 0;
  font-size: 24px;
  font-weight: 600;
}

.bio {
  margin: 0;
  font-size: 15px;
  opacity: 0.9;
}

.edit-btn {
  margin-top: 8px;
  width: fit-content;
}

.right-section {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 20px;
}

.user-stats {
  display: flex;
  gap: 32px;
}

.stat-item {
  text-align: center;
}

.stat-item h3 {
  margin: 0;
  font-size: 22px;
  font-weight: 600;
}

.stat-item p {
  margin: 4px 0 0;
  font-size: 14px;
}

.profile-content {
  background: var(--el-bg-color);
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.profile-tabs :deep(.el-tabs__header) {
  margin-bottom: 20px;
}

/* 描述列表样式 */
.el-descriptions :deep(.el-descriptions__label) {
  font-size: 15px;
  padding: 16px 20px;
}

.el-descriptions :deep(.el-descriptions__content) {
  font-size: 15px;
  padding: 16px 20px;
}

/* 编辑对话框样式 */
.edit-dialog {
  :deep(.el-dialog__body) {
    padding: 30px;
  }
}

.avatar-uploader {
  text-align: center;
  
  .avatar {
    width: 60px;
    height: 60px;
    border-radius: 50%;
  }

  .avatar-uploader-icon {
    font-size: 20px;
    color: #8c939d;
    width: 60px;
    height: 60px;
    line-height: 60px;
    text-align: center;
    border: 1px dashed var(--el-border-color);
    border-radius: 50%;
  }
}

/* 响应式调整 */
@media (max-width: 768px) {
  .profile-info {
    flex-direction: column;
    gap: 24px;
  }

  .right-section {
    padding-left: 0;
    width: 100%;
  }

  .user-stats {
    justify-content: center;
  }

  .profile-cover {
    padding: 20px;
  }

  .left-section {
    flex-direction: column;
    text-align: center;
    gap: 16px;
  }

  .user-meta {
    align-items: center;
  }

  .edit-btn {
    margin-top: 12px;
  }
}

.quick-actions {
  display: flex;
  gap: 12px;
  margin-bottom: 20px;
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(var(--el-color-primary-rgb), 0.2);
}

.action-btn .el-icon {
  font-size: 18px;
}

.right-section {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 20px;
}

/* 响应式调整 */
@media (max-width: 768px) {
  .quick-actions {
    flex-direction: column;
    width: 100%;
  }

  .action-btn {
    width: 100%;
    justify-content: center;
  }

  .right-section {
    align-items: center;
  }
}
</style> 


================================================
FILE: router/index.js
================================================
import { createRouter, createWebHistory } from 'vue-router';

const Login = () => import('@/pages/Login.vue');
const Register = () => import('@/pages/Register.vue');
const PublicPlaylist = () => import('@/pages/PublicPlaylist.vue');
// const Comments = () => import('@/pages/Comments.vue');
const ManageSongs = () => import('@/pages/ManageSongs.vue');

const Player = () => import('@/pages/Player.vue');
const ManageUsers = () => import('@/pages/ManageUsers.vue');
const MyPlaylist = () => import('@/pages/MyPlaylist.vue');
const MyLove = () => import('@/pages/MyLove.vue');
// const MyAlbum = () => import('@/pages/MyAlbum.vue');
const Uploaded = () => import('@/pages/Uploaded.vue');

const routes = [
  {
    path: '/',
    name: 'Login1',
    component: Login
  },
  {
    path: '/login',
    name: 'Login',
    component: Login
  },
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/public-playlist',
    name: 'PublicPlaylist',
    component: PublicPlaylist
  },
  {
    path: '/pub',
    name: 'PublicPlaylist1',
    component: PublicPlaylist
  },
  // {
  //   path: '/comments',
  //   name: 'Comments',
  //   component: Comments
  // },
  {
    path: '/manage-songs',
    name: 'ManageSongs',
    component: ManageSongs
  },
  {
    path: '/manage-users',
    name: 'ManageUsers',
    component: ManageUsers
  },
  {
    path: '/profile/:id',
    name: 'Profile',
    component: () => import('@/pages/UserProfile.vue')
    // component: () => import('@/pages/Profile.vue')
  },
  {
    path: '/player',
    name: 'Player',
    component: Player
  },
  {
    path: '/my-playlist/:id',
    name: 'MyPlaylist',
    component: MyPlaylist
  },
  {
    path: '/my-love/:id',
    name: 'MyLove',
    component: MyLove
  },
  // {
  //   path: '/my-album',
  //   name: 'MyAlbum',
  //   component: MyAlbum
  // },
  {
    path: '/uploaded',
    name: 'Uploaded',
    component: Uploaded
  },
  {
    path: '/playlist/:id',
    name: 'PlaylistDetail',
    component: () => import('@/pages/MyNewPlaylist.vue')
  },
  {
    path: '/album/:id',
    name: 'AlbumDetail',
    component: () => import('@/pages/Albums.vue')
  },
  {
    path: '/artist/:id',
    name: 'ArtistDetail',
    component: () => import('@/pages/Artists.vue')
  },
  {
    path: '/comment/:id',
    name: 'CommentDetail',
    component: () => import('@/pages/CommentOfSong.vue')
  },
  // {
  //   path: '/test/:id',
  //   name: 'Test',
  //   component: () => import('@/pages/test.vue')
  // }
];

const router = createRouter({
  history: createWebHistory('/'),
  routes
});

export default router;



================================================
FILE: stores/index.js
================================================
import { usePlayerStore } from './player'

export {
  usePlayerStore
} 


================================================
FILE: stores/player.js
================================================
import { defineStore } from 'pinia'

export const usePlayerStore = defineStore('player', {
  state: () => ({
    currentSong: null,
    isPlaying: false,
    playlist: [],
    currentIndex: -1
  }),
  
  getters: {
    getCurrentSong: (state) => state.currentSong,
    getIsPlaying: (state) => state.isPlaying,
    getPlaylist: (state) => state.playlist,
    getCurrentIndex: (state) => state.currentIndex
  },
  
  actions: {
    setPlaylist(songs) {
      this.playlist = songs
      this.currentIndex = 0
      this.currentSong = songs[0]
    },
    
    play(index) {
      if (index >= 0 && index < this.playlist.length) {
        this.currentIndex = index
        this.currentSong = this.playlist[index]
        this.isPlaying = true
      }
    },
    
    pause() {
      this.isPlaying = false
    },
    
    resume() {
      this.isPlaying = true
    },
    
    next() {
      if (this.playlist.length > 0) {
        this.currentIndex = (this.currentIndex + 1) % this.playlist.length
        this.currentSong = this.playlist[this.currentIndex]
      }
    },
    
    previous() {
      if (this.playlist.length > 0) {
        this.currentIndex = this.currentIndex - 1 < 0 ? this.playlist.length - 1 : this.currentIndex - 1
        this.currentSong = this.playlist[this.currentIndex]
      }
    }
  }
}) 


================================================
FILE: stores/user.js
================================================
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useUserStore = defineStore('user', () => {
  // 鐢ㄦ埛淇℃伅
  const userInfo = ref({
    id: null,
    username: '',
    name: '',
    avatar: '',
    email: '',
    phone: '',
    sex: ''
  })

  // 璁剧疆鐢ㄦ埛淇℃伅
  const setUserInfo = (info) => {
    userInfo.value = {
      ...userInfo.value,
      ...info
    }
  }

  // 娓呴櫎鐢ㄦ埛淇℃伅
  const clearUserInfo = () => {
    userInfo.value = {
      id: null,
      username: '',
      name: '',
      avatar: '',
      email: '',
      phone: '',
      sex: ''
    }
  }

  return {
    userInfo,
    setUserInfo,
    clearUserInfo
  }
}) 


================================================
FILE: styles/common.css
================================================
.playlist-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.filter-section {
  flex: none;
  padding: 20px;
  display: flex;
  gap: 16px;
  background-color: #fff;
}

.search-input {
  width: 300px;
}

.song-list {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 0 20px;
  padding-bottom: 100px; /* 为分页器预留空间 */
}

.song-header {
  display: flex;
  align-items: center;
  padding: 12px 0;
  background-color: #fafafa;
  border-radius: 8px;
  margin-bottom: 8px;
  color: #909399;
  font-size: 14px;
  position: sticky;
  top: 0;
  z-index: 1;
}

.song-item {
  display: flex;
  align-items: center;
  padding: 12px 0;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.song-item:hover {
  background-color: #f5f7fa;
}

/* 列宽设置 */
.col-index {
  width: 60px;
  flex: none;
  display: flex;
  align-items: center;
  justify-content: center;
}

.col-title {
  flex: 1;
  min-width: 0;
  display: flex;
  align-items: center;
  gap: 12px;
  overflow: hidden;
}

.song-name {
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.col-duration {
  width: 100px;
  flex: none;
  display: flex;
  align-items: center;
  justify-content: center;
}

.col-artist {
  width: 120px;
  flex: none;
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.col-album {
  width: 160px;
  flex: none;
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* 歌曲封面 */
.song-cover {
  width: 40px;
  height: 40px;
  flex-shrink: 0;
  overflow: hidden;
  border-radius: 4px;
}

.song-cover .el-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
/* 操作按钮 */
.action-buttons {
  display: flex;
  gap: 16px;
}

.action-buttons .el-icon {
  font-size: 18px;
  color: #606266;
  cursor: pointer;
  transition: color 0.3s ease;
}

.action-buttons .el-icon:hover {
  color: #409EFF;
}

.play-icon {
  font-size: 18px;
  color: #409EFF;
  cursor: pointer;
}

/* 分页器 */
.pagination {
  position: fixed;
  bottom: 80px;
  left: 240px;
  right: 0;
  padding: 20px;
  display: flex;
  justify-content: center;
  background-color: #fff;
  border-top: 1px solid #f0f0f0;
  z-index: 10;
}

/* 封面预览 */
.cover-preview {
  width: 300px;
  height: 300px;
  margin: 0 auto;
  border-radius: 8px;
  overflow: hidden;
}

/* 播放列表弹窗 */
.playlist-dialog-content {
  display: flex;
  flex-direction: column;
  gap: 20px;
}

.create-playlist {
  display: flex;
  gap: 12px;
  margin-top: 20px;
}

/* 响应式设计 */
@media screen and (max-width: 768px) {
  .filter-section {
    padding: 10px;
    flex-direction: column;
  }

  .search-input {
    width: 100%;
  }

  .col-album {
    display: none;
  }
  
  .col-duration {
    width: 80px;
  }
  
  .col-artist {
    width: 100px;
  }

  .liked{
    color: #ffcc00;
  }
} 


================================================
FILE: utils/api.js
================================================
import { ElMessage, ElMessageBox } from 'element-plus';
import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:3000', // 后端 API 根地址
  timeout: 10000, // 超时时间
  headers: {
    'Content-Type': 'application/json',  // 设置请求头中的 Content-Type 为 JSON
  },
});

api.interceptors.request.use(
  (config) => {
    if (config.url === '/user/login' || config.url === '/user/register') {
      return config;
    }

    const token = localStorage.getItem('token');
    if (!token) {
      ElMessage.error('请先登录');
      setTimeout(() => {
        window.location.href = '/login';  // 跳转到登录页
      }, 1000);
      return Promise.reject('No token');
    }
    config.headers['Authorization'] = `Bearer ${token}`;
    return config;
  },
  (error) => Promise.reject(error)
);

api.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response && error.response.status === 401) {
      localStorage.removeItem('token');
      ElMessage.error('身份验证失败，请重新登录');
      setTimeout(() => {
        window.location.href = '/login';  // 跳转到登录页
      }, 1000);
      return Promise.resolve(null);
    }
    return Promise.reject(error);
  }
);

export { api };



================================================
FILE: utils/format.js
================================================
// 格式化时长（将秒数转换为 mm:ss 格式）
export const formatDuration = (duration) => {
  if (!duration) return '00:00'
  
  const minutes = Math.floor(duration / 60)
  const seconds = Math.floor(duration % 60)
  
  const formatNumber = (num) => {
    return num < 10 ? `0${num}` : num
  }
  
  return `${formatNumber(minutes)}:${formatNumber(seconds)}`
}

// 格式化日期
export const formatDate = (date) => {
  if (!date) return ''
  
  const d = new Date(date)
  const year = d.getFullYear()
  const month = formatNumber(d.getMonth() + 1)
  const day = formatNumber(d.getDate())
  
  return `${year}-${month}-${day}`
}

// 格式化数字（如播放次数）
export const formatNumber = (num) => {
  if (num < 10) return `0${num}`
  return num.toString()
} 

