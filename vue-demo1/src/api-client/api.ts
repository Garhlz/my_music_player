/* tslint:disable */
/* eslint-disable */
/**
 * Elaine 的音乐播放器 API
 * 这是一个使用 Go 语言和 Gin 框架开发的音乐播放器后端 API.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: garhlz257@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AlbumsGet200Response
 */
export interface AlbumsGet200Response {
    /**
     * 使用 interface{} 来适应任何类型的列表数据
     * @type {object}
     * @memberof AlbumsGet200Response
     */
    'list'?: object;
    /**
     * 
     * @type {number}
     * @memberof AlbumsGet200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsAlbumListDTO>}
     * @memberof AlbumsGet200Response
     */
    'List'?: Array<ModelsAlbumListDTO>;
}
/**
 * 
 * @export
 * @interface AlbumsIdSongsGet200Response
 */
export interface AlbumsIdSongsGet200Response {
    /**
     * 使用 interface{} 来适应任何类型的列表数据
     * @type {object}
     * @memberof AlbumsIdSongsGet200Response
     */
    'list'?: object;
    /**
     * 
     * @type {number}
     * @memberof AlbumsIdSongsGet200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsSongDetailDTO>}
     * @memberof AlbumsIdSongsGet200Response
     */
    'List'?: Array<ModelsSongDetailDTO>;
}
/**
 * 
 * @export
 * @interface MePlaylistsGet200Response
 */
export interface MePlaylistsGet200Response {
    /**
     * 使用 interface{} 来适应任何类型的列表数据
     * @type {object}
     * @memberof MePlaylistsGet200Response
     */
    'list'?: object;
    /**
     * 
     * @type {number}
     * @memberof MePlaylistsGet200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsPlaylistInfoDTO>}
     * @memberof MePlaylistsGet200Response
     */
    'List'?: Array<ModelsPlaylistInfoDTO>;
}
/**
 * 
 * @export
 * @interface ModelsAddSongToPlaylistRequestDTO
 */
export interface ModelsAddSongToPlaylistRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof ModelsAddSongToPlaylistRequestDTO
     */
    'song_id': number;
}
/**
 * 
 * @export
 * @interface ModelsAlbum
 */
export interface ModelsAlbum {
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbum
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbum
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbum
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAlbum
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbum
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbum
     */
    'release_date'?: string;
}
/**
 * 
 * @export
 * @interface ModelsAlbumListDTO
 */
export interface ModelsAlbumListDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'artist_names'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAlbumListDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAlbumListDTO
     */
    'release_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsAlbumListDTO
     */
    'song_count'?: number;
}
/**
 * 
 * @export
 * @interface ModelsArtist
 */
export interface ModelsArtist {
    /**
     * 
     * @type {string}
     * @memberof ModelsArtist
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsArtist
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsArtist
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsArtist
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsArtist
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsArtist
     */
    'sex'?: string;
}
/**
 * 
 * @export
 * @interface ModelsCommentDTO
 */
export interface ModelsCommentDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCommentDTO
     */
    'is_liked_by_me'?: boolean;
    /**
     * 新增字段
     * @type {boolean}
     * @memberof ModelsCommentDTO
     */
    'is_root'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'like_count'?: number;
    /**
     * 新增， 用于展示
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'name'?: string;
    /**
     * 使用指针类型处理 NULL
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'parent_id'?: number;
    /**
     * 用于嵌套回复
     * @type {Array<ModelsCommentDTO>}
     * @memberof ModelsCommentDTO
     */
    'replies'?: Array<ModelsCommentDTO>;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'reply_to_name'?: string;
    /**
     * 使用指针
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'reply_to_user_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'reply_to_username'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'song_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'updated_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCommentDTO
     */
    'user_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCommentDTO
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsCommentLikeCountResponseDTO
 */
export interface ModelsCommentLikeCountResponseDTO {
    /**
     * 
     * @type {number}
     * @memberof ModelsCommentLikeCountResponseDTO
     */
    'like_count'?: number;
}
/**
 * 
 * @export
 * @interface ModelsCreateCommentRequestDTO
 */
export interface ModelsCreateCommentRequestDTO {
    /**
     * 
     * @type {number}
     * @memberof ModelsCreateCommentRequestDTO
     */
    'parent_id'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsCreateCommentRequestDTO
     */
    'reply_to_user_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateCommentRequestDTO
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface ModelsCreatePlaylistRequestDTO
 */
export interface ModelsCreatePlaylistRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePlaylistRequestDTO
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCreatePlaylistRequestDTO
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePlaylistRequestDTO
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ModelsFollowStatusResponse
 */
export interface ModelsFollowStatusResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsFollowStatusResponse
     */
    'is_following'?: boolean;
}
/**
 * 
 * @export
 * @interface ModelsLikeCommentResponseDTO
 */
export interface ModelsLikeCommentResponseDTO {
    /**
     * 
     * @type {boolean}
     * @memberof ModelsLikeCommentResponseDTO
     */
    'is_liked_by_me'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelsLikeCommentResponseDTO
     */
    'like_count'?: number;
}
/**
 * 
 * @export
 * @interface ModelsLikeStatusResponse
 */
export interface ModelsLikeStatusResponse {
    /**
     * 是否已喜欢
     * @type {boolean}
     * @memberof ModelsLikeStatusResponse
     */
    'isLiked'?: boolean;
}
/**
 * 
 * @export
 * @interface ModelsLoginRequest
 */
export interface ModelsLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ModelsPaginatedResponseDTO
 */
export interface ModelsPaginatedResponseDTO {
    /**
     * 使用 interface{} 来适应任何类型的列表数据
     * @type {object}
     * @memberof ModelsPaginatedResponseDTO
     */
    'list'?: object;
    /**
     * 
     * @type {number}
     * @memberof ModelsPaginatedResponseDTO
     */
    'total'?: number;
}
/**
 * 
 * @export
 * @interface ModelsPlaylistInfoDTO
 */
export interface ModelsPlaylistInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'creator_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPlaylistInfoDTO
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsPlaylistInfoDTO
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPlaylistInfoDTO
     */
    'song_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsPlaylistInfoDTO
     */
    'updated_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPlaylistInfoDTO
     */
    'user_id'?: number;
}
/**
 * 
 * @export
 * @interface ModelsRegisterRequest
 */
export interface ModelsRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsRegisterRequest
     */
    'gender'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface ModelsSongDetailDTO
 */
export interface ModelsSongDetailDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'album_cover'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'album_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'album_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'artist_id'?: number;
    /**
     * 使用指针以防 JOIN 结果为 NULL
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'artist_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'author_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'create_time'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'duration'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'id'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsSongDetailDTO
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'like_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsSongDetailDTO
     */
    'play_count'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsSongDetailDTO
     */
    'url'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUpdateCommentRequestDTO
 */
export interface ModelsUpdateCommentRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateCommentRequestDTO
     */
    'text': string;
}
/**
 * 
 * @export
 * @interface ModelsUpdatePlaylistRequestDTO
 */
export interface ModelsUpdatePlaylistRequestDTO {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePlaylistRequestDTO
     */
    'cover'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePlaylistRequestDTO
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUpdatePlaylistRequestDTO
     */
    'is_public'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePlaylistRequestDTO
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUpdateUserRequest
 */
export interface ModelsUpdateUserRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdateUserRequest
     */
    'gender'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateUserRequest
     */
    'phone'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUserProfile
 */
export interface ModelsUserProfile {
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'avatar'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'bio'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'created_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'email'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserProfile
     */
    'followers'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserProfile
     */
    'followings'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserProfile
     */
    'gender'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserProfile
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'location'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'name'?: string;
    /**
     * 这里可能要返回比对, 而且反正是密文
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'phone'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUserProfile
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'updated_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUserProfile
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUsernameResponse
 */
export interface ModelsUsernameResponse {
    /**
     * 可以顺便带上昵称
     * @type {string}
     * @memberof ModelsUsernameResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUsernameResponse
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface SongsIdCommentsGet200Response
 */
export interface SongsIdCommentsGet200Response {
    /**
     * 使用 interface{} 来适应任何类型的列表数据
     * @type {object}
     * @memberof SongsIdCommentsGet200Response
     */
    'list'?: object;
    /**
     * 
     * @type {number}
     * @memberof SongsIdCommentsGet200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsCommentDTO>}
     * @memberof SongsIdCommentsGet200Response
     */
    'List'?: Array<ModelsCommentDTO>;
}

/**
 * AlbumApi - axios parameter creator
 * @export
 */
export const AlbumApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取专辑的分页列表，支持按专辑名或艺术家名进行搜索，并可按指定字段排序。
         * @summary 获取专辑列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配专辑名或艺术家名)
         * @param {AlbumsGetSortByEnum} [sortBy] 排序字段 (latest, release_date)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsGet: async (page?: number, pageSize?: number, search?: string, sortBy?: AlbumsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/albums`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据专辑ID获取其详细信息。
         * @summary 获取专辑详情
         * @param {number} id 专辑 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('albumsIdGet', 'id', id)
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据专辑ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取专辑的歌曲列表
         * @param {number} id 专辑 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {AlbumsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdSongsGet: async (id: number, page?: number, pageSize?: number, search?: string, sortBy?: AlbumsIdSongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('albumsIdSongsGet', 'id', id)
            const localVarPath = `/albums/{id}/songs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AlbumApi - functional programming interface
 * @export
 */
export const AlbumApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AlbumApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取专辑的分页列表，支持按专辑名或艺术家名进行搜索，并可按指定字段排序。
         * @summary 获取专辑列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配专辑名或艺术家名)
         * @param {AlbumsGetSortByEnum} [sortBy] 排序字段 (latest, release_date)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumsGet(page?: number, pageSize?: number, search?: string, sortBy?: AlbumsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumsGet(page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.albumsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据专辑ID获取其详细信息。
         * @summary 获取专辑详情
         * @param {number} id 专辑 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsAlbum>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.albumsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据专辑ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取专辑的歌曲列表
         * @param {number} id 专辑 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {AlbumsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async albumsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: AlbumsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.albumsIdSongsGet(id, page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AlbumApi.albumsIdSongsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AlbumApi - factory interface
 * @export
 */
export const AlbumApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AlbumApiFp(configuration)
    return {
        /**
         * 获取专辑的分页列表，支持按专辑名或艺术家名进行搜索，并可按指定字段排序。
         * @summary 获取专辑列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配专辑名或艺术家名)
         * @param {AlbumsGetSortByEnum} [sortBy] 排序字段 (latest, release_date)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsGet(page?: number, pageSize?: number, search?: string, sortBy?: AlbumsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsGet200Response> {
            return localVarFp.albumsGet(page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据专辑ID获取其详细信息。
         * @summary 获取专辑详情
         * @param {number} id 专辑 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAlbum> {
            return localVarFp.albumsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据专辑ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取专辑的歌曲列表
         * @param {number} id 专辑 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {AlbumsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: AlbumsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.albumsIdSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AlbumApi - interface
 * @export
 * @interface AlbumApi
 */
export interface AlbumApiInterface {
    /**
     * 获取专辑的分页列表，支持按专辑名或艺术家名进行搜索，并可按指定字段排序。
     * @summary 获取专辑列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配专辑名或艺术家名)
     * @param {AlbumsGetSortByEnum} [sortBy] 排序字段 (latest, release_date)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApiInterface
     */
    albumsGet(page?: number, pageSize?: number, search?: string, sortBy?: AlbumsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsGet200Response>;

    /**
     * 根据专辑ID获取其详细信息。
     * @summary 获取专辑详情
     * @param {number} id 专辑 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApiInterface
     */
    albumsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsAlbum>;

    /**
     * 根据专辑ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取专辑的歌曲列表
     * @param {number} id 专辑 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {AlbumsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApiInterface
     */
    albumsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: AlbumsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

}

/**
 * AlbumApi - object-oriented interface
 * @export
 * @class AlbumApi
 * @extends {BaseAPI}
 */
export class AlbumApi extends BaseAPI implements AlbumApiInterface {
    /**
     * 获取专辑的分页列表，支持按专辑名或艺术家名进行搜索，并可按指定字段排序。
     * @summary 获取专辑列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配专辑名或艺术家名)
     * @param {AlbumsGetSortByEnum} [sortBy] 排序字段 (latest, release_date)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumsGet(page?: number, pageSize?: number, search?: string, sortBy?: AlbumsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumsGet(page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据专辑ID获取其详细信息。
     * @summary 获取专辑详情
     * @param {number} id 专辑 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据专辑ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取专辑的歌曲列表
     * @param {number} id 专辑 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {AlbumsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AlbumApi
     */
    public albumsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: AlbumsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return AlbumApiFp(this.configuration).albumsIdSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const AlbumsGetSortByEnum = {
    Latest: 'latest',
    ReleaseDate: 'release_date'
} as const;
export type AlbumsGetSortByEnum = typeof AlbumsGetSortByEnum[keyof typeof AlbumsGetSortByEnum];
/**
 * @export
 */
export const AlbumsIdSongsGetSortByEnum = {
    Oldest: 'oldest',
    Latest: 'latest',
    PlayCount: 'play_count',
    LikeCount: 'like_count'
} as const;
export type AlbumsIdSongsGetSortByEnum = typeof AlbumsIdSongsGetSortByEnum[keyof typeof AlbumsIdSongsGetSortByEnum];


/**
 * ArtistApi - axios parameter creator
 * @export
 */
export const ArtistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据艺术家ID获取其详细信息。
         * @summary 获取艺术家详情
         * @param {number} id 艺术家 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('artistsIdGet', 'id', id)
            const localVarPath = `/artists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据艺术家ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取艺术家的歌曲列表
         * @param {number} id 艺术家 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {ArtistsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdSongsGet: async (id: number, page?: number, pageSize?: number, search?: string, sortBy?: ArtistsIdSongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('artistsIdSongsGet', 'id', id)
            const localVarPath = `/artists/{id}/songs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ArtistApi - functional programming interface
 * @export
 */
export const ArtistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ArtistApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据艺术家ID获取其详细信息。
         * @summary 获取艺术家详情
         * @param {number} id 艺术家 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsArtist>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtistApi.artistsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据艺术家ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取艺术家的歌曲列表
         * @param {number} id 艺术家 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {ArtistsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async artistsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: ArtistsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.artistsIdSongsGet(id, page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ArtistApi.artistsIdSongsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ArtistApi - factory interface
 * @export
 */
export const ArtistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ArtistApiFp(configuration)
    return {
        /**
         * 根据艺术家ID获取其详细信息。
         * @summary 获取艺术家详情
         * @param {number} id 艺术家 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsArtist> {
            return localVarFp.artistsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据艺术家ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取艺术家的歌曲列表
         * @param {number} id 艺术家 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {ArtistsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: ArtistsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.artistsIdSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ArtistApi - interface
 * @export
 * @interface ArtistApi
 */
export interface ArtistApiInterface {
    /**
     * 根据艺术家ID获取其详细信息。
     * @summary 获取艺术家详情
     * @param {number} id 艺术家 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApiInterface
     */
    artistsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsArtist>;

    /**
     * 根据艺术家ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取艺术家的歌曲列表
     * @param {number} id 艺术家 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {ArtistsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApiInterface
     */
    artistsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: ArtistsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

}

/**
 * ArtistApi - object-oriented interface
 * @export
 * @class ArtistApi
 * @extends {BaseAPI}
 */
export class ArtistApi extends BaseAPI implements ArtistApiInterface {
    /**
     * 根据艺术家ID获取其详细信息。
     * @summary 获取艺术家详情
     * @param {number} id 艺术家 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApi
     */
    public artistsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return ArtistApiFp(this.configuration).artistsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据艺术家ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取艺术家的歌曲列表
     * @param {number} id 艺术家 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {ArtistsIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArtistApi
     */
    public artistsIdSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: ArtistsIdSongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return ArtistApiFp(this.configuration).artistsIdSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ArtistsIdSongsGetSortByEnum = {
    Oldest: 'oldest',
    Latest: 'latest',
    PlayCount: 'play_count',
    LikeCount: 'like_count'
} as const;
export type ArtistsIdSongsGetSortByEnum = typeof ArtistsIdSongsGetSortByEnum[keyof typeof ArtistsIdSongsGetSortByEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 用户使用用户名和密码登录，成功后返回 JWT Token 和用户信息。
         * @summary 用户登录
         * @param {ModelsLoginRequest} loginRequest 用户登录凭证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (loginRequest: ModelsLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据提供的用户名和密码等信息，创建一个新的用户账户。
         * @summary 用户注册
         * @param {ModelsRegisterRequest} registerRequest 用户注册信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (registerRequest: ModelsRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('authRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 用户使用用户名和密码登录，成功后返回 JWT Token 和用户信息。
         * @summary 用户登录
         * @param {ModelsLoginRequest} loginRequest 用户登录凭证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(loginRequest: ModelsLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据提供的用户名和密码等信息，创建一个新的用户账户。
         * @summary 用户注册
         * @param {ModelsRegisterRequest} registerRequest 用户注册信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(registerRequest: ModelsRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(registerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 用户使用用户名和密码登录，成功后返回 JWT Token 和用户信息。
         * @summary 用户登录
         * @param {ModelsLoginRequest} loginRequest 用户登录凭证
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(loginRequest: ModelsLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.authLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据提供的用户名和密码等信息，创建一个新的用户账户。
         * @summary 用户注册
         * @param {ModelsRegisterRequest} registerRequest 用户注册信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(registerRequest: ModelsRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.authRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 用户使用用户名和密码登录，成功后返回 JWT Token 和用户信息。
     * @summary 用户登录
     * @param {ModelsLoginRequest} loginRequest 用户登录凭证
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authLoginPost(loginRequest: ModelsLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * 根据提供的用户名和密码等信息，创建一个新的用户账户。
     * @summary 用户注册
     * @param {ModelsRegisterRequest} registerRequest 用户注册信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRegisterPost(registerRequest: ModelsRegisterRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 用户使用用户名和密码登录，成功后返回 JWT Token 和用户信息。
     * @summary 用户登录
     * @param {ModelsLoginRequest} loginRequest 用户登录凭证
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(loginRequest: ModelsLoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据提供的用户名和密码等信息，创建一个新的用户账户。
     * @summary 用户注册
     * @param {ModelsRegisterRequest} registerRequest 用户注册信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRegisterPost(registerRequest: ModelsRegisterRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommentApi - axios parameter creator
 * @export
 */
export const CommentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 根据评论id获取点赞数量
         * @summary 根据评论id获取点赞数量
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdCountGet: async (commentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsCommentIdCountGet', 'commentId', commentId)
            const localVarPath = `/comments/{commentId}/count`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除当前认证用户发表的一条评论（及其所有回复）。
         * @summary 删除我的评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdDelete: async (commentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsCommentIdDelete', 'commentId', commentId)
            const localVarPath = `/comments/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 对一条评论进行点赞。如果已经点赞，则取消点赞。
         * @summary 点赞或取消点赞评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdLikePost: async (commentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsCommentIdLikePost', 'commentId', commentId)
            const localVarPath = `/comments/{commentId}/like`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新当前认证用户发表的一条评论。
         * @summary 更新我的评论
         * @param {number} commentId 评论 ID
         * @param {ModelsUpdateCommentRequestDTO} updateRequest 更新的评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdPut: async (commentId: number, updateRequest: ModelsUpdateCommentRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsCommentIdPut', 'commentId', commentId)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('commentsCommentIdPut', 'updateRequest', updateRequest)
            const localVarPath = `/comments/{commentId}`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据一条父评论的ID，获取它的所有回复列表（不分页）。
         * @summary 获取评论回复
         * @param {number} commentId 父评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdRepliesGet: async (commentId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('commentsCommentIdRepliesGet', 'commentId', commentId)
            const localVarPath = `/comments/{commentId}/replies`
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取一首歌的根评论（非回复）的分页列表。
         * @summary 获取歌曲评论
         * @param {number} id 歌曲 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdCommentsGet: async (id: number, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('songsIdCommentsGet', 'id', id)
            const localVarPath = `/songs/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 为一首歌发表新评论，或回复一条已有的评论。
         * @summary 发表评论
         * @param {number} id 歌曲 ID
         * @param {ModelsCreateCommentRequestDTO} createRequest 评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdCommentsPost: async (id: number, createRequest: ModelsCreateCommentRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('songsIdCommentsPost', 'id', id)
            // verify required parameter 'createRequest' is not null or undefined
            assertParamExists('songsIdCommentsPost', 'createRequest', createRequest)
            const localVarPath = `/songs/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentApi - functional programming interface
 * @export
 */
export const CommentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentApiAxiosParamCreator(configuration)
    return {
        /**
         * 根据评论id获取点赞数量
         * @summary 根据评论id获取点赞数量
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdCountGet(commentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCommentLikeCountResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCommentIdCountGet(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.commentsCommentIdCountGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 删除当前认证用户发表的一条评论（及其所有回复）。
         * @summary 删除我的评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdDelete(commentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCommentIdDelete(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.commentsCommentIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 对一条评论进行点赞。如果已经点赞，则取消点赞。
         * @summary 点赞或取消点赞评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdLikePost(commentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsLikeCommentResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCommentIdLikePost(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.commentsCommentIdLikePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 更新当前认证用户发表的一条评论。
         * @summary 更新我的评论
         * @param {number} commentId 评论 ID
         * @param {ModelsUpdateCommentRequestDTO} updateRequest 更新的评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdPut(commentId: number, updateRequest: ModelsUpdateCommentRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCommentIdPut(commentId, updateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.commentsCommentIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据一条父评论的ID，获取它的所有回复列表（不分页）。
         * @summary 获取评论回复
         * @param {number} commentId 父评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commentsCommentIdRepliesGet(commentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCommentDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.commentsCommentIdRepliesGet(commentId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.commentsCommentIdRepliesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取一首歌的根评论（非回复）的分页列表。
         * @summary 获取歌曲评论
         * @param {number} id 歌曲 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsIdCommentsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SongsIdCommentsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.songsIdCommentsGet(id, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.songsIdCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 为一首歌发表新评论，或回复一条已有的评论。
         * @summary 发表评论
         * @param {number} id 歌曲 ID
         * @param {ModelsCreateCommentRequestDTO} createRequest 评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsIdCommentsPost(id: number, createRequest: ModelsCreateCommentRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCommentDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.songsIdCommentsPost(id, createRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentApi.songsIdCommentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentApi - factory interface
 * @export
 */
export const CommentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentApiFp(configuration)
    return {
        /**
         * 根据评论id获取点赞数量
         * @summary 根据评论id获取点赞数量
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdCountGet(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCommentLikeCountResponseDTO> {
            return localVarFp.commentsCommentIdCountGet(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除当前认证用户发表的一条评论（及其所有回复）。
         * @summary 删除我的评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdDelete(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.commentsCommentIdDelete(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 对一条评论进行点赞。如果已经点赞，则取消点赞。
         * @summary 点赞或取消点赞评论
         * @param {number} commentId 评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdLikePost(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLikeCommentResponseDTO> {
            return localVarFp.commentsCommentIdLikePost(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新当前认证用户发表的一条评论。
         * @summary 更新我的评论
         * @param {number} commentId 评论 ID
         * @param {ModelsUpdateCommentRequestDTO} updateRequest 更新的评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdPut(commentId: number, updateRequest: ModelsUpdateCommentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.commentsCommentIdPut(commentId, updateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据一条父评论的ID，获取它的所有回复列表（不分页）。
         * @summary 获取评论回复
         * @param {number} commentId 父评论 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentsCommentIdRepliesGet(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsCommentDTO>> {
            return localVarFp.commentsCommentIdRepliesGet(commentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取一首歌的根评论（非回复）的分页列表。
         * @summary 获取歌曲评论
         * @param {number} id 歌曲 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdCommentsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SongsIdCommentsGet200Response> {
            return localVarFp.songsIdCommentsGet(id, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 为一首歌发表新评论，或回复一条已有的评论。
         * @summary 发表评论
         * @param {number} id 歌曲 ID
         * @param {ModelsCreateCommentRequestDTO} createRequest 评论内容
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdCommentsPost(id: number, createRequest: ModelsCreateCommentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCommentDTO> {
            return localVarFp.songsIdCommentsPost(id, createRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentApi - interface
 * @export
 * @interface CommentApi
 */
export interface CommentApiInterface {
    /**
     * 根据评论id获取点赞数量
     * @summary 根据评论id获取点赞数量
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    commentsCommentIdCountGet(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCommentLikeCountResponseDTO>;

    /**
     * 删除当前认证用户发表的一条评论（及其所有回复）。
     * @summary 删除我的评论
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    commentsCommentIdDelete(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 对一条评论进行点赞。如果已经点赞，则取消点赞。
     * @summary 点赞或取消点赞评论
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    commentsCommentIdLikePost(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLikeCommentResponseDTO>;

    /**
     * 更新当前认证用户发表的一条评论。
     * @summary 更新我的评论
     * @param {number} commentId 评论 ID
     * @param {ModelsUpdateCommentRequestDTO} updateRequest 更新的评论内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    commentsCommentIdPut(commentId: number, updateRequest: ModelsUpdateCommentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 根据一条父评论的ID，获取它的所有回复列表（不分页）。
     * @summary 获取评论回复
     * @param {number} commentId 父评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    commentsCommentIdRepliesGet(commentId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsCommentDTO>>;

    /**
     * 获取一首歌的根评论（非回复）的分页列表。
     * @summary 获取歌曲评论
     * @param {number} id 歌曲 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    songsIdCommentsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<SongsIdCommentsGet200Response>;

    /**
     * 为一首歌发表新评论，或回复一条已有的评论。
     * @summary 发表评论
     * @param {number} id 歌曲 ID
     * @param {ModelsCreateCommentRequestDTO} createRequest 评论内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApiInterface
     */
    songsIdCommentsPost(id: number, createRequest: ModelsCreateCommentRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCommentDTO>;

}

/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
export class CommentApi extends BaseAPI implements CommentApiInterface {
    /**
     * 根据评论id获取点赞数量
     * @summary 根据评论id获取点赞数量
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public commentsCommentIdCountGet(commentId: number, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).commentsCommentIdCountGet(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除当前认证用户发表的一条评论（及其所有回复）。
     * @summary 删除我的评论
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public commentsCommentIdDelete(commentId: number, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).commentsCommentIdDelete(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 对一条评论进行点赞。如果已经点赞，则取消点赞。
     * @summary 点赞或取消点赞评论
     * @param {number} commentId 评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public commentsCommentIdLikePost(commentId: number, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).commentsCommentIdLikePost(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新当前认证用户发表的一条评论。
     * @summary 更新我的评论
     * @param {number} commentId 评论 ID
     * @param {ModelsUpdateCommentRequestDTO} updateRequest 更新的评论内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public commentsCommentIdPut(commentId: number, updateRequest: ModelsUpdateCommentRequestDTO, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).commentsCommentIdPut(commentId, updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据一条父评论的ID，获取它的所有回复列表（不分页）。
     * @summary 获取评论回复
     * @param {number} commentId 父评论 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public commentsCommentIdRepliesGet(commentId: number, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).commentsCommentIdRepliesGet(commentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取一首歌的根评论（非回复）的分页列表。
     * @summary 获取歌曲评论
     * @param {number} id 歌曲 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public songsIdCommentsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).songsIdCommentsGet(id, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 为一首歌发表新评论，或回复一条已有的评论。
     * @summary 发表评论
     * @param {number} id 歌曲 ID
     * @param {ModelsCreateCommentRequestDTO} createRequest 评论内容
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    public songsIdCommentsPost(id: number, createRequest: ModelsCreateCommentRequestDTO, options?: RawAxiosRequestConfig) {
        return CommentApiFp(this.configuration).songsIdCommentsPost(id, createRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LikeApi - axios parameter creator
 * @export
 */
export const LikeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取当前认证用户（通过JWT Token识别）的喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取我喜欢的歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {MeLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsGet: async (page?: number, pageSize?: number, search?: string, sortBy?: MeLikedSongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/liked-songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 将一首指定的歌曲从当前认证用户的“我喜欢”列表中移除。
         * @summary 从我喜欢列表移除歌曲
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdDelete: async (songId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('meLikedSongsSongIdDelete', 'songId', songId)
            const localVarPath = `/me/liked-songs/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 将一首指定的歌曲添加到当前认证用户的“我喜欢”列表中。
         * @summary 添加歌曲到我喜欢列表
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdPost: async (songId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('meLikedSongsSongIdPost', 'songId', songId)
            const localVarPath = `/me/liked-songs/{songId}`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据歌曲ID，检查当前通过认证的用户是否已经喜欢了该歌曲。
         * @summary 检查歌曲喜欢状态
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdStatusGet: async (songId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('meLikedSongsSongIdStatusGet', 'songId', songId)
            const localVarPath = `/me/liked-songs/{songId}/status`
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定用户的公开喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取指定用户的喜欢列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {UsersIdLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdLikedSongsGet: async (id: number, page?: number, pageSize?: number, search?: string, sortBy?: UsersIdLikedSongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdLikedSongsGet', 'id', id)
            const localVarPath = `/users/{id}/liked-songs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LikeApi - functional programming interface
 * @export
 */
export const LikeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LikeApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取当前认证用户（通过JWT Token识别）的喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取我喜欢的歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {MeLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meLikedSongsGet(page?: number, pageSize?: number, search?: string, sortBy?: MeLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meLikedSongsGet(page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeApi.meLikedSongsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 将一首指定的歌曲从当前认证用户的“我喜欢”列表中移除。
         * @summary 从我喜欢列表移除歌曲
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meLikedSongsSongIdDelete(songId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meLikedSongsSongIdDelete(songId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeApi.meLikedSongsSongIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 将一首指定的歌曲添加到当前认证用户的“我喜欢”列表中。
         * @summary 添加歌曲到我喜欢列表
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meLikedSongsSongIdPost(songId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meLikedSongsSongIdPost(songId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeApi.meLikedSongsSongIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据歌曲ID，检查当前通过认证的用户是否已经喜欢了该歌曲。
         * @summary 检查歌曲喜欢状态
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meLikedSongsSongIdStatusGet(songId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsLikeStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meLikedSongsSongIdStatusGet(songId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeApi.meLikedSongsSongIdStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取指定用户的公开喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取指定用户的喜欢列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {UsersIdLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdLikedSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: UsersIdLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdLikedSongsGet(id, page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['LikeApi.usersIdLikedSongsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * LikeApi - factory interface
 * @export
 */
export const LikeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LikeApiFp(configuration)
    return {
        /**
         * 获取当前认证用户（通过JWT Token识别）的喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取我喜欢的歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {MeLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsGet(page?: number, pageSize?: number, search?: string, sortBy?: MeLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.meLikedSongsGet(page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 将一首指定的歌曲从当前认证用户的“我喜欢”列表中移除。
         * @summary 从我喜欢列表移除歌曲
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdDelete(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.meLikedSongsSongIdDelete(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 将一首指定的歌曲添加到当前认证用户的“我喜欢”列表中。
         * @summary 添加歌曲到我喜欢列表
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdPost(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.meLikedSongsSongIdPost(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据歌曲ID，检查当前通过认证的用户是否已经喜欢了该歌曲。
         * @summary 检查歌曲喜欢状态
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meLikedSongsSongIdStatusGet(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLikeStatusResponse> {
            return localVarFp.meLikedSongsSongIdStatusGet(songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定用户的公开喜欢歌曲分页列表，支持搜索和排序。
         * @summary 获取指定用户的喜欢列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
         * @param {UsersIdLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdLikedSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: UsersIdLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.usersIdLikedSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LikeApi - interface
 * @export
 * @interface LikeApi
 */
export interface LikeApiInterface {
    /**
     * 获取当前认证用户（通过JWT Token识别）的喜欢歌曲分页列表，支持搜索和排序。
     * @summary 获取我喜欢的歌曲列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
     * @param {MeLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApiInterface
     */
    meLikedSongsGet(page?: number, pageSize?: number, search?: string, sortBy?: MeLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

    /**
     * 将一首指定的歌曲从当前认证用户的“我喜欢”列表中移除。
     * @summary 从我喜欢列表移除歌曲
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApiInterface
     */
    meLikedSongsSongIdDelete(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 将一首指定的歌曲添加到当前认证用户的“我喜欢”列表中。
     * @summary 添加歌曲到我喜欢列表
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApiInterface
     */
    meLikedSongsSongIdPost(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 根据歌曲ID，检查当前通过认证的用户是否已经喜欢了该歌曲。
     * @summary 检查歌曲喜欢状态
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApiInterface
     */
    meLikedSongsSongIdStatusGet(songId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLikeStatusResponse>;

    /**
     * 获取指定用户的公开喜欢歌曲分页列表，支持搜索和排序。
     * @summary 获取指定用户的喜欢列表
     * @param {number} id 用户 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
     * @param {UsersIdLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApiInterface
     */
    usersIdLikedSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: UsersIdLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

}

/**
 * LikeApi - object-oriented interface
 * @export
 * @class LikeApi
 * @extends {BaseAPI}
 */
export class LikeApi extends BaseAPI implements LikeApiInterface {
    /**
     * 获取当前认证用户（通过JWT Token识别）的喜欢歌曲分页列表，支持搜索和排序。
     * @summary 获取我喜欢的歌曲列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
     * @param {MeLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public meLikedSongsGet(page?: number, pageSize?: number, search?: string, sortBy?: MeLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return LikeApiFp(this.configuration).meLikedSongsGet(page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 将一首指定的歌曲从当前认证用户的“我喜欢”列表中移除。
     * @summary 从我喜欢列表移除歌曲
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public meLikedSongsSongIdDelete(songId: number, options?: RawAxiosRequestConfig) {
        return LikeApiFp(this.configuration).meLikedSongsSongIdDelete(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 将一首指定的歌曲添加到当前认证用户的“我喜欢”列表中。
     * @summary 添加歌曲到我喜欢列表
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public meLikedSongsSongIdPost(songId: number, options?: RawAxiosRequestConfig) {
        return LikeApiFp(this.configuration).meLikedSongsSongIdPost(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据歌曲ID，检查当前通过认证的用户是否已经喜欢了该歌曲。
     * @summary 检查歌曲喜欢状态
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public meLikedSongsSongIdStatusGet(songId: number, options?: RawAxiosRequestConfig) {
        return LikeApiFp(this.configuration).meLikedSongsSongIdStatusGet(songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定用户的公开喜欢歌曲分页列表，支持搜索和排序。
     * @summary 获取指定用户的喜欢列表
     * @param {number} id 用户 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家名)
     * @param {UsersIdLikedSongsGetSortByEnum} [sortBy] 排序字段 (latest, oldest, name, duration)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LikeApi
     */
    public usersIdLikedSongsGet(id: number, page?: number, pageSize?: number, search?: string, sortBy?: UsersIdLikedSongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return LikeApiFp(this.configuration).usersIdLikedSongsGet(id, page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const MeLikedSongsGetSortByEnum = {
    Latest: 'latest',
    Oldest: 'oldest',
    Name: 'name',
    Duration: 'duration'
} as const;
export type MeLikedSongsGetSortByEnum = typeof MeLikedSongsGetSortByEnum[keyof typeof MeLikedSongsGetSortByEnum];
/**
 * @export
 */
export const UsersIdLikedSongsGetSortByEnum = {
    Latest: 'latest',
    Oldest: 'oldest',
    Name: 'name',
    Duration: 'duration'
} as const;
export type UsersIdLikedSongsGetSortByEnum = typeof UsersIdLikedSongsGetSortByEnum[keyof typeof UsersIdLikedSongsGetSortByEnum];


/**
 * PlaylistApi - axios parameter creator
 * @export
 */
export const PlaylistApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 获取我的歌单列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌单名)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsGet: async (page?: number, pageSize?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除我的歌单
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdDelete: async (playlistId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdDelete', 'playlistId', playlistId)
            const localVarPath = `/me/playlists/{playlistId}`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 更新我的歌单信息
         * @param {number} playlistId 歌单 ID
         * @param {ModelsUpdatePlaylistRequestDTO} updateRequest 更新歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdPut: async (playlistId: number, updateRequest: ModelsUpdatePlaylistRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdPut', 'playlistId', playlistId)
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdPut', 'updateRequest', updateRequest)
            const localVarPath = `/me/playlists/{playlistId}`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 向我的歌单添加歌曲
         * @param {number} playlistId 歌单 ID
         * @param {ModelsAddSongToPlaylistRequestDTO} addSongRequest 添加歌曲请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdSongsPost: async (playlistId: number, addSongRequest: ModelsAddSongToPlaylistRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdSongsPost', 'playlistId', playlistId)
            // verify required parameter 'addSongRequest' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdSongsPost', 'addSongRequest', addSongRequest)
            const localVarPath = `/me/playlists/{playlistId}/songs`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addSongRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 从我的歌单移除歌曲
         * @param {number} playlistId 歌单 ID
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdSongsSongIdDelete: async (playlistId: number, songId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdSongsSongIdDelete', 'playlistId', playlistId)
            // verify required parameter 'songId' is not null or undefined
            assertParamExists('mePlaylistsPlaylistIdSongsSongIdDelete', 'songId', songId)
            const localVarPath = `/me/playlists/{playlistId}/songs/{songId}`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)))
                .replace(`{${"songId"}}`, encodeURIComponent(String(songId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 创建我的新歌单
         * @param {ModelsCreatePlaylistRequestDTO} createRequest 创建歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPost: async (createRequest: ModelsCreatePlaylistRequestDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRequest' is not null or undefined
            assertParamExists('mePlaylistsPost', 'createRequest', createRequest)
            const localVarPath = `/me/playlists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据歌单ID获取其详细信息。
         * @summary 获取歌单详情
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistsPlaylistIdGet: async (playlistId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('playlistsPlaylistIdGet', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlistId}`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据歌单ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取歌单的歌曲列表
         * @param {number} playlistId 歌单 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {PlaylistsPlaylistIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistsPlaylistIdSongsGet: async (playlistId: number, page?: number, pageSize?: number, search?: string, sortBy?: PlaylistsPlaylistIdSongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'playlistId' is not null or undefined
            assertParamExists('playlistsPlaylistIdSongsGet', 'playlistId', playlistId)
            const localVarPath = `/playlists/{playlistId}/songs`
                .replace(`{${"playlistId"}}`, encodeURIComponent(String(playlistId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 获取指定用户的歌单列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPlaylistsGet: async (id: number, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdPlaylistsGet', 'id', id)
            const localVarPath = `/users/{id}/playlists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlaylistApi - functional programming interface
 * @export
 */
export const PlaylistApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlaylistApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 获取我的歌单列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌单名)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePlaylistsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsGet(page, pageSize, search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 删除我的歌单
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsPlaylistIdDelete(playlistId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsPlaylistIdDelete(playlistId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsPlaylistIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 更新我的歌单信息
         * @param {number} playlistId 歌单 ID
         * @param {ModelsUpdatePlaylistRequestDTO} updateRequest 更新歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsPlaylistIdPut(playlistId: number, updateRequest: ModelsUpdatePlaylistRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsPlaylistIdPut(playlistId, updateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsPlaylistIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 向我的歌单添加歌曲
         * @param {number} playlistId 歌单 ID
         * @param {ModelsAddSongToPlaylistRequestDTO} addSongRequest 添加歌曲请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsPlaylistIdSongsPost(playlistId: number, addSongRequest: ModelsAddSongToPlaylistRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsPlaylistIdSongsPost(playlistId, addSongRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsPlaylistIdSongsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 从我的歌单移除歌曲
         * @param {number} playlistId 歌单 ID
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsPlaylistIdSongsSongIdDelete(playlistId: number, songId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsPlaylistIdSongsSongIdDelete(playlistId, songId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsPlaylistIdSongsSongIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 创建我的新歌单
         * @param {ModelsCreatePlaylistRequestDTO} createRequest 创建歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePlaylistsPost(createRequest: ModelsCreatePlaylistRequestDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePlaylistsPost(createRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.mePlaylistsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据歌单ID获取其详细信息。
         * @summary 获取歌单详情
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistsPlaylistIdGet(playlistId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPlaylistInfoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistsPlaylistIdGet(playlistId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.playlistsPlaylistIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据歌单ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取歌单的歌曲列表
         * @param {number} playlistId 歌单 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {PlaylistsPlaylistIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async playlistsPlaylistIdSongsGet(playlistId: number, page?: number, pageSize?: number, search?: string, sortBy?: PlaylistsPlaylistIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.playlistsPlaylistIdSongsGet(playlistId, page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.playlistsPlaylistIdSongsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary 获取指定用户的歌单列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdPlaylistsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MePlaylistsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPlaylistsGet(id, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlaylistApi.usersIdPlaylistsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlaylistApi - factory interface
 * @export
 */
export const PlaylistApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlaylistApiFp(configuration)
    return {
        /**
         * 
         * @summary 获取我的歌单列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌单名)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<MePlaylistsGet200Response> {
            return localVarFp.mePlaylistsGet(page, pageSize, search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除我的歌单
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdDelete(playlistId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.mePlaylistsPlaylistIdDelete(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 更新我的歌单信息
         * @param {number} playlistId 歌单 ID
         * @param {ModelsUpdatePlaylistRequestDTO} updateRequest 更新歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdPut(playlistId: number, updateRequest: ModelsUpdatePlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.mePlaylistsPlaylistIdPut(playlistId, updateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 向我的歌单添加歌曲
         * @param {number} playlistId 歌单 ID
         * @param {ModelsAddSongToPlaylistRequestDTO} addSongRequest 添加歌曲请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdSongsPost(playlistId: number, addSongRequest: ModelsAddSongToPlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.mePlaylistsPlaylistIdSongsPost(playlistId, addSongRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 从我的歌单移除歌曲
         * @param {number} playlistId 歌单 ID
         * @param {number} songId 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPlaylistIdSongsSongIdDelete(playlistId: number, songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.mePlaylistsPlaylistIdSongsSongIdDelete(playlistId, songId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 创建我的新歌单
         * @param {ModelsCreatePlaylistRequestDTO} createRequest 创建歌单请求
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePlaylistsPost(createRequest: ModelsCreatePlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.mePlaylistsPost(createRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据歌单ID获取其详细信息。
         * @summary 获取歌单详情
         * @param {number} playlistId 歌单 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistsPlaylistIdGet(playlistId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsPlaylistInfoDTO> {
            return localVarFp.playlistsPlaylistIdGet(playlistId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据歌单ID获取其歌曲的分页列表，支持搜索和排序。
         * @summary 获取歌单的歌曲列表
         * @param {number} playlistId 歌单 ID
         * @param {number} [page] 歌曲列表的页码
         * @param {number} [pageSize] 每页的歌曲数量
         * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
         * @param {PlaylistsPlaylistIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playlistsPlaylistIdSongsGet(playlistId: number, page?: number, pageSize?: number, search?: string, sortBy?: PlaylistsPlaylistIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.playlistsPlaylistIdSongsGet(playlistId, page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 获取指定用户的歌单列表
         * @param {number} id 用户 ID
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdPlaylistsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<MePlaylistsGet200Response> {
            return localVarFp.usersIdPlaylistsGet(id, page, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PlaylistApi - interface
 * @export
 * @interface PlaylistApi
 */
export interface PlaylistApiInterface {
    /**
     * 
     * @summary 获取我的歌单列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌单名)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig): AxiosPromise<MePlaylistsGet200Response>;

    /**
     * 
     * @summary 删除我的歌单
     * @param {number} playlistId 歌单 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsPlaylistIdDelete(playlistId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 
     * @summary 更新我的歌单信息
     * @param {number} playlistId 歌单 ID
     * @param {ModelsUpdatePlaylistRequestDTO} updateRequest 更新歌单请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsPlaylistIdPut(playlistId: number, updateRequest: ModelsUpdatePlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 
     * @summary 向我的歌单添加歌曲
     * @param {number} playlistId 歌单 ID
     * @param {ModelsAddSongToPlaylistRequestDTO} addSongRequest 添加歌曲请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsPlaylistIdSongsPost(playlistId: number, addSongRequest: ModelsAddSongToPlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 
     * @summary 从我的歌单移除歌曲
     * @param {number} playlistId 歌单 ID
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsPlaylistIdSongsSongIdDelete(playlistId: number, songId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 
     * @summary 创建我的新歌单
     * @param {ModelsCreatePlaylistRequestDTO} createRequest 创建歌单请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    mePlaylistsPost(createRequest: ModelsCreatePlaylistRequestDTO, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: any; }>;

    /**
     * 根据歌单ID获取其详细信息。
     * @summary 获取歌单详情
     * @param {number} playlistId 歌单 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    playlistsPlaylistIdGet(playlistId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsPlaylistInfoDTO>;

    /**
     * 根据歌单ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取歌单的歌曲列表
     * @param {number} playlistId 歌单 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {PlaylistsPlaylistIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    playlistsPlaylistIdSongsGet(playlistId: number, page?: number, pageSize?: number, search?: string, sortBy?: PlaylistsPlaylistIdSongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

    /**
     * 
     * @summary 获取指定用户的歌单列表
     * @param {number} id 用户 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApiInterface
     */
    usersIdPlaylistsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<MePlaylistsGet200Response>;

}

/**
 * PlaylistApi - object-oriented interface
 * @export
 * @class PlaylistApi
 * @extends {BaseAPI}
 */
export class PlaylistApi extends BaseAPI implements PlaylistApiInterface {
    /**
     * 
     * @summary 获取我的歌单列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌单名)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsGet(page?: number, pageSize?: number, search?: string, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsGet(page, pageSize, search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除我的歌单
     * @param {number} playlistId 歌单 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsPlaylistIdDelete(playlistId: number, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsPlaylistIdDelete(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 更新我的歌单信息
     * @param {number} playlistId 歌单 ID
     * @param {ModelsUpdatePlaylistRequestDTO} updateRequest 更新歌单请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsPlaylistIdPut(playlistId: number, updateRequest: ModelsUpdatePlaylistRequestDTO, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsPlaylistIdPut(playlistId, updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 向我的歌单添加歌曲
     * @param {number} playlistId 歌单 ID
     * @param {ModelsAddSongToPlaylistRequestDTO} addSongRequest 添加歌曲请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsPlaylistIdSongsPost(playlistId: number, addSongRequest: ModelsAddSongToPlaylistRequestDTO, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsPlaylistIdSongsPost(playlistId, addSongRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 从我的歌单移除歌曲
     * @param {number} playlistId 歌单 ID
     * @param {number} songId 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsPlaylistIdSongsSongIdDelete(playlistId: number, songId: number, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsPlaylistIdSongsSongIdDelete(playlistId, songId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 创建我的新歌单
     * @param {ModelsCreatePlaylistRequestDTO} createRequest 创建歌单请求
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public mePlaylistsPost(createRequest: ModelsCreatePlaylistRequestDTO, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).mePlaylistsPost(createRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据歌单ID获取其详细信息。
     * @summary 获取歌单详情
     * @param {number} playlistId 歌单 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public playlistsPlaylistIdGet(playlistId: number, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).playlistsPlaylistIdGet(playlistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据歌单ID获取其歌曲的分页列表，支持搜索和排序。
     * @summary 获取歌单的歌曲列表
     * @param {number} playlistId 歌单 ID
     * @param {number} [page] 歌曲列表的页码
     * @param {number} [pageSize] 每页的歌曲数量
     * @param {string} [search] 在歌曲中搜索的关键词 (匹配歌曲名或专辑名)
     * @param {PlaylistsPlaylistIdSongsGetSortByEnum} [sortBy] 歌曲列表的排序字段
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public playlistsPlaylistIdSongsGet(playlistId: number, page?: number, pageSize?: number, search?: string, sortBy?: PlaylistsPlaylistIdSongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).playlistsPlaylistIdSongsGet(playlistId, page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 获取指定用户的歌单列表
     * @param {number} id 用户 ID
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlaylistApi
     */
    public usersIdPlaylistsGet(id: number, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return PlaylistApiFp(this.configuration).usersIdPlaylistsGet(id, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const PlaylistsPlaylistIdSongsGetSortByEnum = {
    Oldest: 'oldest',
    Latest: 'latest',
    PlayCount: 'play_count',
    LikeCount: 'like_count'
} as const;
export type PlaylistsPlaylistIdSongsGetSortByEnum = typeof PlaylistsPlaylistIdSongsGetSortByEnum[keyof typeof PlaylistsPlaylistIdSongsGetSortByEnum];


/**
 * SongApi - axios parameter creator
 * @export
 */
export const SongApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取公开的歌曲列表，支持分页、按歌曲名或艺术家名搜索、以及排序。
         * @summary 获取歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家)
         * @param {SongsGetSortByEnum} [sortBy] 排序字段 (oldest, latest, play_count, like_count)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsGet: async (page?: number, pageSize?: number, search?: string, sortBy?: SongsGetSortByEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/songs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据歌曲ID获取单曲的详细信息，包括艺术家和专辑数据。
         * @summary 获取单曲详情
         * @param {number} id 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('songsIdGet', 'id', id)
            const localVarPath = `/songs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SongApi - functional programming interface
 * @export
 */
export const SongApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SongApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取公开的歌曲列表，支持分页、按歌曲名或艺术家名搜索、以及排序。
         * @summary 获取歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家)
         * @param {SongsGetSortByEnum} [sortBy] 排序字段 (oldest, latest, play_count, like_count)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsGet(page?: number, pageSize?: number, search?: string, sortBy?: SongsGetSortByEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumsIdSongsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.songsGet(page, pageSize, search, sortBy, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SongApi.songsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据歌曲ID获取单曲的详细信息，包括艺术家和专辑数据。
         * @summary 获取单曲详情
         * @param {number} id 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async songsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsSongDetailDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.songsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SongApi.songsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SongApi - factory interface
 * @export
 */
export const SongApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SongApiFp(configuration)
    return {
        /**
         * 获取公开的歌曲列表，支持分页、按歌曲名或艺术家名搜索、以及排序。
         * @summary 获取歌曲列表
         * @param {number} [page] 页码
         * @param {number} [pageSize] 每页数量
         * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家)
         * @param {SongsGetSortByEnum} [sortBy] 排序字段 (oldest, latest, play_count, like_count)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsGet(page?: number, pageSize?: number, search?: string, sortBy?: SongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response> {
            return localVarFp.songsGet(page, pageSize, search, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据歌曲ID获取单曲的详细信息，包括艺术家和专辑数据。
         * @summary 获取单曲详情
         * @param {number} id 歌曲 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        songsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsSongDetailDTO> {
            return localVarFp.songsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SongApi - interface
 * @export
 * @interface SongApi
 */
export interface SongApiInterface {
    /**
     * 获取公开的歌曲列表，支持分页、按歌曲名或艺术家名搜索、以及排序。
     * @summary 获取歌曲列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家)
     * @param {SongsGetSortByEnum} [sortBy] 排序字段 (oldest, latest, play_count, like_count)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiInterface
     */
    songsGet(page?: number, pageSize?: number, search?: string, sortBy?: SongsGetSortByEnum, options?: RawAxiosRequestConfig): AxiosPromise<AlbumsIdSongsGet200Response>;

    /**
     * 根据歌曲ID获取单曲的详细信息，包括艺术家和专辑数据。
     * @summary 获取单曲详情
     * @param {number} id 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApiInterface
     */
    songsIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsSongDetailDTO>;

}

/**
 * SongApi - object-oriented interface
 * @export
 * @class SongApi
 * @extends {BaseAPI}
 */
export class SongApi extends BaseAPI implements SongApiInterface {
    /**
     * 获取公开的歌曲列表，支持分页、按歌曲名或艺术家名搜索、以及排序。
     * @summary 获取歌曲列表
     * @param {number} [page] 页码
     * @param {number} [pageSize] 每页数量
     * @param {string} [search] 搜索关键词 (匹配歌曲名或艺术家)
     * @param {SongsGetSortByEnum} [sortBy] 排序字段 (oldest, latest, play_count, like_count)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApi
     */
    public songsGet(page?: number, pageSize?: number, search?: string, sortBy?: SongsGetSortByEnum, options?: RawAxiosRequestConfig) {
        return SongApiFp(this.configuration).songsGet(page, pageSize, search, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据歌曲ID获取单曲的详细信息，包括艺术家和专辑数据。
     * @summary 获取单曲详情
     * @param {number} id 歌曲 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SongApi
     */
    public songsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return SongApiFp(this.configuration).songsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const SongsGetSortByEnum = {
    Oldest: 'oldest',
    Latest: 'latest',
    PlayCount: 'play_count',
    LikeCount: 'like_count'
} as const;
export type SongsGetSortByEnum = typeof SongsGetSortByEnum[keyof typeof SongsGetSortByEnum];


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 更新当前认证用户（通过JWT Token识别）的个人资料。
         * @summary 更新当前登录用户信息
         * @param {ModelsUpdateUserRequest} updateRequest 要更新的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfilePut: async (updateRequest: ModelsUpdateUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateRequest' is not null or undefined
            assertParamExists('meProfilePut', 'updateRequest', updateRequest)
            const localVarPath = `/me/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据用户ID获取用户的关注状态
         * @summary 获取用户关注状态
         * @param {number} userId 对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserIdFollowGet: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('meUserIdFollowGet', 'userId', userId)
            const localVarPath = `/me/{userId}/follow`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 对一位用户进行关注。如果已经关注，则取消关注。
         * @summary 关注或者取消关注用户
         * @param {number} userId 关注对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserIdFollowPost: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('meUserIdFollowPost', 'userId', userId)
            const localVarPath = `/me/{userId}/follow`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据用户ID获取用户的完整公开信息，包括关注数和粉丝数。
         * @summary 获取用户个人资料
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 根据用户ID获取用户的公开用户名和昵称。
         * @summary 获取用户名和昵称
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdNameGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersIdNameGet', 'id', id)
            const localVarPath = `/users/{id}/name`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 更新当前认证用户（通过JWT Token识别）的个人资料。
         * @summary 更新当前登录用户信息
         * @param {ModelsUpdateUserRequest} updateRequest 要更新的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meProfilePut(updateRequest: ModelsUpdateUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meProfilePut(updateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.meProfilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据用户ID获取用户的关注状态
         * @summary 获取用户关注状态
         * @param {number} userId 对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meUserIdFollowGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsFollowStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meUserIdFollowGet(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.meUserIdFollowGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 对一位用户进行关注。如果已经关注，则取消关注。
         * @summary 关注或者取消关注用户
         * @param {number} userId 关注对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meUserIdFollowPost(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: string; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meUserIdFollowPost(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.meUserIdFollowPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据用户ID获取用户的完整公开信息，包括关注数和粉丝数。
         * @summary 获取用户个人资料
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 根据用户ID获取用户的公开用户名和昵称。
         * @summary 获取用户名和昵称
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersIdNameGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUsernameResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdNameGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.usersIdNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 更新当前认证用户（通过JWT Token识别）的个人资料。
         * @summary 更新当前登录用户信息
         * @param {ModelsUpdateUserRequest} updateRequest 要更新的用户信息
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meProfilePut(updateRequest: ModelsUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.meProfilePut(updateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据用户ID获取用户的关注状态
         * @summary 获取用户关注状态
         * @param {number} userId 对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserIdFollowGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsFollowStatusResponse> {
            return localVarFp.meUserIdFollowGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 对一位用户进行关注。如果已经关注，则取消关注。
         * @summary 关注或者取消关注用户
         * @param {number} userId 关注对象用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meUserIdFollowPost(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }> {
            return localVarFp.meUserIdFollowPost(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据用户ID获取用户的完整公开信息，包括关注数和粉丝数。
         * @summary 获取用户个人资料
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUserProfile> {
            return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 根据用户ID获取用户的公开用户名和昵称。
         * @summary 获取用户名和昵称
         * @param {number} id 用户 ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersIdNameGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUsernameResponse> {
            return localVarFp.usersIdNameGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * 更新当前认证用户（通过JWT Token识别）的个人资料。
     * @summary 更新当前登录用户信息
     * @param {ModelsUpdateUserRequest} updateRequest 要更新的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    meProfilePut(updateRequest: ModelsUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 根据用户ID获取用户的关注状态
     * @summary 获取用户关注状态
     * @param {number} userId 对象用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    meUserIdFollowGet(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsFollowStatusResponse>;

    /**
     * 对一位用户进行关注。如果已经关注，则取消关注。
     * @summary 关注或者取消关注用户
     * @param {number} userId 关注对象用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    meUserIdFollowPost(userId: number, options?: RawAxiosRequestConfig): AxiosPromise<{ [key: string]: string; }>;

    /**
     * 根据用户ID获取用户的完整公开信息，包括关注数和粉丝数。
     * @summary 获取用户个人资料
     * @param {number} id 用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    usersIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUserProfile>;

    /**
     * 根据用户ID获取用户的公开用户名和昵称。
     * @summary 获取用户名和昵称
     * @param {number} id 用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    usersIdNameGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUsernameResponse>;

}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * 更新当前认证用户（通过JWT Token识别）的个人资料。
     * @summary 更新当前登录用户信息
     * @param {ModelsUpdateUserRequest} updateRequest 要更新的用户信息
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public meProfilePut(updateRequest: ModelsUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).meProfilePut(updateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据用户ID获取用户的关注状态
     * @summary 获取用户关注状态
     * @param {number} userId 对象用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public meUserIdFollowGet(userId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).meUserIdFollowGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 对一位用户进行关注。如果已经关注，则取消关注。
     * @summary 关注或者取消关注用户
     * @param {number} userId 关注对象用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public meUserIdFollowPost(userId: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).meUserIdFollowPost(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据用户ID获取用户的完整公开信息，包括关注数和粉丝数。
     * @summary 获取用户个人资料
     * @param {number} id 用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdGet(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 根据用户ID获取用户的公开用户名和昵称。
     * @summary 获取用户名和昵称
     * @param {number} id 用户 ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public usersIdNameGet(id: number, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).usersIdNameGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



